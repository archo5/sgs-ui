
//
// MIN. EXAMPLE
// - least amount of things
//

function sgs_ui_example_min()
{
}


//
// DEFAULT EXAMPLE
// - all kinds of stuff
//

function sgs_ui_example_default()
{
	/* MENUS */
	sub3menu =
	[
		{ text = "Third Submenu", disabled = true },
		{ disabled = true },
		{ text = "One option", disabled = true },
		{ text = "..or two!", func = function(){ println("TWOOOOOOOOOOO"); } },
	];
	
	submenu =
	[
		{ text = "One option", disabled = true },
		{ disabled = true },
		{ text = "..or two!" },
		{ text = "3", menu = sub3menu },
	];
	
	menu1_items =
	[
		{ text = "Test 1", func = function(){ println("Test 1 - function"); } },
		{ text = "Some option", checked = false },
		{ text = "Some checked option", checked = true },
		{ text = "Submenu?", menu = submenu },
		{ disabled = true },
		{ text = "Disabled", disabled = true },
		{ text = "Exiquit", func = function(){ global sys_exit = true; } },
	];
	
	global FRAME;
	
	global FORM = UI_CreateForm( FRAME.root );
	FORM.bindEvent( "change", function()
	{
		(name,type) = this.getLastChange();
		println("form changed: "${name=name,type=type});
	});
	
	function formdump()
	{
		printvar( FORM.getData() );
	}
	
	global STATCORE = UI_CreateStatic( FORM )[]{ x = 10, y = 10, width = -20, height = -20, anchorMode = UI_Anchor_All };
	mpitems =
	[
		{ text = "File", func = formdump },
		{ text = "Edit", menu = submenu },
		{ text = "Disabled", disabled = true },
		{ text = "Help", menu = sub3menu },
	];
	global STAT = UI_CreateMenuPanel( STATCORE, mpitems );
	STAT.bindEvent( "click", function(e){ println("static.click #"$e.clicks); });
	
	global TOPBAR = UI_CreateStatic( STAT )[]{ height = 24, backgroundColor = UIColor( 0.8, 1 ), anchorMode = UI_Anchor_Hor };
	
	UI_CreateButton( TOPBAR )[]{ x = 0, y = 0, width = 24, height = 24, icon = "icons/page.png" };
	UI_CreateButton( TOPBAR )[]{ x = 24, y = 0, width = 24, height = 24, icon = "icons/disk.png" };
	UI_CreateButton( TOPBAR )[]{ x = 48, y = 0, width = 24, height = 24, icon = "icons/disk_multiple.png" };
	
	global BTN = UI_CreateButton( STAT )[]{ x = 100, y = 100, width = 100, height = 30, caption = "Action", icon = "icons/disk.png" };
	BTN.bindEvent( "click", function() use( menu1_items )
	{
		UI_BuildMenu( this.frame.root, this.rx0, this.ry1, menu1_items );
	});
	
	tbKey = UI_CreateTextbox( STAT, "key", "Key" )[]{ x = 100, y = 50, width = 100, height = 24 };
	tbKey.bindEvent( "edit", function(){ println( "Updated key: " $ this.data.text ); } );
	tbVal = UI_CreateTextbox( STAT, "value", "Value" )[]{ x = 220, y = 50, width = 100, height = 24 };
	tbVal.bindEvent( "change", function(){ println( "Committed value: " $ this.data.text ); } );
	
	UI_CreateCheckbox( STAT, "cbox", "set" )[]{ x = 340, y = 50, width = 24, height = 24 };
	UI_CreateRadioButton( STAT, "rbtn", "A" )[]{ x = 364, y = 50, width = 24, height = 24 };
	UI_CreateRadioButton( STAT, "rbtn", "B" )[]{ x = 388, y = 50, width = 24, height = 24 };
	
	UI_CreateVScrollbar( STAT, 1000, 300, 37 )[]{ x = 400, y = 100, width = 16, height = 300 }.bindEvent( "change", function(){ println( "Scrolled to: " $ this.data.position ); } );
	UI_CreateHScrollbar( STAT, 1000, 300, 137 )[]{ x = 100, y = 400, width = 300, height = 16 }.bindEvent( "change", function(){ println( "Scrolled to: " $ this.data.position ); } );
	
	SCROLL = UI_CreateStatic( STAT )[]{ x = 500, y = 100, width = 200, height = 300 };
	UI_MakeScrollable( SCROLL );
	text = string_replace( io_file_read( "../examples/sgs-sdl.sgs" ), ["\r\n","\r","\t"], ["\n","\n","    "] );
	text = string_part( text, 0, 1024 );
	UI_CreateStatic( SCROLL )[]{ width = 20, height = 500, anchorMode = UI_Anchor_Hor, backgroundColor = UIColor( 0.9, 1 ), caption = text, align = UI_Align_Left | UI_Align_Top, posMode = UI_Pos_SideA };
	
	SELECT = UI_CreateSelectBox( STAT, "sBoX",
		[
			{ text = "Primary choice", value = "1" },
			{ text = "Situation", value = "sit" },
			{ text = "Something else", value = "other" },
		]
	)[]{ x = 500, y = 50, width = 180, height = 24 };
	
	AUTOLAYOUT = UI_CreateStatic( STAT )[]{ x = 840, y = 30, width = 100, stackMode = UI_Stack_AutoSizeTop };
	UI_CreateButton( AUTOLAYOUT )[]{ posMode = UI_Pos_SideA, width = 32, height = 32, icon = "icons/page.png" };
	UI_CreateButton( AUTOLAYOUT )[]{ posMode = UI_Pos_SideA, height = 32, icon = "icons/disk.png", name = "hovertest" };
	UI_CreateButton( AUTOLAYOUT )[]{ posMode = UI_Pos_SideA, width = 32, height = 32, icon = "icons/disk_multiple.png" };
	
	FRAME.addStyleSheet( UI_CreateStyleSheet()
		.addRule( UI_CreateStyleRule()[]{ style = UI_CreateStyle()[]{ width = 32 } }.addSelector( "@hovertest" ) )
		.addRule( UI_CreateStyleRule()[]{ style = UI_CreateStyle()[]{ width = 42 } }.addSelector( "@hovertest:hover" ) ) );
	
	UI_CreateSlider( STAT, "sldr1", 0, 1, 0, false )[]{ x = 800, y = 100, width = 150, height = 20 };
	UI_CreateSlider( STAT, "sldr2", 0, 5-1, 1, false )[]{ x = 800, y = 140, width = 150, height = 20 };
	UI_CreateSlider( STAT, "sldr3", 0, 1, 0, true )[]{ x = 720, y = 40, width = 30, height = 120 };
	UI_CreateSlider( STAT, "sldr4", 0, 8-1, 1, true )[]{ x = 760, y = 40, width = 30, height = 120 };
	
	global PGRID;
	PGRID_data =
	{
		boolean1 = true,
		boolean2 = false,
		value1 = 35,
		"text ctl" = "Text Here !",
		Troolean = true,
		selebox = 5,
		selebox_map = 4,
	};
	PGRID_options =
	[
		{ name = "boolean1", type = "checkbox" },
		{ name = "boolean2", type = "checkbox" },
		{ name = "value1", group = "First group", type = "slider", min = 0, max = 50, stopsize = 5 },
		{ name = "text ctl", group = "First group", type = "textbox" },
		{ name = "Troolean", group = "Second group", type = "switchbutton", items = map( true, "True", false, "False", "FileNotFound", "File not found" ) },
		{ type = "separator", label = "-- separator --" },
		{ name = "selebox", type = "selectbox", items = [
			{ value = "wat", text = "What?" },
			{ value = "dat", text = "That!" },
			{ value = "huh", text = "Really?" },
			{ value = 5, text = "High five!" },
		] },
		{ name = "selebox_map", type = "selectbox", items = map(
			"wat", "What?",
			"dat", "That!",
			"huh", "Really?",
			4, "Fantastic four!"
		) },
		{ type = "button", label = "Dump ALL", func = function(){ printvar( PGRID.getData() ); } },
	];
	PGRID = UI_CreatePropertyGrid( STAT, PGRID_data, PGRID_options )[]{ x = 720, y = 180, width = 200, height = 300 };
	
	
	WINDOW = UI_CreateWindow( FORM )[]{
		x = 300,
		y = 300,
		width = 300,
		height = 200,
		caption = "Info window",
		minWidth = 100,
		minHeight = 80
	}.adjustSize();
	
	WINSPLIT = UI_CreateHSplitPane( WINDOW, 0.2 )[]{ anchorMode = UI_Anchor_All };
	WINSPLIT2 = UI_CreateVSplitPane( WINSPLIT.getPaneB(), 0.5 )[]{ anchorMode = UI_Anchor_All };
	
	WINSTAT = UI_CreateStatic( WINSPLIT.getPaneA() )[]{
	//	height = 32,
		caption = "The Options",
		backgroundColor = UIColor( 0.9, 1 ),
		anchorMode = UI_Anchor_All, //UI_Anchor_Hor | UI_Anchor_Top,
		halign = UI_Align_Center,
		valign = UI_Align_VCenter,
	};
	
	WINELI = UI_CreateEditableList( WINSPLIT2.getPaneB(), "edlist" )[]{ anchorMode = UI_Anchor_All };
	UI_CreateImage( WINELI.appendItem( "app" )[]{ anchorMode = UI_Anchor_Hor, height = 32 }, "icons/application.png" )[]{ anchorMode = UI_Anchor_All, q1x = 0.5 };
	UI_CreateImage( WINELI.appendItem( "dbl" )[]{ anchorMode = UI_Anchor_Hor, height = 32 }, "icons/application_double.png" )[]{ anchorMode = UI_Anchor_All, q1x = 0.5 };
	UI_CreateImage( WINELI.appendItem( "csc" )[]{ anchorMode = UI_Anchor_Hor, height = 32 }, "icons/application_cascade.png" )[]{ anchorMode = UI_Anchor_All, q1x = 0.5 };
	UI_CreateImage( WINELI.appendItem( "add" )[]{ anchorMode = UI_Anchor_Hor, height = 32 }, "icons/application_add.png" )[]{ anchorMode = UI_Anchor_All, q1x = 0.5 };
	UI_CreateImage( WINELI.appendItem( "del" )[]{ anchorMode = UI_Anchor_Hor, height = 32 }, "icons/application_delete.png" )[]{ anchorMode = UI_Anchor_All, q1x = 0.5 };
	UI_CreateImage( WINELI.appendItem( "edt" )[]{ anchorMode = UI_Anchor_Hor, height = 32 }, "icons/application_edit.png" )[]{ anchorMode = UI_Anchor_All, q1x = 0.5 };
	UI_CreateImage( WINELI.appendItem( "err" )[]{ anchorMode = UI_Anchor_Hor, height = 32 }, "icons/application_error.png" )[]{ anchorMode = UI_Anchor_All, q1x = 0.5 };
	UI_CreateImage( WINELI.appendItem( "frm" )[]{ anchorMode = UI_Anchor_Hor, height = 32 }, "icons/application_form.png" )[]{ anchorMode = UI_Anchor_All, q1x = 0.5 };
	UI_CreateImage( WINELI.appendItem( "asb" )[]{ anchorMode = UI_Anchor_Hor, height = 32 }, "icons/application_side_boxes.png" )[]{ anchorMode = UI_Anchor_All, q1x = 0.5 };
	
	LBMENU = UI_CreateListBoxMenu( WINSPLIT2.getPaneA() )[]{ /* y = 32, height = -32, */ anchorMode = UI_Anchor_All };
	
	LBMENU.addOption({ text = "Test option 1" });
	LBMENU.addOption({ text = "Test/2", icon = "icons/book.png" });
	
	WINIMAGE = UI_CreateImage( WINSTAT, "icons/add.png", UI_ImageScale_None )[]{ anchorMode = UI_Anchor_Left | UI_Anchor_Vert, q1x = 0.2, index = 10 };
	WINIMAGE2 = UI_CreateImage( WINSTAT, "icons/delete.png", UI_ImageScale_None )[]{ anchorMode = UI_Anchor_Right | UI_Anchor_Vert, q0x = 0.8, index = 10 };
	
	SWBTN1 = UI_CreateSwitchButton( STAT, "swtchbtn", map( true, "Yes", false, "No", "FileNotFound", "Maybe" ), true, true )[]{ x = 100, y = 150, width = 150, height = 24 };
	SWBTN2 = UI_CreateSwitchButton( STAT, "swtchbt2", map( true, "Yes", false, "No" ), false, false )[]{ x = 100, y = 180, width = 150, height = 24 };
	
	INTBOX1 = UI_CreateIntegerBox( STAT, "ibx1", 37 )[]{ x = 100, y = 210, width = 80, height = 24 };
}


//
// MENU EXAMPLE
// - displays a fancy menu
//

function sgs_ui_example_menu()
{
	//
	// DATA
	//
	leveldata =
	{
		"01-picture" = { completed = 73, secretsfound = 6, secretstotal = 11 },
		"02-report" = { completed = 36, secretsfound = 1, secretstotal = 9 },
	};
	
	//
	// STYLES
	//
	global tx_ButtonN = SS_CreateTexture( "images/buttonN.png" );
	global tx_ButtonH = SS_CreateTexture( "images/buttonH.png" );
	global tx_ButtonC = SS_CreateTexture( "images/buttonC.png" );
	function MenuButton_Render()
	{
		if( this.rx0 == this.rx1 || this.ry0 == this.ry1 )
			return;
		
		theme = this.frame.theme;
		button_render_contents = theme.button_render_contents;
		
		c = this.backgroundColor + UIColor( 0.1, 0.1, 0.1, if( this.clicked, 0.2, if( this.mouseOn, 0, -0.1 ) ) );
		tex = if( this.clicked, tx_ButtonC, if( this.mouseOn, tx_ButtonH, tx_ButtonN ) );
		SS_DrawButton( tex, SS_UI_ConvertColor( c ), this.rx0-4, this.ry0-4, this.rx1+4, this.ry1+4, 8 );
	//	alpha = if( this.clicked, 0.2, if( this.mouseOn, 0, -0.1 ) ) + c.a;
	//	SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.ry1-1, c.r, c.g, c.b, alpha );
	//	SS_DrawColorRect( this.rx0, this.ry1-1, this.rx1, this.ry1, c.r, c.g, c.b, alpha+0.1 );
		
		this!button_render_contents();
	}
	
	global tx_StaticFrame = SS_CreateTexture( "images/frame.png" );
	function DrawStaticControl()
	{
		data = this.data;
		text = this.caption;
		
		c = this.backgroundColor;
		SS_DrawButton( tx_StaticFrame, SS_UI_ConvertColor( c ), this.cx0-1, this.cy0-1, this.cx1+1, this.cy1+1, 4 );
		
		if( text )
		{
			SS_DrawTextRect( text, this._cachedFont, SS_UI_ConvertColor( this.textColor ), SS_UI_ConvertAlignment( this.halign, this.valign ), this.px0, this.px1, this.py0, this.py1 );
		}
	}
	
	function DrawLoadingBar()
	{
		c = this.backgroundColor;
		SS_DrawButton( tx_ButtonH, SS_UI_ConvertColor( c ), this.rx0-4, this.ry0-4, this.rx1+4, this.ry1+4, 8 );
	}
	
	FRAME.addStyleSheet(UI_BuildStyleSheet({
		".auto-menu .imagebutton, .score-item, .level-entry" = { posMode = UI_Pos_SideA, margin = 4 },
		"*button" = { renderfunc = MenuButton_Render, backgroundColor = UIColor(0.7,0.2) },
		"**" = { font = "fonts/armata-regular.ttf", fontSize = 16 },
		".framed" = { renderfunc = DrawStaticControl },
		"*scrollbar" = { renderfunc = DrawStaticControl, backgroundColor = UIColor(0.01,0.5) },
		"*scrollbar button" = { backgroundColor = UIColor(0.8,0.3) },
		"****slider .sdr-rail" = { renderfunc = DrawStaticControl, backgroundColor = UIColor(0.4,0.2), nonClientV = 4, paddingV = 4, nonClientH = 8, paddingH = 2 },
		"slider .sdr-handle" = { backgroundColor = UIColor(0.4,1) },
		".auto-menu button" = { height = 36, anchorMode = UI_Anchor_Hor },
		".auto-menu button image" = { width = 36, anchorMode = UI_Anchor_Vert },
		// main menu
		".main-menu-frame" = { anchorMode = UI_Anchor_All, renderfunc = function MAIN_MENU_Renderfunc(){ SS_DrawColor2VRect( this.rx0, this.ry0, this.rx1, this.ry1, 0.5, 0.5, 0.5, 1, 0.2, 0.2, 0.2, 1 ); } },
		".main-menu-frame .title" = { backgroundColor = UIColor( 0 ), anchorMode = UI_Anchor_Hor, font = "fonts/gauge-oblique.ttf", fontSize = 48, textColor = UIColor(0.3,0.7,0.9,1), q0y = 0, q1y = 0.5 },
		".main-menu" = { q0x = 0.4, q0y = 0.5, q1x = 0.6, q1y = 1.0, overflow = true },
		// question window
		".qwindowbgr" = { backgroundColor = UIColor(0.5,0.5), anchorMode = UI_Anchor_All },
		".qwindow" = { backgroundColor = UIColor(0,0.5), q0x = 0.3, q0y = 0.3, q1x = 0.7, q1y = 0.7 },
		".qwindow .title" = { backgroundColor = UIColor(0.3,0.02,0.01,0.5), textColor = UIColor(0.9,1), q0x = 0, q0y = 0, q1x = 1, q1y = 0.3 },
		".qwindow .btn-yes" = { q0x = 0.1, q0y = 0.6, q1x = 0.4, q1y = 0.9 },
		".qwindow .btn-yes:hover" = { backgroundColor = UIColor(0.2,0.4,0.1,0.3) },
		".qwindow .btn-no" = { q0x = 0.6, q0y = 0.6, q1x = 0.9, q1y = 0.9 },
		".qwindow .btn-no:hover" = { backgroundColor = UIColor(0.4,0.02,0.01,0.3) },
		// screen
		".screen-panel" = { backgroundColor = UIColor( 0, 0.2 ), q0x = 1.22, q0y = 0.22, q1x = 1.98, q1y = 0.98 },
		".screen-panel .title" = { q0x = 0, q0y = 0, q1x = 1, q1y = 0.1, backgroundColor = UIColor( 0.3, 0.02, 0.01, 0.5 ), textColor = UIColor( 0.9, 1 ) },
		".screen-panel .btn-back" = { q0x = 0.05, q0y = 0.85, q1x = 0.2, q1y = 0.95 },
		".screen-panel .btn-back image" = { q0x = 0, q0y = 0, q1x = 0.3, q1y = 1 },
		".screen-panel .btn-fwd" = { q0x = 0.8, q0y = 0.85, q1x = 0.95, q1y = 0.95 },
		".screen-panel .btn-fwd image" = { q0x = 0.7, q0y = 0, q1x = 1, q1y = 1 },
		// - level list
		".screen-panel .level-list" = { q0x = 0.05, q0y = 0.15, q1x = 0.45, q1y = 0.8 },
		".screen-panel .level-list datacontainer" = { backgroundColor = UIColor(0.1,0.2,0.3,0.1) },
		".screen-panel .level-list .level-entry" = { height = 48, anchorMode = UI_Anchor_Hor },
		".screen-panel .level-list .level-entry .le-name" = { halign = UI_Align_Left },
		".screen-panel .level-list button static" = { font = "fonts/lato-regular.ttf", fontSize = 12, paddingLeft = 72 },
		".screen-panel .level-list .level-entry.active" = { backgroundColor = UIColor(0.1,0.2,0.4,0.6) },
		".screen-panel .level-list .level-entry static" = { anchorMode = UI_Anchor_All, backgroundColor = UIColor(0), textColor = UIColor(0.8,1), fontSize = 14 },
		".screen-panel .level-list .level-entry image" = { width = 64, anchorMode = UI_Anchor_Vert },
		// - level score
		".screen-panel .level-score" = { q0x = 0.51, q0y = 0.15, q1x = 0.91, q1y = 0.8, backgroundColor = UIColor(0) },
		".screen-panel .level-score .score-item" = { anchorMode = UI_Anchor_Hor, height = 36, backgroundColor = UIColor(0) },
		".screen-panel .level-score .score-item .label" = { q0x = 0, q0y = 0, q1x = 0.5, q1y = 1, backgroundColor = UIColor(0), textColor = UIColor(1), halign = UI_Align_Left },
		".screen-panel .level-score .score-item .value" = { q0x = 0.5, q0y = 0, q1x = 1, q1y = 1, backgroundColor = UIColor(0), textColor = UIColor(1), halign = UI_Align_Right },
		// - options
		".options-submenu" = { q0x = 0.03, q0y = 0.15, q1x = 0.23, q1y = 0.8, overflow = true },
		".opt-sub-btn.active" = { backgroundColor = UIColor(0.5,0.02,0.01,0.4) },
		".opt-pg" = { q0x = 0.3, q0y = 0.15, q1x = 0.9, q1y = 0.8, visible = false },
		".opt-pg datacontainer" = { backgroundColor = UIColor(0) },
		".opt-pg .label" = { backgroundColor = UIColor(0.4,0.3), textColor = UIColor(0.95,1), height = 36, renderfunc = DrawStaticControl, padding = 8 },
		".opt-pg .value" = { height = 36 },
		// loading screen
		".load-screen-frame" = { anchorMode = UI_Anchor_All, backgroundColor = UIColor(0), visible = false },
		".load-screen" = { anchorMode = UI_Anchor_All, renderfunc = function LOAD_SCREEN_Renderfunc(){ SS_DrawColor2VRect( this.rx0, this.ry0, this.rx1, this.ry1, 0.3, 0.4, 0.5, 1, 0.1, 0.1, 0.1, 1 ); } },
		".load-screen .title" = { backgroundColor = UIColor( 0 ), anchorMode = UI_Anchor_Hor, font = "fonts/gauge-oblique.ttf", fontSize = 36, textColor = UIColor(0.5,0.5,0.5,1), q0y = 0.3, q1y = 0.5 },
		".load-screen .title.level-name" = { q0y = 0.1, q1y = 0.3, textColor = UIColor(0.8,0.8,0.8,1) },
		".load-screen .loading-bar" = { q0x = 0.3, q0y = 0.6, q1x = 0.7, q1y = 0.67, backgroundColor = UIColor(0.1,1) },
		".load-screen .loading-bar-hl" = { anchorMode = UI_Anchor_All, renderfunc = DrawLoadingBar, backgroundColor = UIColor(0.7,0.3,0.2,1) },
		".load-screen .endnote" = { anchorMode = UI_Anchor_Hor, q0y = 0.7, q1y = 0.9, backgroundColor = UIColor(0), textColor = UIColor(1) },
	}));
	UI_EasingFunctions.smooth_fast_start = function( a, b, t ){ return UI_EasingFunctions.smooth( a, b, sqrt( t ) ); };
	
	//
	// COMMON CONTROLS
	//
	function CreateYesNoQuestionWindow( question, callback )
	{
		bgr = UI_CreateStatic( FRAME.root ).addClass( "qwindowbgr" );
		window = UI_CreateStatic( bgr ).addClass( "qwindow framed" );
		title = UI_CreateStatic( window )[]{ caption = question }.addClass( "title framed" );
		btn_yes = UI_CreateButton( window )[]{ caption = "Yes", class = "btn-yes" }.bindEvent( "click", function() use( callback, bgr ){ callback( true ); bgr.destroy(true); } );
		btn_no = UI_CreateButton( window )[]{ caption = "No", class = "btn-no" }.bindEvent( "click", function() use( callback, bgr ){ callback( false ); bgr.destroy(true); } );
		
		// background fade in
		tgtbgcol = bgr.backgroundColor;
		bgr.backgroundColor = UIColor(0);
		bgr.animate( { backgroundColor = tgtbgcol }, 0.4 );
		// window: zoom in --> title: slide in from top
		tgtq0x = window.q0x; tgtq0y = window.q0y; tgtq1x = window.q1x; tgtq1y = window.q1y;
		window[]{ q0x = 0.5, q1x = 0.5, q0y = 0.5, q1y = 0.5 };
		titleq0y = title.q0y;
		titleq1y = title.q1y;
		diff = titleq1y - titleq0y;
		title[]{ q0y = titleq0y - diff, q1y = titleq1y - diff };
		window.animate( { q0x = tgtq0x, q0y = tgtq0y, q1x = tgtq1x, q1y = tgtq1y }, 0.2, null, function() use( title, titleq0y, titleq1y )
		{
			title.animate( { q0y = titleq0y, q1y = titleq1y }, 0.2 );
		});
	}
	
	UI_Controls.levelentry_params = ["image","caption"];
	function UI_Controls.levelentry( parent, params )
	{
		ctrl = UI_CreateButton( parent ).addClass("level-entry");
		UI_CreateStatic( ctrl )[]{ caption = @params.caption }.addClass("le-name");
		UI_CreateImage( ctrl, @params.image, UI_ImageScale_Crop ).addClass("le-image");
		UI_ConfigControl( ctrl, params );
		ctrl.bindEvent( "click", function( e )
		{
			level_list = FRAME.find( this ).closest( ".level-list" );
			level_list.find( ".level-entry" ).removeClass( "active" );
			this.addClass( "active" );
			this.callEvent( "onactivechange", this );
			level_list.callEvent( "onactivechange", this );
		});
	}
	
	UI_Controls.scoreitem_params = ["key","label","value"];
	function UI_Controls.scoreitem( parent, params )
	{
		ctrl = UI_CreateStatic( parent ).addClass( "score-item" );
		UI_CreateStatic( ctrl )[]{ caption = @params.label }.addClass( "label" );
		UI_CreateStatic( ctrl )[]{ caption = @params.value }.addClass( "value" )[]{ name = @params.key };
	}
	
	//
	// HARDCORE UI ACTION
	//
	UI_BuildControls
	( FRAME.root,
	[
		{ type = "static", class = "main-menu-frame", children =
		[
			{ type = "static", class = "title", caption = "Example Menu" },
			{ type = "control", class = "main-menu auto-menu", children =
			[
				{ type = "imagebutton", name = "start", caption = "Start", image = "icons/control_play.png", class = "act-close-info act-close-options act-open-start act-menu-shrink" },
				{ type = "imagebutton", name = "info", caption = "Info", image = "icons/information.png", class = "act-close-start act-close-options act-open-info act-menu-shrink" },
				{ type = "imagebutton", name = "options", caption = "Options", image = "icons/cog.png", class = "act-close-start act-close-info act-open-options act-menu-shrink" },
				{ type = "imagebutton", name = "quit", caption = "Quit", image = "icons/stop.png", class = "act-ask-quit" },
			]},
		]},
		{ type = "static", class = "framed screen-panel start-screen", children =
		[
			{ type = "static", class = "framed title", caption = "Level selection" },
			{ type = "control", class = "level-list", contents = function( cont ){ UI_MakeScrollable( cont, "auto", false ); }, children =
			[
				{ type = "levelentry", name = "01-picture", caption = "The Picture", image = "icons/picture.png" },
				{ type = "levelentry", name = "02-report", caption = "The Report", image = "icons/report.png" },
			]},
			{ type = "control", class = "level-score", children =
			[
				{ type = "scoreitem", key = "completed", label = "Completed:", value = "-" },
				{ type = "scoreitem", key = "secretsfound", label = "Secrets found:", value = "-" },
			]},
			{ type = "imagebutton", class = "btn-back act-close-start act-menu-grow", caption = "Back", image = "icons/resultset_previous.png" },
			{ type = "imagebutton", class = "btn-fwd act-start-game", caption = "Start", image = "icons/bullet_go.png", visible = false },
		]},
		{ type = "static", class = "framed screen-panel info-screen", children =
		[
			{ type = "static", class = "framed title", caption = "Info // TODO: HTML-like content here" },
			{ type = "imagebutton", class = "btn-back act-close-info act-menu-grow", caption = "Back", image = "icons/resultset_previous.png" },
		]},
		{ type = "static", class = "framed screen-panel options-screen", children =
		[
			{ type = "static", class = "framed title", caption = "Options" },
			{ type = "imagebutton", class = "btn-back act-close-options act-menu-grow", caption = "Back", image = "icons/resultset_previous.png" },
			{ type = "control", class = "options-submenu auto-menu", children =
			[
				{ type = "imagebutton", name = "game", caption = "Game", image = "icons/lightning.png", class = "opt-sub-btn active" },
				{ type = "imagebutton", name = "graphics", caption = "Graphics", image = "icons/monitor.png", class = "opt-sub-btn" },
				{ type = "imagebutton", name = "audio", caption = "Audio", image = "icons/music.png", class = "opt-sub-btn" },
				{ type = "imagebutton", name = "controls", caption = "Controls", image = "icons/joystick.png", class = "opt-sub-btn" },
			]},
			{ type = "propertygrid", class = "opt-pg options-game", visible = true, },
			{ type = "propertygrid", class = "opt-pg options-graphics" },
			{ type = "propertygrid", class = "opt-pg options-audio" },
			{ type = "propertygrid", class = "opt-pg options-controls" },
		]},
		{ type = "static", class = "load-screen-frame", children =
		[
			{ type = "static", class = "load-screen", children =
			[
				{ type = "static", class = "title level-name", caption = "<level name>" },
				{ type = "static", class = "title", caption = "Loading..." },
				{ type = "static", class = "loading-bar framed", children =
				[
					{ type = "static", class = "loading-bar-hl" },
				]},
				{ type = "static", class = "endnote", caption = "click to 'play'...", visible = false },
			]},
		]},
	]);
	
	function main_menu_shrink()
	{
		FRAME.find(".main-menu-frame .title").animate({ q1y = 0.2, textColor = UIColor( 0.3, 0.7, 0.9, 0.5 ) }, 0.5 );
		FRAME.find(".main-menu-frame .main-menu").animate({ q0x = 0.05, q1x = 0.2 }, 0.5 );
	}
	function main_menu_grow()
	{
		FRAME.find(".main-menu-frame .title").animate({ q1y = 0.5, textColor = UIColor( 0.3, 0.7, 0.9, 1 ) }, 0.5 );
		FRAME.find(".main-menu-frame .main-menu").animate({ q0x = 0.4, q1x = 0.6 }, 0.5 );
	}
	FRAME.find( ".act-menu-shrink" ).bindEvent( "click", main_menu_shrink );
	FRAME.find( ".act-menu-grow" ).bindEvent( "click", main_menu_grow );
	
	function start_screen_enter()
	{
		FRAME.find(".start-screen").animate({ q0x = 0.22, q1x = 0.98 }, 0.5 );
		FRAME.find(".main-menu @start").animate({ height = 64, q1x = 1.1 }, 0.5, "smooth_fast_start" );
	}
	function start_screen_exit()
	{
		FRAME.find(".start-screen").animate({ q0x = 1.22, q1x = 1.98 }, 0.5 );
		FRAME.find(".main-menu @start").animate({ height = 36, q1x = 1 }, 0.5, "smooth_fast_start" );
	}
	FRAME.find( ".act-open-start" ).bindEvent( "click", start_screen_enter );
	FRAME.find( ".act-close-start" ).bindEvent( "click", start_screen_exit );
	FRAME.find( ".level-list" ).bindEvent( "onactivechange", function( e ) use( leveldata )
	{
		ldc = leveldata[ e.name ];
		FRAME.find( ".level-score @completed" ).setAttr( "caption", ldc.completed $ "%" );
		FRAME.find( ".level-score @secretsfound" ).setAttr( "caption", ldc.secretsfound $ "/" $ ldc.secretstotal );
		FRAME.find( ".act-start-game" ).setAttr( "visible", true );
	});
	
	function info_screen_enter()
	{
		FRAME.find(".info-screen").animate({ q0x = 0.22, q1x = 0.98 }, 0.5 );
		FRAME.find(".main-menu @info").animate({ height = 64, q1x = 1.1 }, 0.5, "smooth_fast_start" );
	}
	function info_screen_exit()
	{
		FRAME.find(".info-screen").animate({ q0x = 1.22, q1x = 1.98 }, 0.5 );
		FRAME.find(".main-menu @info").animate({ height = 36, q1x = 1 }, 0.5, "smooth_fast_start" );
	}
	FRAME.find( ".act-open-info" ).bindEvent( "click", info_screen_enter );
	FRAME.find( ".act-close-info" ).bindEvent( "click", info_screen_exit );
	
	function options_screen_enter()
	{
		FRAME.find(".options-screen").animate({ q0x = 0.22, q1x = 0.98 }, 0.5 );
		FRAME.find(".main-menu @options").animate({ height = 64, q1x = 1.1 }, 0.5, "smooth_fast_start" );
	}
	function options_screen_exit()
	{
		FRAME.find(".options-screen").animate({ q0x = 1.22, q1x = 1.98 }, 0.5 );
		FRAME.find(".main-menu @options").animate({ height = 36, q1x = 1 }, 0.5, "smooth_fast_start" );
	}
	FRAME.find( ".act-open-options" ).bindEvent( "click", options_screen_enter );
	FRAME.find( ".act-close-options" ).bindEvent( "click", options_screen_exit );
	FRAME.find( ".opt-sub-btn" ).bindEvent( "click", function()
	{
		FRAME.find( ".opt-pg" ).hide();
		FRAME.find( ".opt-pg.options-"$this.name ).show();
		FRAME.find( ".opt-sub-btn" ).removeClass( "active" );
		this.addClass( "active" );
	});
	
	FRAME.find( ".act-ask-quit" ).bindEvent( "click", function() use( CreateYesNoQuestionWindow ){
		CreateYesNoQuestionWindow( "Do you really want to quit?",
			function( result )
			{
				if( result )
					global sys_exit = true;
			}
		);
	} );
	
	// effect: loadscreen/endnote should change color periodically
	tt = 0;
	FRAME.setInterval( 1/60, function() use( tt )
	{
		tt += M_PI*2/60;
		FRAME.find( ".load-screen .endnote" ).setAttr( "textColor", UIColor( sin( tt ) * 0.3 + 0.7, 1 ) );
	});
	
	function start_game() use( tt )
	{
		FRAME.find( ".load-screen .endnote" ).setAttr( "visible", false );
		load_screen = FRAME.find( ".load-screen" )[0];
		load_screen[]{ q0y = -1, q1y = 0 };
		FRAME.find( ".load-screen-frame" )[0][]{ visible = true };
		load_screen.animate({ q0y = 0, q1y = 1 }, 0.5, "smooth_fast_start" );
		FRAME.find( ".load-screen .level-name" ).setAttr( "caption", FRAME.find( ".level-list .active .le-name" ).getAttr( "caption" ) );
		loadbar = FRAME.find( ".loading-bar-hl" )[0];
		loadbar.q1x = 0;
		loadbar.animate({ q1x = 1 }, 1, null, function() use( tt )
		{
			tt = 0; // reset cycle
			FRAME.find( ".load-screen .endnote" ).setAttr( "visible", true );
			FRAME.find( ".load-screen" ).bindEvent( "click", function()
			{
				FRAME.find( ".load-screen-frame" ).setAttr( "visible", false );
				FRAME.find( ".load-screen" ).unbindEventAll( "click" );
			});
		});
	}
	FRAME.find( ".act-start-game" ).bindEvent( "click", start_game );
	
	// specify options
	options_game =
	{
		show_blood = true,
		show_subtitles = false,
	};
	options_game_spec =
	[
		{ name = "show_blood", label = "Show blood", type = "switchbutton", items = map( false, "No", true, "Yes" ) },
		{ name = "show_subtitles", label = "Show subtitles", type = "switchbutton", items = map( false, "No", true, "Yes" ) },
	];
	FRAME.find( ".options-game" )[0].setData( options_game, options_game_spec );
	
	options_graphics =
	{
		resolution = "1024x576",
		aspect_ratio = "16:9",
		refresh_rate = 60,
		antialiasing = false,
		brightness = 1.0,
		vsync = false,
		shadows = true,
		texture_lod = 2,
		model_lod = 2,
	};
	options_graphics_spec =
	[
		{ name = "resolution", label = "Resolution", type = "switchbutton", items = [ "1024x576", "1280x720", "1680x1020" ], sidebuttons = true },
		{ name = "aspect_ratio", label = "Aspect Ratio", type = "switchbutton", items = { "16:9" = "Wide (16:9)", "16:10" = "Wide (16:10)", "4:3" = "Normal (4:3)", "5:4" = "Normal (5:4)" }, sidebuttons = true },
		{ name = "refresh_rate", label = "Screen Refresh Rate", type = "switchbutton", items = map( 60, "60Hz", 75, "75Hz" ), },
		{ name = "antialiasing", label = "Anti-aliasing", type = "switchbutton", items = map( false, "None", 2, "2x", 4, "4x", 8, "8x", "FXAA", "FXAA" ), },
		{ name = "brightness", label = "Brightness", type = "slider", min = 0.2, max = 5 },
		{ name = "vsync", label = "Sync Every Frame", type = "switchbutton", items = map( false, "No", true, "Yes" ) },
		{ name = "shadows", label = "Shadows", type = "switchbutton", items = map( false, "No", true, "Yes" ) },
		{ name = "texture_lod", label = "Texture Detail", type = "switchbutton", items = map( 0, "Very low", 1, "Low", 2, "Medium", 3, "High", 4, "Very high" ), sidebuttons = true },
		{ name = "model_lod", label = "Model Detail", type = "switchbutton", items = map( 0, "Very low", 1, "Low", 2, "Medium", 3, "High", 4, "Very high" ), sidebuttons = true },
	];
	FRAME.find( ".options-graphics" )[0].setData( options_graphics, options_graphics_spec );
	
	options_audio =
	{
		master_volume = 0.7,
		fx_volume = 0.9,
		music_volume = 1.0,
		voice_volume = 0.8,
	};
	options_audio_spec =
	[
		{ name = "master_volume", label = "Master Volume", type = "slider", min = 0.0, max = 1.0 },
		{ name = "fx_volume", label = "Effect Volume", type = "slider", min = 0.0, max = 1.0 },
		{ name = "music_volume", label = "Music Volume", type = "slider", min = 0.0, max = 1.0 },
		{ name = "voice_volume", label = "Voice Volume", type = "slider", min = 0.0, max = 1.0 },
	];
	FRAME.find( ".options-audio" )[0].setData( options_audio, options_audio_spec );
	
	options_controls =
	{
		invert_mouse = false,
		mouse_sensitivity = 1.3,
		keyboard_mapping = function(){ println("TODO"); },
	};
	options_controls_spec =
	[
		{ name = "invert_mouse", label = "Invert Mouse Y", type = "switchbutton", items = map( false, "No", true, "Yes" ) },
		{ name = "mouse_sensitivity", label = "Mouse Sensitivity", type = "slider", min = 0.1, max = 10.0 },
		{ name = "keyboard_mapping", label = "Change Keyboard Mapping", type = "button" },
	];
	FRAME.find( ".options-controls" )[0].setData( options_controls, options_controls_spec );
}


//
// SELECTORS EXAMPLE
// - tests classes and selectors
//

function sgs_ui_example_selectors()
{
	stylesheet = UI_CreateStyleSheet();
	stylerule = UI_CreateStyleRule();
	style = UI_CreateStyle();
	style.cursor = UI_Cursor_No;
	stylerule.style = style;
	print "Basic type selector: "; printvar( stylerule.addSelector( "button" ) );
	print "+Class type selector: "; printvar( stylerule.addSelector( "button.red" ) );
	print "Class type selector: "; printvar( stylerule.addSelector( ".red" ) );
	print "Sequenced type selector: "; printvar( stylerule.addSelector( "autolayout button" ) );
	print "Strict sequenced type selector: "; printvar( stylerule.addSelector( "autolayout > button" ) );
	print "Complex multiselector: "; printvar( stylerule.addSelector( "button.red.^re.$ed.~e@submit@^sub@$mit@~bmi" ) );
	stylerule.style = style;
	stylesheet.addRule( stylerule );
	
	button = UI_CreateButton( FRAME.root )[]{ x = 100, y = 100, width = 200, height = 20, name = "submit", caption = "Test" };
	button.addClass( "red" );
	print "Verify that classes are set: "; printvar( button.class );
	
	stylerule = UI_CreateStyleRule();
	stylerule.addSelector( "button.red.^re.$ed.~e@submit@^sub@$mit@~bmi" );
	print "Match compatible button against complex multiselector: "; printvar( stylerule.checkMatch( button ) );
	
	stylerule = UI_CreateStyleRule();
	stylerule.addSelector( "root button.red.^re.$ed.~e@submit@^sub@$mit@~bmi" );
	print "Match compatible button against complex multiselector 2: "; printvar( stylerule.checkMatch( button ) );
	
	stylerule = UI_CreateStyleRule();
	stylerule.addSelector( "root > button.red.^re.$ed.~e@submit@^sub@$mit@~bmi" );
	print "Match compatible button against complex multiselector 3: "; printvar( stylerule.checkMatch( button ) );
}


//
// FILEBROWSER EXAMPLE
// - tests file browser control
//

function sgs_ui_example_filebrowse()
{
	fb = UI_CreateFileBrowser( FRAME.root )[]{ anchorMode = UI_Anchor_All };
	fb.bindEvent( "change", function(){ println( "SUBMIT "${path=this.getCurrentPath(),file=this.getSubmittedItem()} ); } );
}


//
// DATAEDIT EXAMPLE [0]
// - tests complex data editing features
//

function sgs_ui_example_dataedit()
{
	dataobj =
	{
		name = "box",
		label = "Box",
		icon = "icons/box.png",
		properties =
		[
			{ name = "size", label = "Size", type = "text", default = "1" },
			{ name = "angle", label = "Angle", type = "text", default = "0" },
		],
		render = [ "icon", "name", "properties" ],
		info = { created = "2012-04-05", modified = "2013-05-07" },
	};
	schema =
	{
		ENTITY_PROPERTY =
		{
			"$type" = "object",
			name = { "$type" = "string" },
			label = { "$type" = "string" },
			type = { "$type" = "string", "$hint" = "type.property.entity", "$options" = ["text","position","angle"] },
			default = { "$type" = "string" },
		},
		ENTITY =
		{
			"$type" = "object",
			name = { "$type" = "string" },
			label = { "$type" = "string" },
			icon = { "$type" = "string", "$hint" = "path.image.icon.entity" },
			properties = { "$type" = "array", "$subtype" = "ENTITY_PROPERTY" },
			render = { "$type" = "array", "$subtype" = { "$type" = "string" } },
			info =
			{
				"$type" = "object",
				created = { "$type" = "string" },
				modified = { "$type" = "string" },
			},
		},
		"$root" = "ENTITY",
	};
	de = UI_CreateDataEdit( FRAME.root, dataobj, schema )[]{ anchorMode = UI_Anchor_All };
	de.bindEvent( "edit", function(){ println( "edited "${key=this.getChangedProperty(),val=this.getValueByName(this.getChangedProperty())} ); } );
	de.bindEvent( "change", function(){ println( "CHANGED "${key=this.getChangedProperty(),val=this.getValueByName(this.getChangedProperty())} ); } );
}


//
// DATAEDIT EXAMPLE 1
// - tests basic actual one-way editing
//

function sgs_ui_example_ded1()
{
	dataobj = UI_CreateStatic( FRAME.root )[]{ x = 200, y = 200, width = 300, height = 200, backgroundColor = UIColor(0.8,0.7,0.6), caption = "Edit me" };
	schema =
	{
		CONTROL =
		{
			"$type" = "object",
			x = { "$type" = "int" },
			y = { "$type" = "int" },
			width = { "$type" = "int" },
			height = { "$type" = "int" },
			caption = { "$type" = "string" },
		},
		"$root" = "CONTROL",
	};
	de = UI_CreateDataEdit( FRAME.root, dataobj, schema )[]{ anchorMode = UI_Anchor_All, q0x = 0.7 };
	de.bindEvent( "change", function() use( dataobj )
	{
		this.applyChangeToObject( dataobj );
	});
}


//
// DATAEDIT EXAMPLE 2
// - tests basic actual two-way editing
//

function sgs_ui_example_ded2()
{
	dataobj = UI_CreateStatic( FRAME.root )[]{ x = 200, y = 200, width = 300, height = 200, backgroundColor = UIColor(0.8,0.7,0.6), caption = "Edit or resize me" };
	UI_MakeResizable( dataobj, 4, 4, 4, 4 );
	schema =
	{
		CONTROL =
		{
			"$type" = "object",
			x = { "$type" = "int" },
			y = { "$type" = "int" },
			width = { "$type" = "int" },
			height = { "$type" = "int" },
			caption = { "$type" = "string" },
		},
		"$root" = "CONTROL",
	};
	de = UI_CreateDataEdit( FRAME.root, dataobj, schema )[]{ anchorMode = UI_Anchor_All, q0x = 0.7 };
	dataobj.bindEvent( "oneditsize", function( e ) use( de )
	{
		de.updateData( this );
	});
	de.bindEvent( "change", function() use( dataobj )
	{
		this.applyChangeToObject( dataobj );
	});
}


//
// DATAEDIT EXAMPLE 3
// - tests two-way editing with one-way arrays
//

function sgs_ui_example_ded3()
{
	dataobj =
	[
		UI_CreateStatic( FRAME.root )[]{ x = 100, y = 100, width = 200, height = 100, backgroundColor = UIColor(0.8,0.7,0.6), caption = "Edit or resize me" },
		UI_CreateStatic( FRAME.root )[]{ x = 400, y = 200, width = 200, height = 100, backgroundColor = UIColor(0.8,0.7,0.6), caption = "Edit or resize me too" },
	];
	foreach( ctrl : dataobj )
	{
		UI_MakeResizable( ctrl, 4, 4, 4, 4 );
		UI_MakeResizable( ctrl, 4, 4, 4, 4 );
	}
	schema =
	{
		CONTROL =
		{
			"$type" = "object",
			x = { "$type" = "int" },
			y = { "$type" = "int" },
			width = { "$type" = "int" },
			height = { "$type" = "int" },
			caption = { "$type" = "string" },
		},
		CONTROL_ARRAY =
		{
			"$name" = "Controls",
			"$type" = "array",
			"$subtype" = "CONTROL",
		},
		"$root" = "CONTROL_ARRAY",
	};
	de = UI_CreateDataEdit( FRAME.root, dataobj, schema )[]{ anchorMode = UI_Anchor_All, q0x = 0.7 };
	function updateDataCb( e ) use( de, dataobj )
	{
		de.updateData( dataobj );
	}
	foreach( ctrl : dataobj )
	{
		ctrl.bindEvent( "oneditsize", updateDataCb );
	}
	de.bindEvent( "change", function() use( dataobj, updateDataCb )
	{
		type = this.getChangeType();
		idx = this.getChangedIndex();
		if( type == "add" )
		{
			ctrl = UI_CreateStatic( FRAME.root )[]{ x = 10, y = 10, width = 100, height = 100, backgroundColor = UIColor(0.8,0.7,0.6), caption = "<untitled>" };
			UI_MakeResizable( ctrl, 4, 4, 4, 4 );
			ctrl.bindEvent( "oneditsize", updateDataCb );
			dataobj.insert( idx, ctrl );
			this.setItemAdded( ctrl );
		}
		else if( type == "remove" )
		{
			dataobj[ idx ].destroy(true);
			dataobj.erase( idx );
		}
		else
			this.applyChangeToObject( dataobj );
	});
}


//
// STACK EXAMPLE
// - tests built-in stack layout systems
//

function sgs_ui_example_stack()
{
	cont = UI_CreateStatic( FRAME.root )[]{ caption = "TestRoot", anchorMode = UI_Anchor_All };
	UI_CreateStatic( cont )[]{ caption = "bk_fl_1", q1x = 0.5, height = 200, marginV = 8, posMode = UI_Pos_SideA, backgroundColor = UIColor(0.5,0.4,0.3,1) };
	UI_CreateStatic( cont )[]{ caption = "bk_fl_2", q1x = 0.5, height = 200, marginV = 8, posMode = UI_Pos_SideA, backgroundColor = UIColor(0.6,0.5,0.4,1) };
	UI_CreateStatic( cont )[]{ caption = "bk_fx_1", width = 300, height = 200, margin = 8, posMode = UI_Pos_SideA, backgroundColor = UIColor(0.3,0.4,0.5,1) };
	UI_CreateStatic( cont )[]{ caption = "bk_fx_2", width = 300, height = 200, margin = 8, posMode = UI_Pos_SideA, backgroundColor = UIColor(0.4,0.5,0.6,1) };
	UI_CreateStatic( cont )[]{ caption = "bk_fx_3", width = 300, height = 200, margin = 8, posMode = UI_Pos_SideA, backgroundColor = UIColor(0.5,0.6,0.7,1) };
}


//
// CMPT EXAMPLE
// - tests component-based effects
//

function sgs_ui_example_cmpt()
{
	// HOVER ANIMATIONS
	cont = UI_CreateStatic( FRAME.root )[]{ caption = "TestRoot" };
	UI_CreateHoverAnimator( cont,
		{ x = 100, y = 100, width = 100, height = 100, backgroundColor = UIColor(0.3,0.4,0.5) },
		{ x = 50, y = 50, width = 200, height = 200, backgroundColor = UIColor(0.5,0.4,0.3) },
		0.4 );
	
	// SCROLLING / RESIZING
	cont1 = UI_CreateStatic( FRAME.root )[]{ x = 300, y = 50, width = 200, height = 200, backgroundColor = UIColor(0.3,0.02,0.01) };
	UI_MakeResizable( cont1, 4, 4, 4, 4 );
	cont2 = UI_CreateStatic( cont1 )[]{ caption = "TestRoot2", anchorMode = UI_Anchor_All, offsetLeft = 4, offsetTop = 4, offsetRight = 4, offsetBottom = 4 };
	UI_MakeScrollable( cont2 );
	UI_CreateStatic( cont2 )[]{ caption = "ScrollThis", width = 300, height = 300, posMode = UI_Pos_SideA };
	
	// GROUP BLOCK
	UI_BuildControls( FRAME.root,
	[
		{ type = "groupblock", x = 500, y = 100, width = 90, container =
		[
			{ type = "static", caption = "InGroup", posMode = UI_Pos_SideA, width = 80, height = 20, backgroundColor = UIColor(0.3,0.4,0.5) },
			{ type = "static", caption = "InGroup2", posMode = UI_Pos_SideA, width = 80, height = 20, backgroundColor = UIColor(0.4,0.5,0.3) },
		]}
	]);
	
	// GROUP BLOCK 2
	UI_BuildControls( FRAME.root,
	[
		{ type = "groupblock", x = 600, y = 100, width = 90, container =
		[
			{ type = "groupblock", width = 90, posMode = UI_Pos_SideA, container =
			[
				{ type = "static", caption = "InGroup", posMode = UI_Pos_SideA, width = 80, height = 20, backgroundColor = UIColor(0.3,0.4,0.5) },
			]},
			{ type = "static", caption = "InGroup2", posMode = UI_Pos_SideA, width = 80, height = 20, backgroundColor = UIColor(0.4,0.5,0.3) },
		]}
	]);
	
	// GROUP BLOCK 3
	UI_BuildControls( FRAME.root,
	[
		{ type = "groupblock", x = 700, y = 100, width = 90, container =
		[
			{ type = "groupblock", width = 90, posMode = UI_Pos_SideA, container =
			[
				{ type = "groupblock", width = 90, posMode = UI_Pos_SideA, container =
				[
					{ type = "static", caption = "InGroup", posMode = UI_Pos_SideA, width = 80, height = 20, backgroundColor = UIColor(0.3,0.4,0.5) },
				]},
				{ type = "static", caption = "InGroup2", posMode = UI_Pos_SideA, width = 80, height = 20, backgroundColor = UIColor(0.5,0.3,0.4) },
			]},
			{ type = "static", caption = "InGroup3", posMode = UI_Pos_SideA, width = 80, height = 20, backgroundColor = UIColor(0.4,0.5,0.3) },
		]}
	]);
	
	// GROUP BLOCK 4
	UI_BuildControls( FRAME.root,
	[
		{ type = "groupblock", x = 800, y = 100, width = 90, container =
		[
			{ type = "groupblock", width = 90, posMode = UI_Pos_SideA, container =
			[
				{ type = "static", caption = "InGroup", posMode = UI_Pos_SideA, width = 80, height = 20, backgroundColor = UIColor(0.3,0.4,0.5) },
			]},
			{ type = "groupblock", width = 90, posMode = UI_Pos_SideA, container =
			[
				{ type = "static", caption = "InGroup+", posMode = UI_Pos_SideA, width = 80, height = 20, backgroundColor = UIColor(0.5,0.3,0.4) },
			]},
			{ type = "static", caption = "InGroup2", posMode = UI_Pos_SideA, width = 80, height = 20, backgroundColor = UIColor(0.4,0.5,0.3) },
		]}
	]);
	
	// GROUP BLOCK 4
	UI_BuildControls( FRAME.root,
	[
		{ type = "groupblock", x = 900, y = 100, width = 90, container =
		[
			{ type = "groupblock", width = 90, posMode = UI_Pos_SideA, container =
			[
				{ type = "groupblock", width = 90, posMode = UI_Pos_SideA, container =
				[
					{ type = "static", caption = "InGroup", posMode = UI_Pos_SideA, width = 80, height = 20, backgroundColor = UIColor(0.3,0.4,0.5) },
				]},
				{ type = "groupblock", width = 90, posMode = UI_Pos_SideA, container =
				[
					{ type = "static", caption = "InGroup1", posMode = UI_Pos_SideA, width = 80, height = 20, backgroundColor = UIColor(0.3,0.4,0.5) },
				]},
				{ type = "static", caption = "InGroup2", posMode = UI_Pos_SideA, width = 80, height = 20, backgroundColor = UIColor(0.5,0.3,0.4) },
			]},
			{ type = "groupblock", width = 90, posMode = UI_Pos_SideA, container =
			[
				{ type = "groupblock", width = 90, posMode = UI_Pos_SideA, container =
				[
					{ type = "static", caption = "InGroup+", posMode = UI_Pos_SideA, width = 80, height = 20, backgroundColor = UIColor(0.3,0.4,0.5) },
				]},
				{ type = "groupblock", width = 90, posMode = UI_Pos_SideA, container =
				[
					{ type = "static", caption = "InGroup1+", posMode = UI_Pos_SideA, width = 80, height = 20, backgroundColor = UIColor(0.3,0.4,0.5) },
				]},
				{ type = "static", caption = "InGroup2+", posMode = UI_Pos_SideA, width = 80, height = 20, backgroundColor = UIColor(0.5,0.3,0.4) },
			]},
			{ type = "static", caption = "InGroup3", posMode = UI_Pos_SideA, width = 80, height = 20, backgroundColor = UIColor(0.4,0.5,0.3) },
		]}
	]);
	
	// STACKING
	UI_BuildControls( FRAME.root,
	[
		{ type = "control", class = "PARENT", x = 100, y = 300, width = 100, stackMode = UI_Stack_AutoSizeTop, children =
		[
			{ type = "static", class = "CTRL 1", width = 100, height = 30, caption = "Change", posMode = UI_Pos_SideA },
			{ type = "static", class = "CTRL 2", width = 100, height = 30, caption = "Follow", posMode = UI_Pos_SideA },
		]},
	]);
	
	// SCROLLING + GROUP BLOCK
	UI_BuildControls( FRAME.root,
	[
		{ type = "static", x = 300, y = 300, width = 100, height = 100, backgroundColor = UIColor(0.3,0.02,0.01), contents = function( ctrl )
		{
			UI_MakeResizable( ctrl, 4, 4, 4, 4 );
		},
		children =
		[
			{ type = "static", caption = "TestRoot2", anchorMode = UI_Anchor_All, offsetLeft = 4, offsetTop = 4, offsetRight = 4, offsetBottom = 4, contents = function( ctrl )
			{
				UI_MakeScrollable( ctrl, "auto", false );
			},
			children =
			[
				{ type = "groupblock", width = 90, posMode = UI_Pos_SideA, container =
				[
					{ type = "static", caption = "InGroup", posMode = UI_Pos_SideA, width = 80, height = 20, backgroundColor = UIColor(0.3,0.4,0.5) },
					{ type = "static", caption = "InGroup2", posMode = UI_Pos_SideA, width = 80, height = 20, backgroundColor = UIColor(0.4,0.5,0.3) },
				]}
			]},
		]}
	]);
	
	// SCROLLING + GROUP BLOCK WITHIN
	UI_BuildControls( FRAME.root,
	[
		{ type = "static", x = 500, y = 300, width = 100, height = 100, backgroundColor = UIColor(0.3,0.02,0.01), contents = function( ctrl )
		{
			UI_MakeResizable( ctrl, 4, 4, 4, 4 );
		},
		children =
		[
			{ type = "static", caption = "TestRoot2", anchorMode = UI_Anchor_All, offsetLeft = 4, offsetTop = 4, offsetRight = 4, offsetBottom = 4, contents = function( ctrl )
			{
				UI_MakeScrollable( ctrl, "auto", false );
			},
			children =
			[
				{ type = "groupblock", width = 90, posMode = UI_Pos_SideA, container =
				[
					{ type = "groupblock", width = 90, posMode = UI_Pos_SideA, container =
					[
						{ type = "static", caption = "InGroup", posMode = UI_Pos_SideA, width = 40, height = 20, backgroundColor = UIColor(0.3,0.4,0.5) },
						{ type = "static", caption = "InGroup", posMode = UI_Pos_SideA, width = 40, height = 20, backgroundColor = UIColor(0.3,0.4,0.5) },
						{ type = "static", caption = "InGroup", posMode = UI_Pos_SideA, width = 40, height = 20, backgroundColor = UIColor(0.3,0.4,0.5) },
					]},
					{ type = "static", caption = "InGroup2", posMode = UI_Pos_SideA, width = 40, height = 20, backgroundColor = UIColor(0.4,0.5,0.3) },
					{ type = "static", caption = "InGroup2", posMode = UI_Pos_SideA, width = 40, height = 20, backgroundColor = UIColor(0.4,0.5,0.3) },
					{ type = "static", caption = "InGroup2", posMode = UI_Pos_SideA, width = 40, height = 20, backgroundColor = UIColor(0.4,0.5,0.3) },
				]},
				{ type = "static", caption = "InGroup3", posMode = UI_Pos_SideA, width = 40, height = 20, backgroundColor = UIColor(0.5,0.3,0.4) },
				{ type = "static", caption = "InGroup3", posMode = UI_Pos_SideA, width = 40, height = 20, backgroundColor = UIColor(0.5,0.3,0.4) },
				{ type = "static", caption = "InGroup3", posMode = UI_Pos_SideA, width = 40, height = 20, backgroundColor = UIColor(0.5,0.3,0.4) },
			]},
		]}
	]);
}

