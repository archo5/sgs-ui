
//
// DEFAULT EXAMPLE
// - all kinds of stuff
//

function sgs_ui_example_default()
{
	/* MENUS */
	sub3menu =
	[
		{ text = "Third Submenu", disabled = true },
		{ disabled = true },
		{ text = "One option", disabled = true },
		{ text = "..or two!", func = function(){ println("TWOOOOOOOOOOO"); } },
	];
	
	submenu =
	[
		{ text = "One option", disabled = true },
		{ disabled = true },
		{ text = "..or two!" },
		{ text = "3", menu = sub3menu },
	];
	
	menu1_items =
	[
		{ text = "Test 1", func = function(){ println("Test 1 - function"); } },
		{ text = "Some option", checked = false },
		{ text = "Some checked option", checked = true },
		{ text = "Submenu?", menu = submenu },
		{ disabled = true },
		{ text = "Disabled", disabled = true },
		{ text = "Exiquit", func = function(){ global sys_exit = true; } },
	];
	
	global FRAME;
	
	global FORM = UI_CreateForm( FRAME.root );
//	FORM.bindEvent( "change", function(){ println("form changed."); } );
	
	function formdump()
	{
		printvar( FORM.getData() );
	}
	
	global STATCORE = UI_CreateStatic( FORM, 10, 10, -20, -20 );
	STATCORE.q1x = 1;
	STATCORE.q1y = 1;
	mpitems =
	[
		{ text = "File", func = formdump },
		{ text = "Edit", menu = submenu },
		{ text = "Disabled", disabled = true },
		{ text = "Help", menu = sub3menu },
	];
	global STAT = UI_CreateMenuPanel( STATCORE, mpitems );
	
	global TOPBAR = UI_CreateStatic( STAT, 0, 0, 0, 24, "" );
	TOPBAR.backgroundColor = UIColor( 0.8, 1 );
	TOPBAR.q1x = 1;
	
	UI_CreateButton( TOPBAR, 0, 0, 24, 24, "", "icons/page.png" );
	UI_CreateButton( TOPBAR, 24, 0, 24, 24, "", "icons/disk.png" );
	UI_CreateButton( TOPBAR, 48, 0, 24, 24, "", "icons/disk_multiple.png" );
	
	global BTN = UI_CreateButton( STAT, 100, 100, 100, 30, "Action", "icons/disk.png" );
	BTN.bindEvent( "click", function() use( menu1_items )
	{
		UI_BuildMenu( this.frame.root, this.rx0, this.ry1, menu1_items );
	});
	
	tbKey = UI_CreateTextbox( STAT, 100, 50, 100, "key", "Key" );
	tbKey.bindEvent( "change", function(){ println( "Updated key: " $ this.data.text ); } );
	tbVal = UI_CreateTextbox( STAT, 220, 50, 100, "value", "Value" );
	tbVal.bindEvent( "commit", function(){ println( "Committed value: " $ this.data.text ); } );
	
	UI_CreateCheckbox( STAT, 340, 50, 24, 24, "cbox", "set" );
	UI_CreateRadioButton( STAT, 364, 50, 24, 24, "rbtn", "A" );
	UI_CreateRadioButton( STAT, 388, 50, 24, 24, "rbtn", "B" );
	
	UI_CreateVScroll( STAT, 400, 100, 16, 300, 1000, 300, 37 ).bindEvent( "change", function(){ println( "Scrolled to: " $ this.data.position ); } );
	UI_CreateHScroll( STAT, 100, 400, 300, 16, 1000, 300, 137 ).bindEvent( "change", function(){ println( "Scrolled to: " $ this.data.position ); } );
	
	SCROLL = UI_CreateScrollable( STAT, 500, 100, 200, 300 );
	text = string_replace( io_file_read( "../examples/sgs-sdl.sgs" ), ["\r\n","\r","\t"], ["\n","\n","    "] );
	text = string_part( text, 0, 1024 );
	UI_CreateStatic( SCROLL, 0, 0, 20, 500, text, DT_LEFT | DT_TOP )[]{ q1x = 1, backgroundColor = UIColor( 0.9, 1 ) };
	
	SELECT = UI_CreateSelectBox( STAT, 500, 50, 180, 24, "sBoX",
		[
			{ text = "Primary choice", value = "1" },
			{ text = "Situation", value = "sit" },
			{ text = "Something else", value = "other" },
		]
	);
	
	AUTOLAYOUT = UI_CreateAutoLayout( STAT, 840, 30, 100 );
	UI_CreateButton( AUTOLAYOUT, 0, 0, 32, 32, "", "icons/page.png" );
	BUTTON = UI_CreateButton( AUTOLAYOUT, 0, 0, null, 32, "", "icons/disk.png" );
	UI_CreateButton( AUTOLAYOUT, 0, 0, 32, 32, "", "icons/disk_multiple.png" );
	BUTTON.name = "hovertest";
	FRAME.addStyleSheet( UI_CreateStyleSheet()
		.addRule( UI_CreateStyleRule()[]{ style = UI_CreateStyle()[]{ width = 32 } }.addSelector( "@hovertest" ) )
		.addRule( UI_CreateStyleRule()[]{ style = UI_CreateStyle()[]{ width = 42 } }.addSelector( "@hovertest:hover" ) ) );
	
	UI_CreateSlider( STAT, 800, 100, 150, 20, "sldr1", 0, 1, 0, false );
	UI_CreateSlider( STAT, 800, 140, 150, 20, "sldr2", 0, 5-1, 1, false );
	UI_CreateSlider( STAT, 720, 40, 30, 120, "sldr3", 0, 1, 0, true );
	UI_CreateSlider( STAT, 760, 40, 30, 120, "sldr4", 0, 8-1, 1, true );
	
	global PGRID;
	PGRID_data =
	{
		boolean1 = true,
		boolean2 = false,
		value1 = 35,
		"text ctl" = "Text Here !",
		"Dump ALL" = function(){ printvar( PGRID.getData() ); },
	};
	PGRID_options =
	{
		value1 = { type = "slider", min = 0, max = 50, stopsize = 5 },
	};
	PGRID = UI_CreatePropertyGrid( STAT, 720, 180, 200, 300, PGRID_data, PGRID_options );
	
	
	WINDOW = UI_CreateWindow( FRAME.root, 300, 300, 200, 150, "Info window", true );
	WINDOW.minWidth = 100;
	WINDOW.minHeight = 80;
	
	WINSTAT = UI_CreateStatic( WINDOW, 0, 0, 0, 32, "The Options", DT_CENTER | DT_VCENTER );
	WINSTAT.backgroundColor = UIColor( 0.9, 1 );
	WINSTAT.setAnchorMode( UI_Anchor_Hor | UI_Anchor_Top );
	
	LBMENU = UI_CreateListBoxMenu( WINDOW, 0, 32, 0, -32 );
	LBMENU.setAnchorMode( UI_Anchor_All );
	
	LBMENU.addOption({ text = "Test option 1" });
	LBMENU.addOption({ text = "Test/2", icon = "icons/book.png" });
	
	WINIMAGE = UI_CreateImage( WINSTAT, 0, 0, 0, 0, "icons/add.png", UI_ImageScale_None );
	WINIMAGE.setAnchorMode( UI_Anchor_Left | UI_Anchor_Vert );
	WINIMAGE.q1x = 0.2;
	WINIMAGE.index = 10;
	WINIMAGE2 = UI_CreateImage( WINSTAT, 0, 0, 0, 0, "icons/delete.png", UI_ImageScale_None );
	WINIMAGE2.setAnchorMode( UI_Anchor_Right | UI_Anchor_Vert );
	WINIMAGE2.q0x = 0.8;
	WINIMAGE2.index = 10;
}


//
// MENU EXAMPLE
// - displays a fancy menu
//

function sgs_ui_example_menu()
{
	//
	// STYLES
	//
	function MenuButton_Render()
	{
		if( this.rx0 == this.rx1 || this.ry0 == this.ry1 )
			return;
		
		theme = this.frame.theme;
		button_render_contents = theme.button_render_contents;
		
		alpha = if( this.clicked, 0.4, if( this.mouseOn, 0.2, 0.1 ) );
		SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.ry1-1, 0, 0, 0, alpha );
		SS_DrawColorRect( this.rx0, this.ry1-1, this.rx1, this.ry1, 0, 0, 0, alpha+0.1 );
		
		this!button_render_contents();
	}
	
	FRAME.addStyleSheet(UI_BuildStyleSheet({
		"*button" = { renderfunc = MenuButton_Render },
		"**" = { font = "fonts/armata-regular.ttf", fontSize = 16 },
		"*scrollingautolayout button static" = { font = "fonts/lato-regular.ttf", fontSize = 12, paddingLeft = 72 },
		// main menu
		".main-menu-frame" = { anchorMode = UI_Anchor_All, renderfunc = function MAIN_MENU_Renderfunc(){ SS_DrawColor2VRect( this.rx0, this.ry0, this.rx1, this.ry1, 0.5, 0.5, 0.5, 1, 0.2, 0.2, 0.2, 1 ); } },
		".main-menu-frame .title" = { backgroundColor = UIColor( 0 ), anchorMode = UI_Anchor_Hor, font = "fonts/gauge-oblique.ttf", fontSize = 48, textColor = UIColor(0.3,0.7,0.9,1), q0y = 0, q1y = 0.5 },
		".main-menu" = { q0x = 0.4, q0y = 0.5, q1x = 0.6, q1y = 1.0, overflow = true },
		".main-menu button" = { height = 36, anchorMode = UI_Anchor_Hor },
		".main-menu button image" = { width = 36, anchorMode = UI_Anchor_Vert },
		// question window
		".qwindowbgr" = { backgroundColor = UIColor(0.5,0.5), anchorMode = UI_Anchor_All },
		".qwindow" = { backgroundColor = UIColor(0,0.5), q0x = 0.3, q0y = 0.3, q1x = 0.7, q1y = 0.7 },
		".qwindow .title" = { backgroundColor = UIColor(0.3,0.02,0.01,0.5), textColor = UIColor(0.9,1), q0x = 0, q0y = 0, q1x = 1, q1y = 0.3 },
		".qwindow .btn-yes" = { q0x = 0.1, q0y = 0.6, q1x = 0.4, q1y = 0.9 },
		".qwindow .btn-no" = { q0x = 0.6, q0y = 0.6, q1x = 0.9, q1y = 0.9 },
		// screen
		".screen-panel" = { backgroundColor = UIColor( 0, 0.2 ), q0x = 1.22, q0y = 0.22, q1x = 1.98, q1y = 0.98 },
		".screen-panel .title" = { q0x = 0, q0y = 0, q1x = 1, q1y = 0.1, backgroundColor = UIColor( 0.3, 0.02, 0.01, 0.5 ), textColor = UIColor( 0.9, 1 ) },
		".screen-panel .btn-back" = { q0x = 0.05, q0y = 0.85, q1x = 0.2, q1y = 0.95 },
	}));
	UI_EasingFunctions.smooth_fast_start = function( a, b, t ){ return UI_EasingFunctions.smooth( a, b, sqrt( t ) ); };
	
	//
	// COMMON CONTROLS
	//
	function CreateYesNoQuestionWindow( question, callback )
	{
		bgr = UI_CreateStatic( FRAME.root, 0, 0, 0, 0, "" );
		bgr.addClass( "qwindowbgr" );
		
		window = UI_CreateStatic( bgr, 0, 0, 0, 0, "" );
		window.addClass( "qwindow" );
		
		title = UI_CreateStatic( window, 0, 0, 0, 0, question );
		title.addClass( "title" );
		
		btn_yes = UI_CreateButton( window, 0, 0, 0, 0, "Yes" );
		btn_yes.addClass( "btn-yes" );
		btn_yes.bindEvent( "click", function() use( callback, bgr ){ callback( 1 ); bgr.parent.removeChild( bgr ); } );
		
		btn_no = UI_CreateButton( window, 0, 0, 0, 0, "No" );
		btn_no.addClass( "btn-no" );
		btn_no.bindEvent( "click", function() use( callback, bgr ){ callback( 0 ); bgr.parent.removeChild( bgr ); } );
		
		// background fade in
		tgtbgcol = bgr.backgroundColor;
		bgr.backgroundColor = UIColor(0);
		bgr.animate( { backgroundColor = tgtbgcol }, 0.4 );
		// window: zoom in --> title: slide in from top
		tgtq0x = window.q0x; tgtq0y = window.q0y; tgtq1x = window.q1x; tgtq1y = window.q1y;
		window[]{ q0x = 0.5, q1x = 0.5, q0y = 0.5, q1y = 0.5 };
		titleq0y = title.q0y;
		titleq1y = title.q1y;
		diff = titleq1y - titleq0y;
		title[]{ q0y = titleq0y - diff, q1y = titleq1y - diff };
		window.animate( { q0x = tgtq0x, q0y = tgtq0y, q1x = tgtq1x, q1y = tgtq1y }, 0.2, null, function() use( title, titleq0y, titleq1y )
		{
			title.animate( { q0y = titleq0y, q1y = titleq1y }, 0.2 );
		});
	}
	
	//
	// MAIN MENU
	//
	MAIN_MENU = UI_CreateStatic( FRAME.root, 0, 0, 0, 0 );
	MAIN_MENU.addClass( "main-menu-frame" );
	
	// Title
	mm_title = UI_CreateStatic( MAIN_MENU, 0, 0, 0, 0, "Example Menu" );
	mm_title.addClass( "title" );
	
	// Menu
	mm_menu = UI_CreateAutoLayout( MAIN_MENU, 0, 0, 0 );
	mm_menu.addClass( "main-menu" );
	
	// Menu animations
	function main_menu_shrink() use( mm_title, mm_menu )
	{
		mm_title.animate({ q1y = 0.2, textColor = UIColor( 0.3, 0.7, 0.9, 0.5 ) }, 0.5 );
		mm_menu.animate({ q0x = 0.05, q1x = 0.2 }, 0.5 );
	}
	function main_menu_grow() use( mm_title, mm_menu )
	{
		mm_title.animate({ q1y = 0.5, textColor = UIColor( 0.3, 0.7, 0.9, 1 ) }, 0.5 );
		mm_menu.animate({ q0x = 0.4, q1x = 0.6 }, 0.5 );
	}
	
	mm_btn_start = UI_CreateButton( mm_menu, 0, 0, null, 36, "Start" );
	UI_CreateImage( mm_btn_start, 0, 0, 36, 0, "icons/control_play.png" ).setAnchorMode( UI_Anchor_Vert );
	
	mm_btn_info = UI_CreateButton( mm_menu, 0, 0, null, 36, "Info" );
	UI_CreateImage( mm_btn_info, 0, 0, 36, 0, "icons/information.png" ).setAnchorMode( UI_Anchor_Vert );
	
	mm_btn_options = UI_CreateButton( mm_menu, 0, 0, null, 36, "Options" );
	UI_CreateImage( mm_btn_options, 0, 0, 36, 0, "icons/cog.png" ).setAnchorMode( UI_Anchor_Vert );
	
	mm_btn_quit = UI_CreateButton( mm_menu, 0, 0, null, 36, "Quit" );
	UI_CreateImage( mm_btn_quit, 0, 0, 36, 0, "icons/stop.png" ).setAnchorMode( UI_Anchor_Vert );
	
	foreach( ctrl : mm_menu.children() )
	{
		ctrl.setAnchorMode( UI_Anchor_Hor );
	}
	
	// PREVIEW OF COMING ATTRACTIONS
	UI_BuildControls
	( FRAME.root,
	[
		{ type = "static", class = "main-menu-frame", children =
		[
			{ type = "static", class = "title", caption = "Example Menu" },
			{ type = "autolayout", class = "main-menu", children =
			[
				{ type = "imagebutton", name = "start", caption = "Start", image = "icons/control_play.png", class = "act-close-info act-close-options act-open-start act-menu-shrink" },
				{ type = "imagebutton", name = "info", caption = "Info", image = "icons/information.png", class = "act-close-start act-close-options act-open-info act-menu-shrink" },
				{ type = "imagebutton", name = "options", caption = "Options", image = "icons/cog.png", class = "act-close-start act-close-info act-open-options act-menu-shrink" },
				{ type = "imagebutton", name = "quit", caption = "Quit", image = "icons/stop.png", class = "act-ask-quit" },
			]},
		]},
	]);
	function main_menu_shrink()
	{
		FRAME.find(".main-menu-frame .title").animate({ q1y = 0.2, textColor = UIColor( 0.3, 0.7, 0.9, 0.5 ) }, 0.5 );
		FRAME.find(".main-menu-frame .main-menu").animate({ q0x = 0.05, q1x = 0.2 }, 0.5 );
	}
	function main_menu_grow()
	{
		FRAME.find(".main-menu-frame .title").animate({ q1y = 0.5, textColor = UIColor( 0.3, 0.7, 0.9, 1 ) }, 0.5 );
		FRAME.find(".main-menu-frame .main-menu").animate({ q0x = 0.4, q1x = 0.6 }, 0.5 );
	}
	FRAME.find( ".act-menu-shrink" ).bindEvent( "click", main_menu_shrink );
	FRAME.find( ".act-menu-grow" ).bindEvent( "click", main_menu_grow );
	FRAME.find( ".act-ask-quit" ).bindEvent( "click", function() use( CreateYesNoQuestionWindow ){
		CreateYesNoQuestionWindow( "Do you really want to quit?",
			function( result )
			{
				if( result )
					global sys_exit = true;
			}
		);
	} );
	
	//
	// START SCREEN
	//
	START_SCREEN = UI_CreateStatic( FRAME.root, 0, 0, 0, 0, "" );
	START_SCREEN.addClass( "screen-panel" );
	function start_screen_enter() use( START_SCREEN, mm_btn_start )
	{
		START_SCREEN.animate({ q0x = 0.22, q1x = 0.98 }, 0.5 );
		mm_btn_start.animate({ height = 64, q1x = 1.1 }, 0.5, "smooth_fast_start" );
	}
	function start_screen_exit() use( START_SCREEN, mm_btn_start )
	{
		START_SCREEN.animate({ q0x = 1.22, q1x = 1.98 }, 0.5 );
		mm_btn_start.animate({ height = 36, q1x = 1 }, 0.5, "smooth_fast_start" );
	}
	
	ss_stat_title = UI_CreateStatic( START_SCREEN, 0, 0, 0, 0, "Level selection" );
	ss_stat_title.addClass( "title" );
	
	ss_btn_back = UI_CreateButton( START_SCREEN, 0, 0, 0, 0, "Back" );
	ss_btn_back.addClass( "btn-back" );
	UI_CreateImage( ss_btn_back, 0, 0, 0, 0, "icons/resultset_previous.png" ).setAnchorRect( 0, 0, 0.3, 1 );
	
	ss_cont = UI_CreateScrollingAutoLayout( START_SCREEN, 0, 0, 0, 0 );
	ss_cont.setAnchorRect( 0.05, 0.15, 0.45, 0.8 );
	ss_cont_in = ss_cont.getContainer();
	function AddLevel( info ) use( ss_cont_in )
	{
		item = UI_CreateButton( ss_cont_in, 0, 0, 0, 48, "" );
		item.setAnchorMode( UI_Anchor_Hor );
		item.data.info = info;
		lbl = UI_CreateStatic( item, 0, 0, 0, 48, info.name, DT_LEFT | DT_VCENTER );
		lbl.setAnchorMode( UI_Anchor_Hor );
		lbl.backgroundColor = UIColor( 0 );
		img = UI_CreateImage( item, 0, 0, 64, 48, info.image, UI_ImageScale_Crop );
		return item;
	}
	AddLevel({ name = "The Picture", image = "icons/picture.png" });
	AddLevel({ name = "The Report", image = "icons/report.png" });
	
	//
	// INFO SCREEN
	//
	INFO_SCREEN = UI_CreateStatic( FRAME.root, 0, 0, 0, 0, "" );
	INFO_SCREEN.addClass( "screen-panel" );
	function info_screen_enter() use( INFO_SCREEN, mm_btn_info )
	{
		INFO_SCREEN.animate({ q0x = 0.22, q1x = 0.98 }, 0.5 );
		mm_btn_info.animate({ height = 64, q1x = 1.1 }, 0.5, "smooth_fast_start" );
	}
	function info_screen_exit() use( INFO_SCREEN, mm_btn_info )
	{
		INFO_SCREEN.animate({ q0x = 1.22, q1x = 1.98 }, 0.5 );
		mm_btn_info.animate({ height = 36, q1x = 1 }, 0.5, "smooth_fast_start" );
	}
	
	is_stat_title = UI_CreateStatic( INFO_SCREEN, 0, 0, 0, 0, "Info // TODO: HTML-like content here" );
	is_stat_title.addClass( "title" );
	
	is_btn_back = UI_CreateButton( INFO_SCREEN, 0, 0, 0, 0, "Back" );
	is_btn_back.addClass( "btn-back" );
	UI_CreateImage( is_btn_back, 0, 0, 0, 0, "icons/resultset_previous.png" ).setAnchorRect( 0, 0, 0.3, 1 );
	
	//
	// EVENTS
	//
	mm_btn_start.bindEvent( "click", main_menu_shrink );
	mm_btn_start.bindEvent( "click", start_screen_enter );
	mm_btn_start.bindEvent( "click", info_screen_exit );
	mm_btn_info.bindEvent( "click", main_menu_shrink );
	mm_btn_info.bindEvent( "click", start_screen_exit );
	mm_btn_info.bindEvent( "click", info_screen_enter );
	mm_btn_quit.bindEvent( "click", function() use( CreateYesNoQuestionWindow ){
		CreateYesNoQuestionWindow( "Do you really want to quit?",
			function( result )
			{
				if( result )
					global sys_exit = true;
			}
		);
	} );
	
	ss_btn_back.bindEvent( "click", main_menu_grow );
	ss_btn_back.bindEvent( "click", start_screen_exit );
	ss_btn_back.bindEvent( "click", info_screen_exit );
	is_btn_back.bindEvent( "click", main_menu_grow );
	is_btn_back.bindEvent( "click", start_screen_exit );
	is_btn_back.bindEvent( "click", info_screen_exit );
}


//
// SELECTORS EXAMPLE
// - tests classes and selectors
//

function sgs_ui_example_selectors()
{
	stylesheet = UI_CreateStyleSheet();
	stylerule = UI_CreateStyleRule();
	style = UI_CreateStyle();
	style.cursor = UI_Cursor_No;
	stylerule.style = style;
	print "Basic type selector: "; printvar( stylerule.addSelector( "button" ) );
	print "+Class type selector: "; printvar( stylerule.addSelector( "button.red" ) );
	print "Class type selector: "; printvar( stylerule.addSelector( ".red" ) );
	print "Sequenced type selector: "; printvar( stylerule.addSelector( "autolayout button" ) );
	print "Strict sequenced type selector: "; printvar( stylerule.addSelector( "autolayout > button" ) );
	print "Complex multiselector: "; printvar( stylerule.addSelector( "button.red.^re.$ed.~e@submit@^sub@$mit@~bmi" ) );
	stylerule.style = style;
	stylesheet.addRule( stylerule );
	
	button = UI_CreateButton( FRAME.root, 100, 100, 200, 20, "Test" );
	button.addClass( "red" );
	button.name = "submit";
	print "Verify that classes are set: "; printvar( button.class );
	
	stylerule = UI_CreateStyleRule();
	stylerule.addSelector( "button.red.^re.$ed.~e@submit@^sub@$mit@~bmi" );
	print "Match compatible button against complex multiselector: "; printvar( stylerule.checkMatch( button ) );
	
	stylerule = UI_CreateStyleRule();
	stylerule.addSelector( "root button.red.^re.$ed.~e@submit@^sub@$mit@~bmi" );
	print "Match compatible button against complex multiselector 2: "; printvar( stylerule.checkMatch( button ) );
	
	stylerule = UI_CreateStyleRule();
	stylerule.addSelector( "root > button.red.^re.$ed.~e@submit@^sub@$mit@~bmi" );
	print "Match compatible button against complex multiselector 3: "; printvar( stylerule.checkMatch( button ) );
}

