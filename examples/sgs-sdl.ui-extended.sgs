

global UI_ScrollingAutoLayout = {};

function UI_ScrollingAutoLayout.getContainer()
{
	return this.data.OpCont;
}

function UI_CreateScrollingAutoLayout( parent, x, y, width, height )
{
	ScrollingAutoLayout = parent.frame.createControl( "scrollingautolayout" );
	ScrollingAutoLayout.x = x;
	ScrollingAutoLayout.y = y;
	ScrollingAutoLayout.width = width;
	ScrollingAutoLayout.height = height;
	ScrollingAutoLayout._interface = UI_ScrollingAutoLayout;
	ScrollingAutoLayout.data =
	{
		options = [],
	};
	
	Scrollable = UI_CreateScrollable( ScrollingAutoLayout, 0, 0, 0, 0, "auto", false );
	Scrollable.q1x = 1;
	Scrollable.q1y = 1;
	ScrollingAutoLayout.data.Scrollable = Scrollable;
	
	AutoLayout = UI_CreateAutoLayout( Scrollable, 0, 0, 100 );
	AutoLayout.q1x = 1;
	ScrollingAutoLayout.data.AutoLayout = AutoLayout;
	ScrollingAutoLayout.data.OpCont = AutoLayout;
	
	parent.addChild( ScrollingAutoLayout );
	
	return ScrollingAutoLayout;
}


global UI_ListBoxMenu = {};

function UI_ListBoxMenu._optionRenderFunc()
{
	if( this.rx0 >= this.rx1 || this.ry0 >= this.ry1 )
		return;
	
	data = this.data;
	icon = @data.icon;
	text = this.caption;
	
	caddt = if( this.clicked, 0.02, if( this.mouseOn, -0.05, 0.0 ) );
	caddb = if( this.clicked, 0.09, if( this.mouseOn, 0.05, 0.0 ) );
	SS_DrawColor2VRect( this.rx0, this.ry0, this.rx1, this.ry1, 0.4-caddt, 0.6-caddt, 0.8-caddt, 1, 0.4+caddb, 0.5+caddb, 0.6+caddb, 1 );
//		SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.ry1, 0.7+cadd, 0.8+cadd, 0.9+cadd, 1 );
//		SS_DrawColorRect( this.rx0+1, this.ry0+1, this.rx1-1, this.ry1-1, 0.3+cadd, 0.5+cadd, 0.7+cadd, 1 );
	
	if( this.frame.pushScissorRect( this.rx0 + 2, this.ry0 + 2, this.rx1 - 2, this.ry1 - 2 ) )
	{
		cy = round( ( this.ry1 + this.ry0 ) * 0.5 );
		if( icon )
		{
			SS_Draw({ preset = "box", position = vec2( this.rx1 - round( 4 + icon.width / 2 ), cy ), scale = vec2( icon.width, icon.height ), texture = icon });
		}
		
		if( text )
		{
			SS_DrawTextLine_VC( text, Font, this.rx0 + 4, cy, color(1,1,1,1) );
		}
		
		this.frame.popScissorRect();
	}
}

function UI_ListBoxMenu.addOption( option )
{
	data = this.data;
	data.options.push( option );
	
	ListBoxItem = UI_CreateButton( data.OpCont, 0, 0, 0, 24, option.text, @option.icon );
	ListBoxItem.q1x = 1;
	ListBoxItem.renderfunc = UI_ListBoxMenu._optionRenderFunc;
}

function UI_CreateListBoxMenu( parent, x, y, width, height )
{
	ListBoxMenu = parent.frame.createControl( "listboxmenu" );
	ListBoxMenu.x = x;
	ListBoxMenu.y = y;
	ListBoxMenu.width = width;
	ListBoxMenu.height = height;
	ListBoxMenu._interface = UI_ListBoxMenu;
	ListBoxMenu.data =
	{
		options = [],
	};
	
	Scrollable = UI_CreateScrollable( ListBoxMenu, 0, 0, 0, 0, "auto", false );
	Scrollable.q1x = 1;
	Scrollable.q1y = 1;
	ListBoxMenu.data.Scrollable = Scrollable;
	
	AutoLayout = UI_CreateAutoLayout( Scrollable, 0, 0, 100 );
	AutoLayout.q1x = 1;
	ListBoxMenu.data.AutoLayout = AutoLayout;
	ListBoxMenu.data.OpCont = AutoLayout;
	
	parent.addChild( ListBoxMenu );
	
	return ListBoxMenu;
}


global UI_PropertyGrid = {};

function UI_PropertyGrid._create_label( text )
{
	data = this.data;
	ctrl = UI_CreateStatic( data.OpCont, 0, 0, data.label_width_min, data.label_height, text, color(0,0.1), DT_LEFT | DT_VCENTER );
	ctrl.minWidth = data.label_width_min;
	ctrl.maxWidth = data.label_width_max;
	ctrl.q1x = data.label_width_percent;
	return ctrl;
}

function UI_PropertyGrid._createDefaultLabel( name, option )
{
	return this._create_label( @option.label || name );
}

function UI_PropertyGrid._create_checkbox( name, value, option )
{
	this._createDefaultLabel( name, option );
	
	data = this.data;
	ctrl = UI_CreateCheckbox( data.OpCont, 0, 0, data.value_height, data.value_height, name, null, !!value );
	return ctrl;
}

function UI_PropertyGrid._create_slider( name, value, option )
{
	this._createDefaultLabel( name, option );
	
	data = this.data;
	ctrl = UI_CreateSlider( data.OpCont, 0, 0, data.value_width_min, data.value_height, name, @option.min, @option.max, @option.stopsize );
	ctrl.setValue( value );
	ctrl.minWidth = data.value_width_min;
	ctrl.maxWidth = data.value_width_max;
	ctrl.q1x = data.value_width_percent;
	return ctrl;
}

function UI_PropertyGrid._create_textbox( name, value, option )
{
	this._createDefaultLabel( name, option );
	
	data = this.data;
	ctrl = UI_CreateTextbox( data.OpCont, 0, 0, data.value_width_min, name, @option.textbox_caption, value );
	ctrl.minWidth = data.value_width_min;
	ctrl.maxWidth = data.value_width_max;
	ctrl.q1x = data.value_width_percent;
	return ctrl;
}

function UI_PropertyGrid._create_button( name, value, option )
{
	data = this.data;
	ctrl = UI_CreateButton( data.OpCont, 0, 0, 0, data.value_height, @option.label || name, @option.icon );
	ctrl.bindEvent( "click", value );
	ctrl.q1x = 1;
	return ctrl;
}

function UI_PropertyGrid.getType( value, option )
{
	if( @option.type )
		return option.type;
	if( typeid( value ) == VT_BOOL ) return "checkbox", toint;
	if( is_callable( value ) ) return "button", null;
	return "textbox", tostring;
}

function UI_PropertyGrid.setData( input_values, options )
{
	data = this.data;
	all_values = {};
	options ||= {};
	data.options = options;
	foreach( k, v : input_values )
	{
		if( is_callable( v ) )
			continue;
		all_values[ k ] = v;
		if( !isset( options, k ) )
			options[ k ] = {};
		option = options[ k ];
		if( !isset( option, "convert" ) )
		{
			(type,convfunc) = this.getType( v, option );
			option.convert = convfunc;
		}
	}
	data.values = all_values;
	
	// Rebuild options
	data.OpCont.removeAllChildren();
	foreach( k, v : input_values )
	{
		option = @options[ k ];
		type = this.getType( v, option );
		this.("_create_"$type)( k, v, option );
	}
}

function UI_PropertyGrid._updateData()
{
	data = this.data;
	form = data.Form;
	foreach( k, : data.values )
	{
		fditem = form.getString( k );
		if( fditem !== null )
		{
			option = @data.options.(k);
			if( @option.convert )
				fditem = option.convert( fditem );
			data.values[ k ] = fditem;
		}
	}
}

function UI_PropertyGrid.getData()
{
	return this.data.values;
}

function UI_PropertyGrid.getValueOf( name )
{
	return @this.data.values[ name ];
}

function UI_CreatePropertyGrid( parent, x, y, width, height, seed, options )
{
	PropertyGrid = parent.frame.createControl( "propertygrid" );
	PropertyGrid.x = x;
	PropertyGrid.y = y;
	PropertyGrid.width = width;
	PropertyGrid.height = height;
	PropertyGrid._interface = UI_PropertyGrid;
	PropertyGrid.data =
	{
		label_width_min = 0,
		label_width_max = UI_MaxValue,
		label_width_percent = 0.5,
		label_height = 24,
		value_width_min = 0,
		value_width_max = UI_MaxValue,
		value_width_percent = 0.5,
		value_height = 24,
		
		values = {},
		options = {},
	};
	
	Form = UI_CreateForm( PropertyGrid );
	PropertyGrid.data.Form = Form;
	Form.bindEvent( "change", function( e ){ this.parent._updateData(); this.parent.callEvent( "change", e ); } );
	
	Scrollable = UI_CreateScrollable( Form, 0, 0, 0, 0, "auto", false );
	Scrollable.q1x = 1;
	Scrollable.q1y = 1;
	PropertyGrid.data.Scrollable = Scrollable;
	
	AutoLayout = UI_CreateAutoLayout( Scrollable, 0, 0, 0 );
	AutoLayout.q1x = 1;
	PropertyGrid.data.AutoLayout = AutoLayout;
	PropertyGrid.data.OpCont = AutoLayout;
	
	parent.addChild( PropertyGrid );
	
	PropertyGrid.setData( seed, options );
	
	return PropertyGrid;
}


global UI_Window = {};

function UI_Window.close()
{
	this.parent.removeChild( this );
}

function UI_CreateWindow( parent, x, y, width, height, caption, adjust )
{
	if( adjust )
	{
		x -= 4;
		y -= 24;
		width += 8;
		height += 28;
	}
	Window = parent.frame.createControl( "window" );
	Window.x = x;
	Window.y = y;
	Window.width = width;
	Window.height = height;
	Window.nonClientTop = 24;
	Window.nonClientBottom = 4;
	Window.nonClientLeft = 4;
	Window.nonClientRight = 4;
	Window.caption = caption;
	Window.data =
	{
		dragging = null,
		dragorig_x = null,
		dragorig_y = null,
		dragstart_x = null,
		dragstart_y = null,
	};
	Window._interface = UI_Window;
	
	Window_data = Window.data;
	function Window_data.setDragging( Window, type, cursor )
	{
		this.dragging = type;
		if( type !== null )
		{
			if( type & 0b0010 )
				this.dragorig_x = Window.width;
			else
				this.dragorig_x = Window.x;
			
			if( type & 0b1000 )
				this.dragorig_y = Window.height;
			else
				this.dragorig_y = Window.y;
			
			this.dragstart_x = cursor.x;
			this.dragstart_y = cursor.y;
		}
	}
	function Window_data.handleDragging( Window, cursor )
	{
		if( this.dragging === null )
			return;
		if( this.dragging === 0 )
		{
			Window.x = this.dragorig_x + cursor.x - this.dragstart_x;
			Window.y = this.dragorig_y + cursor.y - this.dragstart_y;
		}
		else
		{
			if( this.dragging & 0b0010 )
				Window.width = this.dragorig_x + cursor.x - this.dragstart_x;
			else if( this.dragging & 0b0001 )
				Window.offsetLeft = this.dragorig_x + cursor.x - this.dragstart_x;
			
			if( this.dragging & 0b1000 )
				Window.height = this.dragorig_y + cursor.y - this.dragstart_y;
			else if( this.dragging & 0b0100 )
				Window.offsetTop = this.dragorig_y + cursor.y - this.dragstart_y;
		}
	}
	
	CloseBtn = UI_CreateButton( Window, -20, -22, 20, 18, "", "icons/cross.png" );
	CloseBtn.nonclient = true;
	CloseBtn.q0x = 1;
	CloseBtn.q1x = 1;
	CloseBtn.bindEvent( "click", function(){ this.parent.close(); } );
	Window.data.CloseBtn = CloseBtn;
	
	ocb = Window.callback;
	function Window.callback( event ) use( ocb )
	{
		data = this.data;
		if( event.type == EV_ButtonDown )
		{
			if( event.button == Mouse_ButtonL )
			{
				// test for dragging
				if( event.x >= this.rx0 + 4 && event.x < this.rx1 - 4 &&
					event.y >= this.ry0 + 4 && event.y < this.ry0 + 24 )
					data.setDragging( this, 0, event );
				// test for resizing
				rsz = 0;
				if( event.x >= this.rx0 && event.x <= this.rx0 + 4 ) rsz |= 0b0001;
				if( event.x >= this.rx1 - 4 && event.x <= this.rx1 ) rsz |= 0b0010;
				if( event.y >= this.ry0 && event.y <= this.ry0 + 4 ) rsz |= 0b0100;
				if( event.y >= this.ry1 - 4 && event.y <= this.ry1 ) rsz |= 0b1000;
				if( rsz )
					data.setDragging( this, rsz, event );
			}
		}
		else if( event.type == EV_ButtonUp )
		{
			if( event.button == Mouse_ButtonL )
				data.setDragging( this, null );
		}
		else if( event.type == EV_MouseMove )
		{
			this.cursor = true;
			rsz = 0;
			if( event.x >= this.rx0 && event.x <= this.rx0 + 4 ) rsz |= 0b0001;
			if( event.x >= this.rx1 - 4 && event.x <= this.rx1 ) rsz |= 0b0010;
			if( event.y >= this.ry0 && event.y <= this.ry0 + 4 ) rsz |= 0b0100;
			if( event.y >= this.ry1 - 4 && event.y <= this.ry1 ) rsz |= 0b1000;
			
			if( rsz == 0b0101 || rsz == 0b1010 ) this.cursor = UI_Cursor_SizeNWSE;
			else if( rsz == 0b0110 || rsz == 0b1001 ) this.cursor = UI_Cursor_SizeNESW;
			else if( rsz == 0b0001 || rsz == 0b0010 ) this.cursor = UI_Cursor_SizeWE;
			else if( rsz == 0b0100 || rsz == 0b1000 ) this.cursor = UI_Cursor_SizeNS;
			
			data.handleDragging( this, event );
		}
		return this!ocb( event );
	}
	
	function Window.renderfunc()
	{
		SS_DrawColorRect( this.rx0 + 2, this.ry0 + 2, this.rx1 + 2, this.ry1 + 2, 0.0, 0.0, 0.0, 0.2 );
		SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.ry1, 0.4, 0.6, 0.8, 1 );
		SS_DrawColorRect( this.rx0 + 1, this.ry0 + 1, this.rx1 - 1, this.ry1 - 1, 0.3, 0.5, 0.7, 1 );
		SS_DrawColorRect( this.cx0, this.cy0, this.cx1, this.cy1, 0.4, 0.6, 0.8, 1 );
		
		SS_DrawTextLine_VC( this.caption, Font, this.rx0 + 4, this.ry0 + 12, color(1) );
	}
	
	parent.addChild( Window );
	
	return Window;
}

