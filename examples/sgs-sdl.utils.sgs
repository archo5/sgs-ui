

function UI_ConfigControl( control, params )
{
	removed = UI_Controls[ params.type $ "_params" ];
	foreach( key, val : params )
	{
		if( key == "children" )
			UI_BuildControls( control.frame, val, control );
		else if( key == "type" )
			;
		else if( removed.find( key ) === null )
			control.(key) = val;
	}
}

function UI_BuildControls( frame, controls, parent )
{
	parent ||= frame.root;
	
	foreach( control : controls )
		UI_Controls[ control.type ]( parent, control );
}



function draw_fitted( tex, x0, x1, y0, y1 )
{
	dw = x1 - x0;
	dh = y1 - y0;
	if( dw <= 0 || dh <= 0 )
		return;
	
	sw = tex.width;
	sh = tex.height;
	
	da = dw / dh;
	sa = sw / sh;
	
	px = ( x0 + x1 ) * 0.5;
	py = ( y0 + y1 ) * 0.5;
	
	if( da > sa ) // extra width
	{
		w = dh * sa;
		h = dh;
	}
	else // extra height
	{
		w = dw;
		h = dw / sa;
	}
	if( w > sw )
	{
		w = sw;
		h = sh;
	}
	
	px = round( px );
	py = round( py );
	
	SS_Draw({ preset = "box", position = vec2(px,py), scale = vec2(w,h), texture = tex });
}

function draw_color_circle( x, y, radius, numsides, r, g, b, a )
{
	if( numsides < 1 || !numsides )
		numsides = ceil( radius * 8 / M_PI );
	if( numsides < 3 )
		return;
	
	if( sys_rctx_flip_colors ){ tmp = r; r = b; b = tmp; }
	g_RB.begin();
	
	ang = 0;
	ad = M_PI * 2 / numsides;
	for( i = 0; i <= numsides; ++i )
	{
		g_RB.f( cos( ang ) * radius + x, sin( ang ) * radius + y ).cf2b( r, g, b, a );
		ang += ad;
	}
	g_RB.draw( null, g_VD_P2CC4, 0, numsides + 1, SS_PT_TRIANGLE_FAN );
}

function first_non_null( a, b ){ return if( a === null, b, a ); }



function SS_UI_ConvertColor( cc ){ return color( cc.r, cc.g, cc.b, cc.a ); }

function SS_UI_CreateFrame()
{
	SS_Frame = UI_CreateFrame();
	SS_Frame.setTheme( SS_UI_Theme_Default );
	function SS_Frame.scissor_func( x0, y0, x1, y1 )
	{
		if( x0 === null )
			SS_SetClipRect( null );
		else
			SS_SetClipRect( x0, y0, x1, y1 );
	}
	function SS_Frame.clipboard_func( text )
	{
		if( text === null )
			return SS_GetClipboardText();
		return SS_SetClipboardText( text ) || "";
	}
	function SS_Frame.cursor_func( cursor )
	{
		if( cursor === null )
			return;
		SS_ShowCursor( cursor !== false );
		if( cursor === true )
			SS_SetSystemCursor( UI_Cursor_Arrow );
		else if( typeid( cursor ) == VT_INT )
			SS_SetSystemCursor( cursor );
	}
	function SS_Frame.font_func( font, size )
	{
		if( font === null ) font = "fonts/lato-regular.ttf";
		if( size <= 0 ) size = 12;
		
		return SS_CreateFont( font, size );
	}
	return SS_Frame;
}

function SS_UI_HandleEvent( frame, e )
{
	if( e.type == SDL_MOUSEMOTION )
	{
		FRAME.doMouseMove( e.x, e.y );
	}
	else if( e.type == SDL_MOUSEBUTTONDOWN || e.type == SDL_MOUSEBUTTONUP )
	{
		btn = -1;
		if( e.button == 1 ) btn = 0;
		else if( e.button == 3 ) btn = 1;
		else if( e.button == 2 ) btn = 2;
		FRAME.doMouseButton( btn, e.type == SDL_MOUSEBUTTONDOWN );
	}
	else if( e.type == SDL_MOUSEWHEEL )
	{
		FRAME.doMouseWheel( e.x, -e.y );
	}
	else if( e.type == SDL_KEYUP || e.type == SDL_KEYDOWN )
	{
		key = 0;
		if( e.keycode == SDLK_LEFT ) key = Key_Left;
		else if( e.keycode == SDLK_RIGHT ) key = Key_Right;
		else if( e.keycode == SDLK_UP ) key = Key_Up;
		else if( e.keycode == SDLK_DOWN ) key = Key_Down;
		else if( e.keycode == SDLK_BACKSPACE ) key = Key_DelLeft;
		else if( e.keycode == SDLK_DELETE ) key = Key_DelRight;
		else if( e.keycode == SDLK_TAB ) key = Key_Tab;
		else if( e.keycode == SDLK_X && e.mod & SDL_KMOD_CTRL ) key = Key_Cut;
		else if( e.keycode == SDLK_C && e.mod & SDL_KMOD_CTRL ) key = Key_Copy;
		else if( e.keycode == SDLK_V && e.mod & SDL_KMOD_CTRL ) key = Key_Paste;
		else if( e.keycode == SDLK_Z && e.mod & SDL_KMOD_CTRL ) key = Key_Undo;
		else if( e.keycode == SDLK_Y && e.mod & SDL_KMOD_CTRL ) key = Key_Redo;
		else if( e.keycode == SDLK_A && e.mod & SDL_KMOD_CTRL ) key = Key_SelectAll;
		else if( e.keycode == SDLK_PAGEUP ) key = Key_PageUp;
		else if( e.keycode == SDLK_PAGEDOWN ) key = Key_PageDown;
		if( key )
		{
			if( e.mod & SDL_KMOD_SHIFT ) key |= KeyMod_Shift;
			// submit event
			FRAME.doKeyPress( key, e.type == SDL_KEYDOWN );
		}
	}
	else if( e.type == SDL_TEXTINPUT )
	{
		chrs = string_utf8_decode( e.text );
		FRAME.doPutChar( chrs[0] );
	}
	else if( e.type == SDL_WINDOWEVENT && e.event == SDL_WINDOWEVENT_RESIZED )
	{
		FRAME.width = e.data1;
		FRAME.height = e.data2;
	}
}

