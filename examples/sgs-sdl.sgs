
include "../bin/sgs-ui";
include "sgs-sdl.utils";
include "sgs-sdl.ui-core";
include "sgs-sdl.ui-input";
include "sgs-sdl.ui-panels";



function configure()
{
	global sys_exit;

	editor = false;
	
	for( i = 0; i < sys_args.size; ++i )
	{
		var arg = sys_args[ i ];
		if( arg == "-preexit" )
		{
			println( "PREEXIT" );
			sys_exit = true;
		}
		else if( arg == "-profile" )
		{
			enable_profiler();
			println( "PROFILER ENABLED" );
		}
		else if( arg == "-profile-ops" )
		{
			enable_profiler2();
			println( "PROFILER [mode 2] ENABLED" );
		}
		else if( arg == "-editor" )
		{
			editor = true;
		}
	}

	if( editor )
	{
		include "editor/main";
		configure();
	}
}

// global W, H, W1 = 1024, H1 = 576, F1 = "", W2 = 1600, H2 = 900, F2 = "", which = 2;
global W, H, W1 = 1024, H1 = 576, F1 = "vsync", W2 = 1024, H2 = 576, F2 = "vsync", which = 2;

function switch()
{
	global W, H, W1, H1, F1, W2, H2, F2, which;
	
	which = 3 - which;
	if( which == 1 )
	{
		set_video_mode( W1, H1, 32, F1 );
		W = W1; H = H1;
	}
	else
	{
		set_video_mode( W2, H2, 32, F2 );
		W = W2; H = H2;
	}
}

function _( obj, prop ){ return if( isset( obj, prop ), obj.(prop), null ); }

function initialize()
{
	set_caption( "The SGS-SDL Game Framework" );
	set_gl_attrib( SDL_GL_DEPTH_SIZE, 24 );
	set_gl_attrib( SDL_GL_STENCIL_SIZE, 8 );
	switch();
	drawfunc_init();
	
	global Font = create_font( "verdana.ttf", 11 );
	
	
	global FRAME = ui_create_frame();
	FRAME.width = 1024;
	FRAME.height = 576;
	function FRAME.scissor_func( x0, y0, x1, y1 )
	{
		if( x0 === null )
			set_cliprect( null );
		else
			set_cliprect( x0, x1, y0, y1 );
	}
	
	global FORM = ui_create_form( FRAME.root );
	
	global STAT = ui_create_static( FORM, 10, 10, 1024 - 20, 576 - 20 );
	global TOPBAR = ui_create_static( STAT, 0, 0, 0, 48, "", [0.8,0.8,0.8,1] );
	TOPBAR.q1x = 1;
	
	function formdump()
	{
		printvar( FORM.data.getData() );
	}
	
	ui_create_button( TOPBAR, 0, 0, 48, 24, "File" ).bindEvent( "click", formdump );
	ui_create_button( TOPBAR, 48, 0, 48, 24, "Edit" );
	
	ui_create_button( TOPBAR, 0, 24, 24, 24, "", "icons/page.png" );
	ui_create_button( TOPBAR, 24, 24, 24, 24, "", "icons/disk.png" );
	ui_create_button( TOPBAR, 48, 24, 24, 24, "", "icons/disk_multiple.png" );
	
	global BTN = ui_create_button( STAT, 100, 100, 100, 30, "Action", "icons/disk.png" );
	BTN.bindEvent( "click", function()
	{
		sub3menu =
		[
			{ text = "Third Submenu", disabled = true },
			{ disabled = true },
			{ text = "One option", disabled = true },
			{ text = "..or two!", func = function(){ println("TWOOOOOOOOOOO"); } },
		];
		
		submenu =
		[
			{ text = "One option", disabled = true },
			{ disabled = true },
			{ text = "..or two!" },
			{ text = "3", menu = sub3menu },
		];
		
		items =
		[
			{ text = "Test 1", func = function(){ println("Test 1 - function"); } },
			{ text = "Some option", checked = false },
			{ text = "Some checked option", checked = true },
			{ text = "Submenu?", menu = submenu },
			{ disabled = true },
			{ text = "Disabled", disabled = true },
			{ text = "Exiquit", func = function(){ global sys_exit = true; } },
		];
		ui_build_menu( this.frame.root, this.rx0, this.ry1, items );
	});
	
	tbKey = ui_create_textbox( STAT, 100, 50, 100, "Key" );
	tbKey.bindEvent( "change", function(){ println( "Updated key: " $ this.data.text ); } );
	tbKey.name = "key";
	tbVal = ui_create_textbox( STAT, 220, 50, 100, "Value" );
	tbVal.bindEvent( "commit", function(){ println( "Committed value: " $ this.data.text ); } );
	tbVal.name = "value";
	
	ui_create_checkbox( STAT, 340, 50, 24, 24, "cbox", "set" );
	ui_create_radiobtn( STAT, 364, 50, 24, 24, "rbtn", "A" );
	ui_create_radiobtn( STAT, 388, 50, 24, 24, "rbtn", "B" );
	
	ui_create_vscroll( STAT, 400, 100, 16, 300, 1000, 300, 37 ).bindEvent( "change", function(){ println( "Scrolled to: " $ this.data.position ); } );
	ui_create_hscroll( STAT, 100, 400, 300, 16, 1000, 300, 137 ).bindEvent( "change", function(){ println( "Scrolled to: " $ this.data.position ); } );
	
	SCROLL = ui_create_scrollable( STAT, 500, 100, 200, 300 );
	text = string_replace( io_file_read( "../examples/sgs-sdl.sgs" ), ["\r\n","\r","\t"], ["\n","\n","    "] );
	text = string_part( text, 0, 1024 );
	ui_create_static( SCROLL, 0, 0, 20, 500, text, [0.9,0.9,0.9,1], DT_LEFT | DT_TOP ).q1x = 1;
}

global lasttime = ftime();
global rotation = 0;

function update()
{
	global lasttime, rotation, P, W, H;
	var curtime = ftime();
	var delta = curtime - lasttime;
	lasttime = curtime;
	if( delta > 1.0/15.0 )
		delta = 1.0/15.0;
	
	rotation += delta * 2;
	
	var cc = [0.1,0.2,0.4];
	clear( cc );
	
	set_camera_ui( 0, W, 0, H );
	
	FRAME.processTimers( delta );
	FRAME.render();
	
//	hctrl = FRAME.getHoverControl();
//	if( hctrl )
//	{
//		draw_color_rect( hctrl.rx0, hctrl.ry0, hctrl.rx1, hctrl.ry1, 0.5, 0.3, 0.1, 0.5 );
//	}
	
//	tx = "frame time: " $ ( ftime() - lasttime ) * 1000.0 $ " ms";
//	draw_text_line( tx, Font, 101, 1, [0,0,0,1] );
//	draw_text_line( tx, Font, 100, 0, [0.9,0.8,0.7,1] );
	
	present();

	sleeptime = 15 - ( ftime() - lasttime ) * 1000;
//	if( sleeptime > 0 ) sleep( sleeptime );
}

function on_event( e )
{
	if( e.type == SDL_QUIT )
		global sys_exit = true;
	if( e.type == SDL_MOUSEMOTION )
	{
		FRAME.doMouseMove( e.x, e.y );
	}
	if( e.type == SDL_MOUSEBUTTONDOWN || e.type == SDL_MOUSEBUTTONUP )
	{
		if( e.button == 4 || e.button == 5 )
			FRAME.doMouseWheel( ( e.button == 5 ) - ( e.button == 4 ) );
		else
		{
			btn = -1;
			if( e.button == 1 ) btn = 0;
			else if( e.button == 3 ) btn = 1;
			else if( e.button == 2 ) btn = 2;
			FRAME.doMouseButton( btn, e.type == SDL_MOUSEBUTTONDOWN );
		}
	}
	if( e.type == SDL_KEYUP || e.type == SDL_KEYDOWN )
	{
		key = 0;
		if( e.keycode == SDLK_LEFT ) key = Key_Left;
		else if( e.keycode == SDLK_RIGHT ) key = Key_Right;
		else if( e.keycode == SDLK_UP ) key = Key_Up;
		else if( e.keycode == SDLK_DOWN ) key = Key_Down;
		else if( e.keycode == SDLK_BACKSPACE ) key = Key_DelLeft;
		else if( e.keycode == SDLK_DELETE ) key = Key_DelRight;
		else if( e.keycode == SDLK_TAB ) key = Key_Tab;
		else if( e.keycode == SDLK_X && e.mod & KMOD_CTRL ) key = Key_Cut;
		else if( e.keycode == SDLK_C && e.mod & KMOD_CTRL ) key = Key_Copy;
		else if( e.keycode == SDLK_V && e.mod & KMOD_CTRL ) key = Key_Paste;
		else if( e.keycode == SDLK_Z && e.mod & KMOD_CTRL ) key = Key_Undo;
		else if( e.keycode == SDLK_Y && e.mod & KMOD_CTRL ) key = Key_Redo;
		else if( e.keycode == SDLK_A && e.mod & KMOD_CTRL ) key = Key_SelectAll;
		else if( e.keycode == SDLK_PAGEUP ) key = Key_PageUp;
		else if( e.keycode == SDLK_PAGEDOWN ) key = Key_PageDown;
		if( key )
		{
			if( e.mod & KMOD_SHIFT ) key |= KeyMod_Shift;
			// submit event
			FRAME.doKeyPress( key, e.type == SDL_KEYDOWN );
		}
	}
	if( e.type == SDL_KEYDOWN )
	{
		FRAME.doPutChar( e.unicode );
	}
	if( e.type == SDL_KEYDOWN && e.keycode == SDLK_F11 )
		switch();
	if( e.type == SDL_VIDEO_DEVICELOST ) println( "Device lost!" );
	if( e.type == SDL_VIDEO_DEVICERESET ) println( "Device reset!" );
}

function cleanup()
{
}
