
include "../bin/sgs-ui";
include "../ui/ui";
include "../ui/sgs-sdl/utils";
include "../ui/sgs-sdl/themes";

include "sgs-sdl.examples";

global gDBGDRAW = false;
global ExampleID = "default";

function configure()
{
	for( i = 0; i < sys_args.size; ++i )
	{
		arg = sys_args[ i ];
		if( arg == "-profile" )
		{
			SS_EnableProfiler();
			println( "PROFILER ENABLED" );
		}
		else if( arg == "-profile-ops" )
		{
			SS_EnableProfiler2();
			println( "PROFILER [mode 2] ENABLED" );
		}
		else if( arg == "-profile-mem" )
		{
			SS_EnableProfiler(3);
			println( "PROFILER [mode 3: MEMORY] ENABLED" );
		}
		else if( arg == "-ex" )
		{
			i++;
			if( i >= sys_args.size )
				return;
			global ExampleID = sys_args[ i ];
		}
	}
}

function initialize()
{
	global Window = SS_CreateWindow( "SGS-UI Test",
		SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
		1024, 576, SDL_WINDOW_RESIZABLE | SDL_WINDOW_OPENGLMAYBE );
	Window.initRenderer( SS_RENDERER_DONTCARE, SS_RENDERER_DONTCARE, SS_RENDERER_VSYNC );
	SS_InitDrawFunctions();
	
	SS_StartTextInput();
	
	global g_DbgFont = SS_CreateFont( "fonts/lato-regular.ttf", 11 );
	
	
	global FRAME = SS_UI_CreateFrame();
	FRAME.width = Window.bbWidth;
	FRAME.height = Window.bbHeight;
	
	funcname = "sgs_ui_example_" $ ExampleID;
	if( !isset( _G, funcname ) )
	{
		errprintln( "example '" $ ExampleID $ "' was not found!" );
		global sys_exit = true;
		return;
	}
	
	_G[ funcname ]();
}

global lasttime = ftime();

function update()
{
	global lasttime;
	var curtime = ftime();
	var delta = curtime - lasttime;
	lasttime = curtime;
	ucdelta = delta;
	if( delta > 1.0/15.0 )
		delta = 1.0/15.0;
	
	SS_Clear( color( 0.1, 0.2, 0.4 ) );
	
	W = Window.bbWidth;
	H = Window.bbHeight;
	
	SS_SetCameraUI( 0, W, 0, H );
	
	FRAME.processTimers( ucdelta );
	FRAME.render();
	
	if( gDBGDRAW )
	{
		hctrl = FRAME.getHoverControl();
		if( hctrl )
		{
			SS_DrawColorRect( hctrl.rx0, hctrl.ry0, hctrl.rx1, hctrl.ry1, 0.2, 0.8, 0.1, 0.1 );
			SS_DrawColorRect( hctrl.cx0, hctrl.cy0, hctrl.cx1, hctrl.cy1, 0.1, 0.2, 0.8, 0.1 );
			SS_DrawColorRect( hctrl.px0, hctrl.py0, hctrl.px1, hctrl.py1, 0.8, 0.1, 0.2, 0.1 );
		}
		
		tx = "frame time: " $ ( ftime() - lasttime ) * 1000.0 $ " ms";
		SS_DrawTextLine( tx, g_DbgFont, 101, 1, [0,0,0,1] );
		SS_DrawTextLine( tx, g_DbgFont, 100, 0, [0.9,0.8,0.7,1] );
		tx = fmt_text( "memory usage: {f.2} kB", sys_stat(3) / 1024 );
		SS_DrawTextLine( tx, g_DbgFont, 101, 21, [0,0,0,1] );
		SS_DrawTextLine( tx, g_DbgFont, 100, 20, [0.9,0.8,0.7,1] );
	}
	
	SS_Present();

	sleeptime = 15 - ( ftime() - lasttime ) * 1000;
//	if( sleeptime > 0 ) sleep( sleeptime );
}

function on_event( e )
{
	if( e.type == SDL_QUIT )
		global sys_exit = true;
	if( e.type == SDL_KEYUP && e.keycode == SDLK_F3 )
		global gDBGDRAW = !gDBGDRAW;
	if( e.type == SDL_VIDEODEVICELOST ) println( "Device lost!" );
	if( e.type == SDL_VIDEODEVICERESET ) println( "Device reset!" );
	
	SS_UI_HandleEvent( FRAME, e );
}

function cleanup()
{
}
