

// D&D kit
function UI_CreatePlaceholder( src )
{
	Pch = src.frame.createControl( "placeholder" );
	Pch[]
	{
		x = src.x,
		y = src.y,
		width = src.width,
		height = src.height,
		q0x = src.q0x,
		q0y = src.q0y,
		q1x = src.q1x,
		q1y = src.q1y,
	};
	
	Pch.updateTheme();
	return Pch;
}

function UI_PreDetachPreserveControl( ctrl )
{
	x = ctrl.rx0;
	y = ctrl.ry0;
	w = ctrl.rx1 - x;
	h = ctrl.ry1 - y;
	ctrl[]
	{
		x = x, y = y, width = w, height = h,
		q0x = 0, q1x = 0, q0y = 0, q1y = 0,
		styleParent = ctrl.parent,
	};
}


global UI_ScrollingAutoLayout = {};

function UI_ScrollingAutoLayout.getContainer()
{
	return this.data.OpCont;
}

function UI_CreateScrollingAutoLayout( parent )
{
	ScrollingAutoLayout = parent.frame.createControl( "scrollingautolayout" );
	ScrollingAutoLayout._interface = UI_ScrollingAutoLayout;
	ScrollingAutoLayout.data =
	{
		options = [],
	};
	
	Scrollable = UI_CreateScrollable( ScrollingAutoLayout, "auto", false );
	ScrollingAutoLayout.data.Scrollable = Scrollable;
	
	AutoLayout = UI_CreateAutoLayout( Scrollable );
	ScrollingAutoLayout.data.AutoLayout = AutoLayout;
	ScrollingAutoLayout.data.OpCont = AutoLayout;
	
	ScrollingAutoLayout.updateTheme();
	parent.addChild( ScrollingAutoLayout );
	return ScrollingAutoLayout;
}

UI_Controls.scrollingautolayout_params = ["children"];
function UI_Controls.scrollingautolayout( parent, params )
{
	ctrl = UI_CreateScrollingAutoLayout( parent );
	UI_ConfigControl( ctrl, params );
	if( @params.children )
		UI_BuildControls( ctrl.getContainer(), params.children );
}


global UI_EditableList = {};

function UI_EditableList._notifyChange()
{
	ev = UI_CreateEvent();
	this.callEvent( "change", ev );
	UIForm_CtrlChanged( this, ev );
}

function UI_EditableList._notifyReorder( item )
{
	previndex = item.data.previndex;
	curindex = item.getOrderIndex();
	
	if( previndex != curindex )
	{
		tdv = this.data.value;
		name = tdv[ previndex ];
		tdv.erase( previndex );
		tdv.insert( curindex, name );
		this._notifyChange();
	}
}

function UI_EditableList._initItem( ELItem )
{
	ELItem.data =
	{
		maydrag = false,
		dragging = false,
		dragoff_x = null,
		dragoff_y = null,
		startcp_x = null,
		startcp_y = null,
		previndex = null,
	};
	ocb = ELItem.callback;
	function ELItem.callback( event ) use( ocb )
	{
		data = this.data;
		if( event.type == EV_ButtonDown )
		{
			if( event.button == Mouse_ButtonL )
			{
				data.maydrag = true;
				data.startcp_x = event.x;
				data.startcp_y = event.y;
			}
		}
		else if( event.type == EV_ButtonUp )
		{
			if( event.button == Mouse_ButtonL )
			{
				if( data.dragging )
				{
					data.dragging = false;
					// D&D ENDS
					data.placeholder.swapOutFor( this );
					data.placeholder.destroy(true);
					data.placeholder = null;
					this.style = data.originalStyle;
					this.styleParent = null;
					this._neverHit = false;
					this.parent.parent.enableCursorScroll( false );
					this.parent.parent.parent._notifyReorder( this );
				}
				data.maydrag = false;
			}
		}
		if( event.type == EV_MouseMove )
		{
			function sqr(x) = x * x;
			if( data.maydrag && !data.dragging &&
				sqr( event.x - data.startcp_x ) + sqr( event.y - data.startcp_y ) > 3 * 3 )
			{
				data.dragging = true;
				// D&D BEGINS
				data.previndex = this.getOrderIndex();
				this.parent.parent.enableCursorScroll( true );
				data.dragoff_x = this.rx0 - data.startcp_x;
				data.dragoff_y = this.ry0 - data.startcp_y;
				data.originalStyle = this.style;
				data.placeholder = UI_CreatePlaceholder( this );
				UI_PreDetachPreserveControl( this );
				this.swapOutFor( data.placeholder );
				this.frame.root.addChild( this );
				this._neverHit = true;
			}
			if( data.dragging )
			{
				this.x = data.dragoff_x + event.x;
				this.y = data.dragoff_y + event.y;
				
				cuc = this.frame.getControlUnderCursor();
				item = this.frame.find( cuc ).closest( "editablelist > scrollable > autolayout > item" );
				if( item.size && item[0].parent == this.styleParent )
				{
					data.placeholder.moveToIndex( item[0].getOrderIndex() );
				}
			}
		}
		return this!ocb( event );
	}
}

function UI_EditableList.getContainer(){ return this.data.OpCont; }
function UI_EditableList.getItemCount(){ return this.data.OpCont.getAllChildCount(); }
function UI_EditableList.insertAt( pos, name )
{
	item = this.frame.createControl( "item" );
	this._initItem( item );
	if( name !== null )
		item.name = name;
	if( !this.data.OpCont.insertChild( item, pos ) )
		return null;
	this.data.value.insert( pos, item.name );
	this._notifyChange();
	return item;
}
function UI_EditableList.removeAt( pos )
{
	if( pos < 0 || pos >= this.getItemCount() )
		return WARNING( "item index out of bounds" ) || false;
	this.removeItem( this.data.OpCont.allChildren()[ pos ] );
	return true;
}
function UI_EditableList.removeItem( ch )
{
	oi = ch.getOrderIndex();
	if( this.data.OpCont.removeChild( ch ) )
	{
		ch.destroy(true);
		this.data.value.erase( oi );
		this._notifyChange();
		return true;
	}
	return false;
}
function UI_EditableList.prependItem( name ){ return this.insertAt( 0, name ); }
function UI_EditableList.appendItem( name ){ return this.insertAt( this.getItemCount(), name ); }

function UI_EditableList.changeName( pos, name )
{
	if( pos < 0 || pos >= this.getItemCount() )
		return WARNING( "item index out of bounds" ) || false;
	prevname = this.data.value[ pos ];
	this.data.value[ pos ] = name;
	if( name !== prevname )
		this._notifyChange();
	return true;
}

function UI_CreateEditableList( parent, name )
{
	EditableList = parent.frame.createControl( "editablelist" );
	EditableList._interface = UI_EditableList;
	EditableList.data =
	{
		value = [],
		getValue = function(){ return this.value; },
	};
	EditableList.name = name;
	
	Scrollable = UI_CreateScrollable( EditableList, "auto", false );
	EditableList.data.Scrollable = Scrollable;
	
	AutoLayout = UI_CreateAutoLayout( Scrollable );
	EditableList.data.AutoLayout = AutoLayout;
	EditableList.data.OpCont = AutoLayout;
	
	ocb = EditableList.callback;
	function EditableList.callback( event ) use( ocb )
	{
		if( event.type == EV_Attach )
			UIForm_Attach( this, event );
		else if( event.type == EV_Detach )
			UIForm_Detach( this, event );
		return this!ocb( event );
	}
	
	EditableList.updateTheme();
	parent.addChild( EditableList );
	return EditableList;
}

UI_Controls.editablelist_params = ["children","items"];
function UI_Controls.editablelist( parent, params )
{
	ctrl = UI_CreateEditableList( parent );
	UI_ConfigControl( ctrl, params );
	if( @params.items )
	{
		foreach( item : params.items )
			UI_BuildControl( ctrl.appendItem(), item );
	}
}


global UI_GroupBlock = {};

function UI_GroupBlock._getHeight()
{
	data = this.data;
	totalheight = data.Title.realHeight + this.paddingTop + this.paddingBottom + this.nonClientTop + this.nonClientBottom;
	if( this.hasClass( "groupblk-open" ) )
		totalheight += data.AutoLayout.realHeight;
	return totalheight;
}

function UI_GroupBlock.setOpen( is )
{
	if( is == this.isOpen() )
		return;
	
	this.addRemClass( "groupblk-open", is );
	this.addRemClass( "groupblk-closed", !is );
	this.animate({ height = this._getHeight() }, this.data.time );
}

function UI_GroupBlock.isOpen(){ return this.hasClass( "groupblk-open" ); }
function UI_GroupBlock.open(){ this.setOpen( true ); }
function UI_GroupBlock.close(){ this.setOpen( false ); }
function UI_GroupBlock.toggle(){ this.setOpen( !this.isOpen() ); }

function UI_GroupBlock.getName(){ return this.data.Title.caption; }
function UI_GroupBlock.setName( name ){ this.data.Title.caption = name; }
function UI_GroupBlock.getContainer(){ return this.data.AutoLayout; }

function UI_CreateGroupBlock( parent, name, time, closed )
{
	time ||= 0.2;
	closed ||= false;
	
	GroupBlock = parent.frame.createControl( "groupblock" );
	GroupBlock._interface = UI_GroupBlock;
	GroupBlock.data = { time = time };
	GroupBlock.class = if( closed, "groupblk-closed", "groupblk-open" );
	
	GroupBlock.data.Title = UI_CreateButton( GroupBlock )[]{ caption = name || "", class = "groupblk-title" }
		.bindEvent( "click", function(){ this.parent.toggle(); } );
	GroupBlock.data.AutoLayout = grpblk_auto = UI_CreateAutoLayout( GroupBlock )[]{ class = "groupblk-cont" };
	
	al_ocb = grpblk_auto.callback;
	function grpblk_auto.callback( event ) use( al_ocb )
	{
		if( event.type == EV_Layout && this.parent && !this.parent.queueSize() )
		{
			res = this!al_ocb( event );
			this.parent.height = this.parent._getHeight();
			return res;
		}
		return this!al_ocb( event );
	}
	
	GroupBlock.updateTheme();
	parent.addChild( GroupBlock );
	
	GroupBlock.height = GroupBlock._getHeight();
	
	return GroupBlock;
}

UI_Controls.groupblock_params = ["caption"];
function UI_Controls.groupblock( parent, params )
{
	ctrl = UI_CreateGroupBlock( parent, @params.caption );
	UI_ConfigControl( ctrl, params );
}


global UI_ListBoxMenu = {};

function UI_ListBoxMenu.addOption( option, func )
{
	data = this.data;
	data.options.push( option );
	
	btn = UI_CreateButton( data.OpCont )[]{ caption = option.text, icon = @option.icon };
	btn.name = data.options.size - 1;
	fn = func || @option.func;
	if( fn )
		btn.bindEvent( "click", fn );
}

function UI_ListBoxMenu.removeOptions()
{
	this.data.options.clear();
	this.OpCont.destroyChildren(true);
}

function UI_ListBoxMenu.refit()
{
	data = this.data;
	real_height = data.AutoLayout.ry1 - data.AutoLayout.ry0;
	real_height += data.Scrollable.nonClientTop + data.Scrollable.nonClientBottom;
	real_height += this.paddingTop + this.paddingBottom;
	real_height += this.nonClientTop + this.nonClientBottom;
	if( real_height > this.maxHeight )
		real_height = this.maxHeight;
	this.height = real_height;
}

function UI_ListBoxMenu.getIDFromControl( ctrl )
{
	return toint( ctrl.name );
}

function UI_CreateListBoxMenu( parent, popup_remove_callback )
{
	ListBoxMenu = parent.frame.createControl( "listboxmenu" );
	ListBoxMenu._interface = UI_ListBoxMenu;
	ListBoxMenu.data =
	{
		options = [],
	};
	if( popup_remove_callback )
	{
		orig_callback = ListBoxMenu.callback;
		function ListBoxMenu.callback( event ) use( orig_callback, popup_remove_callback )
		{
			if( event.type == EV_HitTest )
			{
				if( this!orig_callback( event ) )
					return Hit_Client;
				if( this.parent && this.parent.callback( event ) )
					return Hit_NonClient;
				return Hit_None;
			}
			if( event.type == EV_ButtonDown )
			{
				hitevent = UI_CreateEvent();
				hitevent.type = EV_HitTest;
				hitevent.x = event.x;
				hitevent.y = event.y;
				if( this.callback( hitevent ) == Hit_NonClient )
				{
					this!popup_remove_callback();
					this!orig_callback( event );
					this.destroy( true );
					return 0;
				}
			}
			return this!orig_callback( event );
		}
	}
	
	Scrollable = UI_CreateScrollable( ListBoxMenu, "auto", false );
	ListBoxMenu.data.Scrollable = Scrollable;
	
	AutoLayout = UI_CreateAutoLayout( Scrollable );
	ListBoxMenu.data.AutoLayout = AutoLayout;
	ListBoxMenu.data.OpCont = AutoLayout;
	
	ListBoxMenu.updateTheme();
	parent.addChild( ListBoxMenu );
	return ListBoxMenu;
}

UI_Controls.listboxmenu_params = [];
function UI_Controls.listboxmenu( parent, params )
{
	ctrl = UI_CreateListBoxMenu( parent );
	UI_ConfigControl( ctrl, params );
}


global UI_PropertyGrid = {};

function UI_PropertyGrid._create_label( text )
{
	ctrl = UI_CreateStatic( this.data.OpCont )[]{ caption = text }.addClass( "label" );
	return ctrl;
}

function UI_PropertyGrid._createDefaultLabel( option )
{
	return this._create_label( @option.label || @option.name );
}

function UI_PropertyGrid._create_separator( option, value )
{
	return UI_CreateStatic( this.data.OpCont )[]{ caption = @option.label || value || @option.name }.addClass( "separator" );
}

function UI_PropertyGrid._create_checkbox( option, value )
{
	this._createDefaultLabel( option );
	ctrl = UI_CreateCheckbox( this.data.OpCont, option.name, null, !!value ).addClass( "value" );
	return ctrl;
}

function UI_PropertyGrid._create_slider( option, value )
{
	this._createDefaultLabel( option );
	ctrl = UI_CreateSlider( this.data.OpCont, option.name, @option.min, @option.max, @option.stopsize, false, value ).addClass( "value" );
	return ctrl;
}

function UI_PropertyGrid._create_textbox( option, value )
{
	this._createDefaultLabel( option );
	ctrl = UI_CreateTextbox( this.data.OpCont, option.name, @option.textbox_caption, value ).addClass( "value" );
	return ctrl;
}

function UI_PropertyGrid._create_switchbutton( option, value )
{
	this._createDefaultLabel( option );
	ctrl = UI_CreateSwitchButton( this.data.OpCont, option.name, @option.items, @option.sidebuttons, value ).addClass( "value" );
	return ctrl;
}

function UI_PropertyGrid._create_selectbox( option, value )
{
	this._createDefaultLabel( option );
	ctrl = UI_CreateSelectBox( this.data.OpCont, option.name, @option.items, value ).addClass( "value" );
	return ctrl;
}

function UI_PropertyGrid._create_button( option, value )
{
	ctrl = UI_CreateButton( this.data.OpCont )[]{ caption = @option.label || option.name, icon = @option.icon, class = "value" };
	ctrl.bindEvent( "click", @option.func || value );
	return ctrl;
}

function UI_PropertyGrid._setGroup( groupname )
{
	if( groupname === null )
		this.data.OpCont = this.data.AutoLayout;
	else
		this.data.OpCont = UI_CreateGroupBlock( this.data.AutoLayout, groupname ).getContainer();
}

function UI_PropertyGrid.setData( input_values, options )
{
	if( !options )
		return;
	group = null;
	this._setGroup( null );
	data = this.data;
	data.options = options;
	data.values = all_values = {};
	data.AutoLayout.destroyAllChildren(true);
	foreach( option : options )
	{
		name = @option.name;
		value = null;
		if( name )
		{
			value = @input_values[ option.name ];
			all_values[ option.name ] = value;
		}
		curgroup = @option.group;
		if( group !== curgroup )
		{
			this._setGroup( curgroup );
			group = curgroup;
		}
		this.( "_create_" $ option.type )( option, value );
	}
}

function UI_PropertyGrid._updateData()
{
	data = this.data;
	form = data.Form;
	foreach( option : data.options )
	{
		name = @option.name;
		if( !name )
			continue;
		fditem = form.getString( name );
		if( fditem !== null )
		{
			if( @option.convert )
				fditem = option.convert( fditem );
			data.values[ name ] = fditem;
		}
	}
}

function UI_PropertyGrid.getForm(){ return this.data.Form; }
function UI_PropertyGrid.getData(){ return this.data.values; }
function UI_PropertyGrid.getLastChange(){ (name,type) = this.data.Form.getLastChange(); return name, type; }
function UI_PropertyGrid.getValueOf( name ){ return @this.data.values[ name ]; }

function UI_CreatePropertyGrid( parent, values, options )
{
	PropertyGrid = parent.frame.createControl( "propertygrid" );
	PropertyGrid._interface = UI_PropertyGrid;
	PropertyGrid.data =
	{
		label_width_min = 0,
		label_width_max = UI_MaxValue,
		label_width_percent = 0.5,
		label_height = 24,
		value_width_min = 0,
		value_width_max = UI_MaxValue,
		value_width_percent = 0.5,
		value_height = 24,
		
		values = {},
		options = [],
	};
	
	Form = UI_CreateForm( PropertyGrid );
	PropertyGrid.data.Form = Form;
	Form.bindEvent( "change", function( e ){ this.parent._updateData(); this.parent.callEvent( "change", e ); } );
	
	Scrollable = UI_CreateScrollable( Form, "auto", false );
	PropertyGrid.data.Scrollable = Scrollable;
	
	AutoLayout = UI_CreateAutoLayout( Scrollable );
	PropertyGrid.data.AutoLayout = AutoLayout;
	PropertyGrid.data.OpCont = AutoLayout;
	
	parent.addChild( PropertyGrid );
	
	PropertyGrid.setData( values, options );
	
	return PropertyGrid;
}

UI_Controls.propertygrid_params = ["values","options"];
function UI_Controls.propertygrid( parent, params )
{
	ctrl = UI_CreatePropertyGrid( parent, @params.values, @params.options );
	UI_ConfigControl( ctrl, params );
}


global UI_Window = {};

function UI_Window.adjustSize()
{
	this.x -= this.nonClientLeft;
	this.y -= this.nonClientTop;
	this.width += this.nonClientLeft + this.nonClientRight;
	this.height += this.nonClientTop + this.nonClientBottom;
	return this;
}

function UI_CreateWindow( parent )
{
	Window = parent.frame.createControl( "window" );
	Window.data =
	{
		dragging = null,
		dragorig_x = null,
		dragorig_y = null,
		dragstart_x = null,
		dragstart_y = null,
	};
	Window._interface = UI_Window;
	
	Window_data = Window.data;
	function Window_data.setDragging( Window, type, cursor )
	{
		this.dragging = type;
		if( type !== null )
		{
			if( type & 0b0010 )
				this.dragorig_x = Window.width;
			else
				this.dragorig_x = Window.x;
			
			if( type & 0b1000 )
				this.dragorig_y = Window.height;
			else
				this.dragorig_y = Window.y;
			
			this.dragstart_x = cursor.x;
			this.dragstart_y = cursor.y;
		}
	}
	function Window_data.handleDragging( Window, cursor )
	{
		if( this.dragging === null )
			return;
		if( this.dragging === 0 )
		{
			Window.x = this.dragorig_x + cursor.x - this.dragstart_x;
			Window.y = this.dragorig_y + cursor.y - this.dragstart_y;
		}
		else
		{
			if( this.dragging & 0b0010 )
				Window.width = this.dragorig_x + cursor.x - this.dragstart_x;
			else if( this.dragging & 0b0001 )
				Window.offsetLeft = this.dragorig_x + cursor.x - this.dragstart_x;
			
			if( this.dragging & 0b1000 )
				Window.height = this.dragorig_y + cursor.y - this.dragstart_y;
			else if( this.dragging & 0b0100 )
				Window.offsetTop = this.dragorig_y + cursor.y - this.dragstart_y;
		}
	}
	
	CloseBtn = UI_CreateButton( Window )[]{ class = "close-button" };
	CloseBtn.nonclient = true;
	CloseBtn.bindEvent( "click", function(){ this.parent.destroy(true); } );
	Window.data.CloseBtn = CloseBtn;
	
	ocb = Window.callback;
	function Window.callback( event ) use( ocb )
	{
		data = this.data;
		if( event.type == EV_ButtonDown )
		{
			if( event.button == Mouse_ButtonL )
			{
				// test for dragging
				if( event.x >= this.rx0 + 4 && event.x < this.rx1 - 4 &&
					event.y >= this.ry0 + 4 && event.y < this.ry0 + 24 )
					data.setDragging( this, 0, event );
				// test for resizing
				rsz = 0;
				if( event.x >= this.rx0 && event.x <= this.rx0 + 4 ) rsz |= 0b0001;
				if( event.x >= this.rx1 - 4 && event.x <= this.rx1 ) rsz |= 0b0010;
				if( event.y >= this.ry0 && event.y <= this.ry0 + 4 ) rsz |= 0b0100;
				if( event.y >= this.ry1 - 4 && event.y <= this.ry1 ) rsz |= 0b1000;
				if( rsz )
					data.setDragging( this, rsz, event );
			}
		}
		else if( event.type == EV_ButtonUp )
		{
			if( event.button == Mouse_ButtonL )
				data.setDragging( this, null );
		}
		else if( event.type == EV_MouseMove )
		{
			this.cursor = true;
			rsz = 0;
			if( event.x >= this.rx0 && event.x <= this.rx0 + 4 ) rsz |= 0b0001;
			if( event.x >= this.rx1 - 4 && event.x <= this.rx1 ) rsz |= 0b0010;
			if( event.y >= this.ry0 && event.y <= this.ry0 + 4 ) rsz |= 0b0100;
			if( event.y >= this.ry1 - 4 && event.y <= this.ry1 ) rsz |= 0b1000;
			
			if( rsz == 0b0101 || rsz == 0b1010 ) this.cursor = UI_Cursor_SizeNWSE;
			else if( rsz == 0b0110 || rsz == 0b1001 ) this.cursor = UI_Cursor_SizeNESW;
			else if( rsz == 0b0001 || rsz == 0b0010 ) this.cursor = UI_Cursor_SizeWE;
			else if( rsz == 0b0100 || rsz == 0b1000 ) this.cursor = UI_Cursor_SizeNS;
			
			data.handleDragging( this, event );
		}
		return this!ocb( event );
	}
	
	Window.updateTheme();
	parent.addChild( Window );
	return Window;
}

UI_Controls.window_params = [];
function UI_Controls.window( parent, params )
{
	ctrl = UI_CreateWindow( parent );
	UI_ConfigControl( ctrl, params );
}


global UI_FileBrowser = {};

function UI_FileBrowser.normalizePath( path )
{
	path = string_trim( string_replace( path, "\\", "/" ), "/", STRING_TRIM_RIGHT );
	return path;
}

function UI_FileBrowser.addFile( entry )
{
	tgt = this.data.FileCont;
	UI_CreateButton( tgt )[]{ class = "file-icon", caption = entry, name = this.data.path $ "/" $ entry };
}

function UI_FileBrowser.refillFileList()
{
	data = this.data;
	data.FileCont.destroyAllChildren( true );
	foreach( is_real, entry : io_dir( data.path ) )
	{
		if( !is_real )
			continue;
		this.addFile( entry );
	}
}

function UI_FileBrowser.setPath( path )
{
	if( path === null )
		path = io_getcwd();
	path = this.normalizePath( path );
	this.data.path = path;
	this.data.PathText.setText( path );
	this.refillFileList();
}

function UI_CreateFileBrowser( parent, commands )
{
	FileBrowser = parent.frame.createControl( "filebrowser" );
	FileBrowser._interface = UI_FileBrowser;
	FileBrowser.data = fbdata =
	{
		path = null,
		
		FileCont = null,
	};
	
	// path block
	PathBlock = UI_CreateStatic( FileBrowser )[]{ class = "path-block" };
	BtnBack = UI_CreateButton( PathBlock )[]{ class = "btn-back" };
	BtnFwd = UI_CreateButton( PathBlock )[]{ class = "btn-fwd" };
	BtnUp = UI_CreateButton( PathBlock )[]{ class = "btn-up" };
	fbdata.PathText = PathText = UI_CreateTextbox( PathBlock )[]{ class = "path-text" };
	
	// directory tree
	// - TODO
	
	// quick access links
	// - TODO
	
	// file list
	FileScroll = UI_CreateScrollable( FileBrowser )[]{ class = "file-scroll" };
	fbdata.FileCont = FileCont = UI_CreateAutoLayout( FileScroll )[]{ class = "file-cont" };
	
	FileBrowser.setPath( @commands.path );
	
	FileBrowser.updateTheme();
	parent.addChild( FileBrowser );
	return FileBrowser;
}

