

global UI_SplitPane = {};
function UI_SplitPane.getPaneA(){ return this.data.PaneA; }
function UI_SplitPane.getPaneB(){ return this.data.PaneB; }
function UI_SplitPane.getSplit(){ return this.data.Split; }
function UI_SplitPane.getSplitFactor()
{
	data = this.data;
	return if( data.vertical, data.Split.q0x, data.Split.q0y );
}
function UI_SplitPane.setSplitFactor( split )
{
	data = this.data;
	if( !data.vertical )
	{
		data.PaneA.q1y = split;
		data.PaneB.q0y = split;
		data.Split[]{ q0y = split, q1y = split };
	}
	else
	{
		data.PaneA.q1x = split;
		data.PaneB.q0x = split;
		data.Split[]{ q0x = split, q1x = split };
	}
}

function UI_CreateSplitPane( parent, vertical, defsplit )
{
	if( defsplit === null )
		defsplit = 0.5;
	SplitPane = parent.frame.createControl( "splitpane" );
	SplitPane.class = if( vertical, "vertical", "horizontal" );
	SplitPane.data = { vertical = vertical };
	SplitPane._interface = UI_SplitPane;
	
	SplitPane.data.PaneA = PaneA = parent.frame.createControl( "pane" )[]{ class = "pane-a" };
	SplitPane.data.PaneB = PaneB = parent.frame.createControl( "pane" )[]{ class = "pane-b" };
	SplitPane.data.Split = Split = parent.frame.createControl( "split" );
	
	Split.data = { dragging = false, dragoff_x = null, dragoff_y = null };
	ocb = Split.callback;
	function Split.callback( event ) use( ocb )
	{
		data = this.data;
		if( event.type == EV_ButtonDown )
		{
			if( event.button == Mouse_ButtonL )
			{
				data.dragoff_x = ( this.rx0 + this.rx1 ) / 2 - event.x;
				data.dragoff_y = ( this.ry0 + this.ry1 ) / 2 - event.y;
				data.dragging = true;
			}
		}
		else if( event.type == EV_ButtonUp )
		{
			if( event.button == Mouse_ButtonL )
			{
				data.dragging = false;
			}
		}
		else if( event.type == EV_MouseMove )
		{
			if( data.dragging )
			{
				if( this.parent.data.vertical )
				{
					rcx = event.x + data.dragoff_x;
					pqx = this.q0x;
					pw = max( this.parent.rx1 - this.parent.rx0, 1 );
					cqx = ( rcx - this.parent.rx0 ) / pw;
					if( cqx < -this.x / pw )
						cqx = -this.x / pw;
					if( cqx > 1 - ( this.x + this.width ) / pw )
						cqx = 1 - ( this.x + this.width ) / pw;
					if( pqx != cqx )
						this.parent.setSplitFactor( cqx );
				}
				else
				{
					rcy = event.y + data.dragoff_y;
					pqy = this.q0y;
					ph = max( this.parent.ry1 - this.parent.ry0, 1 );
					cqy = ( rcy - this.parent.ry0 ) / ph;
					if( cqy < -this.y / ph )
						cqy = -this.y / ph;
					if( cqy > 1 - ( this.y + this.height ) / ph )
						cqy = 1 - ( this.y + this.height ) / ph;
					if( pqy != cqy )
						this.parent.setSplitFactor( cqy );
				}
			}
		}
		return this!ocb( event );
	}
	
	SplitPane.addChild( PaneA );
	SplitPane.addChild( PaneB );
	SplitPane.addChild( Split );
	
	SplitPane.updateTheme();
	parent.addChild( SplitPane );
	
	SplitPane.setSplitFactor( defsplit );
	return SplitPane;
}
function UI_CreateHSplitPane( parent, defsplit ){ return UI_CreateSplitPane( parent, false, defsplit ); }
function UI_CreateVSplitPane( parent, defsplit ){ return UI_CreateSplitPane( parent, true, defsplit ); }

UI_Controls.splitpane_params = ["vertical","defsplit","children_a","children_b"];
function UI_Controls.splitpane( parent, params )
{
	ctrl = UI_CreateSplitPane( parent, @params.vertical, @params.defsplit );
	UI_ConfigControl( ctrl, params );
	if( @params.children_a ) UI_BuildControls( ctrl.getPaneA(), params.children_a );
	if( @params.children_b ) UI_BuildControls( ctrl.getPaneB(), params.children_b );
}


function UI_CreateMenuPanel( parent, items )
{
	MenuPanel = parent.frame.createControl( "menupanel" );
	
	items = clone( items );
	foreach( item : items )
	{
		item.text = @item.text;
	}
	// each item can have the following used parameters
	// - text (label text)
	// - func (trigger callback, "checked" is updated before this)
	// - menu (a submenu to display on click/after some time)
	// - disabled (whether entry is a text or a line separator)
	
	MenuPanel.data = mpdata =
	{
		item_height = 24,
		side_padding = 8,
		
		items = items,
		selected = false,
		
		parent_menu = null,
		menu_open = null,
		menu_open_for = null,
	};
	
	function mpdata.recalcItemWidths( MenuPanel )
	{
		foreach( item : this.items )
			item.width = MenuPanel._cachedFont.getTextLength( item.text ) + this.side_padding * 2;
	}
	
	function mpdata.recalcItemPositions( MenuPanel )
	{
		x = 0;
		y = 0;
		rw = MenuPanel.rx1 - MenuPanel.rx0;
		foreach( item : this.items )
		{
			if( x + item.width > rw )
			{
				x = 0;
				y += this.item_height;
			}
			item.x = x + MenuPanel.rx0;
			item.y = y + MenuPanel.ry0;
			x += item.width;
		}
		MenuPanel.nonClientTop = y + this.item_height;
	}
	
	function mpdata.removeOpen()
	{
		if( this.menu_open )
		{
			mo = this.menu_open;
			mo.parent.removeChild( mo );
			this.menu_open = null;
		}
		this.menu_open_for = null;
		this.selected = false;
	}
	function mpdata.removeRecursive( cc )
	{
		while( cc && cc.type == "menu" )
		{
			pp = cc.data.parent_menu;
			cc.parent.removeChild( cc );
			cc = pp;
		}
	}
	
	mpdata.recalcItemWidths( MenuPanel );
	mpdata.recalcItemPositions( MenuPanel );
	
	ocb = MenuPanel.callback;
	function MenuPanel.callback( event ) use( ocb )
	{
		data = this.data;
		
		if( event.type == EV_Changed )
		{
			res = this!ocb( event );
			data.recalcItemPositions( this );
			this.frame.handleMouseMove();
			return res;
		}
		else if( event.type == EV_MouseMove )
		{
			data.selected = false;
			foreach( i, item : data.items )
			{
				if( event.x >= item.x && event.y >= item.y &&
					event.x < item.x + item.width && event.y < item.y + data.item_height )
				{
					data.selected = i;
				}
			}
		}
		else if( event.type == EV_ButtonDown )
		{
			sel = data.selected; // store to avoid modification from the events called
			mof = data.menu_open_for;
			data.removeOpen();
			if( sel !== false )
			{
				item = data.items[ sel ];
				if( !@item.disabled )
				{
					if( isset( item, "menu" ) )
					{
						if( sel !== mof )
						{
							data.menu_open = UI_BuildMenu( this.frame.root, item.x, item.y + data.item_height, item.menu );
							data.menu_open.index = this.index + 1;
							data.menu_open.data.parent_menu = this;
							data.menu_open_for = sel;
							this.frame.handleMouseMove();
						}
					}
					else if( isset( item, "func" ) )
						item.func();
					
					data.selected = sel; // restore
				}
			}
		}
		return this!ocb( event );
	}
	
	MenuPanel.updateTheme();
	parent.addChild( MenuPanel );
	return MenuPanel;
}

UI_Controls.menupanel_params = ["items"];
function UI_Controls.menupanel( parent, params )
{
	ctrl = UI_CreateMenuPanel( parent, @params.items );
	UI_ConfigControl( ctrl, params );
}

