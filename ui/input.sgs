

global UI_Form = {};
function UI_Form.getData(){ return this.data.getData(); }
function UI_Form.getList( name ){ return this.data.getList( name ); }
function UI_Form.getString( name ){ return this.data.getString( name ); }
function UI_Form.getLastChange(){ return this.data.changedItem, this.data.changeType; }

function UI_CreateForm( parent )
{
	Form = parent.frame.createControl( "form" );
	Form.data =
	{
		ctrls = map(),
		changedItem = null,
		changeType = null,
	};
	
	Form._interface = UI_Form;
	
	Form_data = Form.data;
	function Form_data.getData()
	{
		out = {};
		foreach( ctrl ,: this.ctrls )
		{
			val = ctrl.data.getValue();
			if( val !== null )
			{
				if( isset( out, ctrl.name ) )
					out[ ctrl.name ].push( val );
				else
					out[ ctrl.name ] = [ val ];
			}
			else
			{
				if( !isset( out, ctrl.name ) )
					out[ ctrl.name ] = [];
			}
		}
		return out;
	}
	function Form_data.getList( name )
	{
		out = [];
		foreach( ctrl ,: this.ctrls )
		{
			if( ctrl.name == name )
			{
				val = ctrl.data.getValue();
				if( val !== null )
				{
					if( typeof(val) !== "array" )
						out.push( val );
					else
						out = get_concat( out, val );
				}
			}
		}
		return out;
	}
	function Form_data.getString( name )
	{
		foreach( ctrl ,: this.ctrls )
		{
			if( ctrl.name == name )
			{
				val = ctrl.data.getValue();
				if( val !== null )
					return val;
			}
		}
		return null;
	}
	
	parent.addChild( Form );
	
	return Form;
}

function UIForm_GetFromCtrl( ctrl )
{
	while( ctrl )
	{
		if( ctrl.type == "form" )
			return ctrl;
		ctrl = ctrl.parent;
	}
	return null;
}

function UIForm_EditEvent( form, event )
{
	form.callEvent( "edit", event );
}

function UIForm_ChangeEvent( form, event )
{
	form.callEvent( "change", event );
}

function UIForm_Attach( ctrl, event )
{
	form = UIForm_GetFromCtrl( ctrl );
	if( form )
	{
		form.data.changedItem = ctrl.name;
		form.data.changeType = "add";
		form.data.ctrls[ ctrl ] = true;
		UIForm_ChangeEvent( form, event );
	}
}

function UIForm_Detach( ctrl, event )
{
	form = UIForm_GetFromCtrl( ctrl );
	if( form )
	{
		form.data.changedItem = ctrl.name;
		form.data.changeType = "remove";
		unset( form.data.ctrls, ctrl );
		UIForm_ChangeEvent( form, event );
	}
}

function UIForm_CtrlEdited( ctrl, event )
{
	form = UIForm_GetFromCtrl( ctrl );
	if( form )
	{
		form.data.changedItem = ctrl.name;
		form.data.changeType = "edit";
		UIForm_EditEvent( form, event );
	}
}

function UIForm_CtrlChanged( ctrl, event )
{
	form = UIForm_GetFromCtrl( ctrl );
	if( form )
	{
		form.data.changedItem = ctrl.name;
		form.data.changeType = "edit";
		UIForm_ChangeEvent( form, event );
	}
}

function UIForm_ControlsByName( ctrl, name )
{
	form = UIForm_GetFromCtrl( ctrl );
	if( form )
	{
		out = [];
		foreach( c ,: form.data.ctrls )
		{
			if( c.name == name )
				out.push( c );
		}
		return out;
	}
	return [];
}


function UI_CreateHidden( parent, name, value )
{
	Hidden = parent.frame.createControl( "hidden" );
	Hidden.name = name;
	Hidden.data = { value = value };
	Hidden_data = Hidden.data;
	function Hidden_data.getValue(){ return this.value; }
	function Hidden.callback( event )
	{
		if( event.type == EV_Attach )
		{
			UIForm_Attach( this, event );
		}
		else if( event.type == EV_Detach )
		{
			UIForm_Detach( this, event );
		}
	};
	return Hidden;
}


global UI_GenericToggleControl = {};

function UI_GenericToggleControl._notifyChange( event )
{
	if( event === null )
		event = UI_CreateEvent();
	this.callEvent( "change", event );
	UIForm_CtrlChanged( this, event );
}
function UI_GenericToggleControl.getChecked(){ return this.data.checked; }
function UI_GenericToggleControl.setChecked( c )
{
	c = tobool( c );
	pc = this.data.checked;
	this.data.checked = c;
	this.addRemClass( "checked", c );
	if( pc !== c )
		this._notifyChange();
}
function UI_GenericToggleControl.getValue(){ return this.data.value; }
function UI_GenericToggleControl.setValue( v )
{
	pv = this.data.value;
	this.data.value = v;
	if( pv !== v && this.data.checked )
		this._notifyChange();
}
function UI_GenericToggleControl._radioSetOnlyThis()
{
	data = this.data;
	ctrls = UIForm_ControlsByName( this, this.name );
	foreach( ctrl : ctrls )
	{
		if( ctrl.type == "radiobutton" && ctrl != this )
		{
			if( ctrl.data.checked != false )
			{
				ctrl.setChecked( false );
			}
		}
	}
	if( data.checked != true )
	{
		this.setChecked( true );
	}
}

function UI_CreateCheckbox( parent, name, value, checked )
{
	Checkbox = parent.frame.createControl( "checkbox" );
	Checkbox.name = name;
	Checkbox._interface = UI_GenericToggleControl;
	Checkbox._disableClickBubbling = true;
	Checkbox._needFocus = true;
	Checkbox.data =
	{
		checked = checked || false,
		value = value,
	};
	
	cbdata = Checkbox.data;
	Checkbox.setChecked( Checkbox.getChecked() );
	
	function cbdata.getValue(){ return if( this.value === null, if( this.checked, 1, 0 ), if( this.checked, this.value, null ) ); };
	
	orig_callback = Checkbox.callback;
	function Checkbox.callback( event ) use( orig_callback )
	{
		data = this.data;
		
		if( event.type == EV_Attach )
		{
			UIForm_Attach( this, event );
		}
		else if( event.type == EV_Detach )
		{
			UIForm_Detach( this, event );
		}
		else if( event.type == EV_Activate )
		{
			this.setChecked( !this.getChecked() );
		}
		return this!orig_callback( event );
	}
	
	Checkbox.updateTheme();
	parent.addChild( Checkbox );
	return Checkbox;
}

function UI_CreateRadioButton( parent, name, value, checked )
{
	RadioBtn = parent.frame.createControl( "radiobutton" );
	RadioBtn.name = name;
	RadioBtn._interface = UI_GenericToggleControl;
	RadioBtn._disableClickBubbling = true;
	RadioBtn._needFocus = true;
	RadioBtn.data =
	{
		checked = checked || false,
		value = if( value === null, 1, value ),
	};
	
	rbdata = RadioBtn.data;
	
	function rbdata.getValue(){ return if( this.checked, this.value, null ); };
	
	orig_callback = RadioBtn.callback;
	function RadioBtn.callback( event ) use( orig_callback )
	{
		data = this.data;
		
		if( event.type == EV_Attach )
		{
			UIForm_Attach( this, event );
		}
		else if( event.type == EV_Detach )
		{
			UIForm_Detach( this, event );
		}
		else if( event.type == EV_Activate )
		{
			this._radioSetOnlyThis();
		}
		return this!orig_callback( event );
	}
	
	RadioBtn.updateTheme();
	parent.addChild( RadioBtn );
	return RadioBtn;
}


global UI_Textbox = {};

function UI_Textbox._notifyChange( event )
{
	res = this.data.validator( this );
	if( res === true ) // VALIDATED
		;
	else if( res === false ) // NOT VALID, RESET AND DO NOT SUBMIT
	{
		this.setText( this.data.prevtext );
		return;
	}
	else // DON'T DO ANYTHING
		return;
	
	if( event === null )
		event = UI_CreateEvent();
	this.callEvent( "change", event );
	UIForm_CtrlChanged( this, event );
}
function UI_Textbox.getText(){ return this.data.text; }
function UI_Textbox.setText( text )
{
	data = this.data;
	text = tostring( if( text === null, "", text ) );
	
	data.sel_from = text.length;
	data.sel_to = text.length;
	data.offset = 0;
	data.fsel_from = null;
	data.fsel_to = null;
	data.selecting = false;
	data.chars = string_utf8_decode( text );
	pt = data.text;
	data.text = text;
	data.prevtext = text;
	this.addRemClass( "has-text", !!data.text );
	this.invalidateMe();
	if( pt !== text )
		this._notifyChange();
}

function UI_Textbox._removeCursorTimer( frame )
{
	if( this.data.cursor_timer )
		frame.clearInterval( this.data.cursor_timer );
	this.data.cursor_timer = null;
}

function UI_Textbox._resetCursorTimer( frame )
{
	tb = this;
	this._removeCursorTimer( frame );
	this.data.cursor_timer = frame.setInterval( 0.5, function() use( tb ) { tb.data.show_cursor = !tb.data.show_cursor; tb.invalidateMe(); } );
	this.data.show_cursor = true;
}

function UI_CreateTextbox( parent, name, caption, text )
{
	caption ??= "";
	text ??= "";
	text = tostring( text );
	
	Textbox = parent.frame.createControl( "textbox" );
	Textbox.name = name;
	Textbox._interface = UI_Textbox;
	Textbox._disableClickBubbling = true;
	Textbox._needFocus = true;
	Textbox.data =
	{
		border = 1,
		caption = caption,
		
		offset = 0,
		sel_from = text.length,
		sel_to = text.length,
		fsel_from = null,
		fsel_to = null,
		selecting = false,
		chars = string_utf8_decode( text ),
		text = text,
		prevtext = text,
		show_cursor = true,
		cursor_timer = null,
	};
	if( text )
		Textbox.addClass( "has-text" );
	
	tbdata = Textbox.data;
	
	function tbdata.getValue(){ return this.text; }
	
	function tbdata.validator( tb ){ return true; }
	
	function tbdata.updateSelOffsets( Textbox )
	{
		this.sel_from = max( 0, min( this.sel_from, this.chars.size ) );
		this.sel_to = max( 0, min( this.sel_to, this.chars.size ) );
		this.fsel_to = 0;
		this.fsel_from = 0;
		
		pc = null;
		for( i = 0; i < this.sel_from; ++i )
		{
			ch = this.chars[ i ];
			this.fsel_from += Textbox._cachedFont.getAdvance( pc, ch );
			pc = ch;
		}
		
		pc = null;
		for( i = 0; i < this.sel_to; ++i )
		{
			ch = this.chars[ i ];
			this.fsel_to += Textbox._cachedFont.getAdvance( pc, ch );
			pc = ch;
		}
	}
	
	function tbdata.updateText( tb )
	{
		this.text = string_utf8_encode( this.chars );
		tb.addRemClass( "has-text", !!this.text );
		tb.invalidateMe();
	}
	
	function tbdata.findOffset( ctrl, x, y )
	{
		x -= ctrl.px0 - this.offset;
		y -= ctrl.py0;
		
		fmin = 0.0;
		fmax = 0.0;
		pc = null;
		for( i = 0; i < this.chars.size; ++i )
		{
			ch = this.chars[ i ];
			fmax += ctrl._cachedFont.getAdvance( pc, ch );
			if( x <= (fmin+fmax)*0.5 )
				break;
			fmin = fmax;
			pc = ch;
		}
		return i;
	}
	
	tbdata.updateSelOffsets( Textbox );
	
	ocb = Textbox.callback;
	function Textbox.callback( event ) use( ocb )
	{
		data = this.data;
		
		if( event.type == EV_Attach )
		{
			UIForm_Attach( this, event );
		}
		if( event.type == EV_Detach )
		{
			UIForm_Detach( this, event );
			this._removeCursorTimer( this.frame );
		}
		else if( event.type == EV_ChgTheme )
		{
			data.border = @this.frame.theme.textbox_border ?? 1;
		}
		else if( event.type == EV_FocusEnter )
		{
			data.prevtext = data.text;
			this._resetCursorTimer( this.frame );
		}
		else if( event.type == EV_FocusLeave )
		{
			this._removeCursorTimer( this.frame );
			if( data.prevtext != data.text )
				this._notifyChange( event );
		}
		else if( event.type == EV_Char )
		{
			if( event.uchar > 0x1f && event.uchar != 0x7f )
			{
				if( data.sel_from == data.sel_to )
				{
					data.chars.insert( data.sel_from, event.uchar );
					data.updateText( this );
					UIForm_CtrlEdited( this, event );
					this.callEvent( "edit", event );
					data.sel_from++;
					data.sel_to++;
				}
				else
				{
					from = data.sel_from;
					to = data.sel_to;
					if( from > to )
					{
						from = data.sel_to;
						to = data.sel_from;
					}
					data.chars.erase( from, to - 1 );
					data.chars.insert( from, event.uchar );
					from++;
					data.updateText( this );
					UIForm_CtrlEdited( this, event );
					this.callEvent( "edit", event );
					data.sel_from = from;
					data.sel_to = from;
				}
				data.updateSelOffsets( this );
				this._resetCursorTimer( this.frame );
			}
		}
		else if( event.type == EV_ButtonDown )
		{
			if( event.button == Mouse_ButtonL )
			{
				data.selecting = true;
				data.sel_to = data.sel_from = data.findOffset( this, event.x, event.y );
				data.updateSelOffsets( this );
				this._resetCursorTimer( this.frame );
			}
		}
		else if( event.type == EV_MouseMove )
		{
			if( event.button == Mouse_ButtonL && data.selecting )
			{
				data.sel_to = data.findOffset( this, event.x, event.y );
				data.updateSelOffsets( this );
				this._resetCursorTimer( this.frame );
			}
		}
		else if( event.type == EV_ButtonUp )
		{
			if( event.button == Mouse_ButtonL )
				data.selecting = false;
		}
		else if( event.type == EV_KeyDown || event.type == EV_KeyUp )
		{
			key = event.key;
			mods = key & ~KeyMod_Filter;
			key &= KeyMod_Filter;
			down = event.type == EV_KeyDown;
			
			if( down )
			{
				if( key == Key_Left || key == Key_Right )
				{
					if( data.sel_from == data.sel_to || mods & KeyMod_Shift )
						data.sel_to = data.sel_to + if( key == Key_Right, 1, -1 );
					else
						data.sel_to = if( key == Key_Left, min( data.sel_from, data.sel_to ), max( data.sel_from, data.sel_to ) );
					if( !( mods & KeyMod_Shift ) )
						data.sel_from = data.sel_to;
					data.updateSelOffsets( this );
					this._resetCursorTimer( this.frame );
				}
				else if( key == Key_DelLeft || key == Key_DelRight )
				{
					if( data.sel_from != data.sel_to )
					{
						from = data.sel_from;
						to = data.sel_to;
						if( from > to )
						{
							from = data.sel_to;
							to = data.sel_from;
						}
						data.chars.erase( from, to - 1 );
						data.sel_from = from;
						data.sel_to = from;
					}
					else if( key == Key_DelLeft && data.sel_from > 0 )
					{
						data.chars.erase( data.sel_from - 1 );
						data.sel_from--;
						data.sel_to--;
					}
					else if( key == Key_DelRight && data.sel_from < data.chars.size )
					{
						data.chars.erase( data.sel_from );
					}
					data.updateText( this );
					UIForm_CtrlEdited( this, event );
					this.callEvent( "edit", event );
					data.updateSelOffsets( this );
					this._resetCursorTimer( this.frame );
				}
				else if( key == Key_Cut || key == Key_Copy )
				{
					if( this.frame.clipboard_func )
					{
						from = data.sel_from;
						to = data.sel_to;
						if( from > to )
						{
							from = data.sel_to;
							to = data.sel_from;
						}
						this.frame.clipboard_func( string_part( data.text, from, to - from ) );
						if( key == Key_Cut )
						{
							data.chars.erase( from, to - 1 );
							data.sel_from = from;
							data.sel_to = from;
						}
						data.updateText( this );
						UIForm_CtrlEdited( this, event );
						this.callEvent( "edit", event );
						data.updateSelOffsets( this );
						this._resetCursorTimer( this.frame );
					}
				}
				else if( key == Key_Paste )
				{
					if( this.frame.clipboard_func )
					{
						if( data.sel_from != data.sel_to )
						{
							from = data.sel_from;
							to = data.sel_to;
							if( from > to )
							{
								from = data.sel_to;
								to = data.sel_from;
							}
							data.chars.erase( from, to - 1 );
							data.sel_from = from;
							data.sel_to = from;
						}
						
						text = this.frame.clipboard_func();
						at = data.sel_from;
						utext = string_utf8_decode( text );
						data.chars = get_concat( data.chars.part( 0, at ), utext, data.chars.part( at ) );
						data.sel_from = data.sel_to = at + utext.size;
						data.updateText( this );
						UIForm_CtrlEdited( this, event );
						this.callEvent( "edit", event );
						data.updateSelOffsets( this );
						this._resetCursorTimer( this.frame );
					}
				}
				else if( key == Key_SelectAll )
				{
					data.sel_from = 0;
					data.sel_to = data.chars.size;
					data.updateSelOffsets( this );
					this._resetCursorTimer( this.frame );
				}
				else if( key == Key_Enter )
				{
					this.frame.setFocus( null );
					this.callEvent( "submit", event );
				}
			}
		}
		
		return this!ocb( event );
	}
	
	Textbox.updateTheme();
	parent.addChild( Textbox );
	return Textbox;
}


global UI_Slider = {};

function UI_Slider._notifyChange( event, edited )
{
	if( event === null )
		event = UI_CreateEvent();
	if( edited )
	{
		this.callEvent( "edit", event );
		UIForm_CtrlEdited( this, event );
	}
	else
	{
		this.callEvent( "change", event );
		UIForm_CtrlChanged( this, event );
	}
}

function UI_Slider._changeValue( value, event )
{
	data = this.data;
	prev = data.value;
	
	// snap the value
	if( data.stopsize )
	{
		value -= data.vmin;
		value /= data.stopsize;
		value = round( value );
		value *= data.stopsize;
		value += data.vmin;
	}
	
	// clamp it
	if( value < data.vmin ) value = data.vmin;
	if( value > data.vmax ) value = data.vmax;
	
	// apply
	data.value = value;
	if( data.vmin >= data.vmax )
		data.position = 0;
	else
		data.position = ( value - data.vmin ) / ( data.vmax - data.vmin );
	
	if( !data.vertical )
		data.Handle[]{ q0x = data.position, q1x = data.position };
	else
		data.Handle[]{ q0y = data.position, q1y = data.position };
	
	if( prev != value )
		this._notifyChange( event, true );
}

function UI_Slider._updatePosData( dx, dy, event )
{
	data = this.data;
	Rail = data.Rail;
	if( !data.vertical )
	{
		pmin = Rail.px0;
		pmax = Rail.px1;
		q = ( dx + data.dragoff_x - pmin ) / if( pmax > pmin + 0.0001, pmax - pmin, 0.0001 );
	}
	else
	{
		pmin = Rail.py0;
		pmax = Rail.py1;
		q = ( dy + data.dragoff_y - pmin ) / if( pmax > pmin + 0.0001, pmax - pmin, 0.0001 );
	}
	q = if( q < 0, 0, if( q > 1, 1, q ) );
	this._changeValue( data.vmin * (1-q) + data.vmax * q, event );
}

function UI_Slider._startDragging( cx, cy, onrail )
{
	data = this.data;
	data.dragging = true;
	(px,py) = this.getMarkerPos();
	data.dragoff_x = px - cx;
	data.dragoff_y = py - cy;
	if( onrail )
	{
		if( !data.vertical )
			data.dragoff_x = 0;
		else
			data.dragoff_y = 0;
	}
	data.prev_value = data.value;
	this._updatePosData( cx, cy );
}

function UI_Slider._stopDragging( event )
{
	data = this.data;
	if( !data.dragging )
		return;
	data.dragging = false;
	if( data.prev_value != data.value )
		this._notifyChange( event );
}

function UI_Slider.getValue(){ return this.data.value; }

function UI_Slider.setValue( value, event )
{
	prev = this.data.value;
	this._changeValue( value, event );
	if( prev !== this.data.value )
		this._notifyChange( event );
}

function UI_Slider.setLimits( vmin, vmax, stopsize )
{
	stopsize ||= 0;
	data = this.data;
	data.vmin = vmin;
	data.vmax = vmax;
	data.stopsize = stopsize;
	
	this.setValue( data.value );
}

function UI_Slider.getMarkerPos()
{
	Handle = this.data.Handle;
	return ( Handle.rx0 + Handle.rx1 ) * 0.5, ( Handle.ry0 + Handle.ry1 ) * 0.5;
}

function UI_CreateSlider( parent, name, vmin, vmax, stopsize, vertical, value )
{
	vmin = if( vmin !== null, vmin, 0.0 );
	vmax = if( vmax !== null, vmax, 1.0 );
	
	Slider = parent.frame.createControl( "slider" );
	Slider.name = name;
	Slider._interface = UI_Slider;
	Slider._disableClickBubbling = true;
	Slider._needFocus = true;
	Slider.class = if( vertical, "vertical", "horizontal" );
	Slider.data = Slider_data =
	{
		prev_value = null,
		value = if( value !== null, value, vmin ),
		vmin = 0.0,
		vmax = 0.0,
		stopsize = 0.0,
		position = 0.0,
		vertical = vertical,
		
		dragging = false,
		dragoff_x = 0,
		dragoff_y = 0,
	};
	function Slider_data.getValue(){ return this.value; }
	
	Slider_data.Rail = Rail = UI_CreateStatic( Slider )[]{ class = "sdr-rail", _clientRectFromPadded = true };
	Slider_data.Handle = Handle = UI_CreateButton( Rail )[]{ class = "sdr-handle", _disableClickBubbling = false };
	
	ocb = Slider.callback;
	function Slider.callback( event ) use( ocb )
	{
		data = this.data;
		if( event.type == EV_Attach )
		{
			UIForm_Attach( this, event );
		}
		else if( event.type == EV_Detach )
		{
			UIForm_Detach( this, event );
		}
		else if( event.type == EV_MouseMove )
		{
			if( data.dragging )
				this._updatePosData( event.x, event.y, event );
		}
		else if( event.type == EV_ButtonDown )
		{
			if( event.button == Mouse_ButtonL && ( data.Rail.mouseOn || data.Handle.mouseOn ) )
				this._startDragging( event.x, event.y, !data.Handle.mouseOn );
		}
		else if( event.type == EV_ButtonUp )
		{
			if( event.button == Mouse_ButtonL )
				this._stopDragging( event );
		}
		return this!ocb( event );
	}
	
	Slider.setLimits( vmin, vmax, stopsize );
	
	Slider.updateTheme();
	parent.addChild( Slider );
	return Slider;
}


global UI_GenericSelectionControl = {};

function UI_GenericSelectionControl._initialize( items, value )
{
	this.data.selectedValue = value;
	this.setOptions( items );
}

// supports array[string], array[{text,value}], {value=text}
function UI_GenericSelectionControl.setOptions( items )
{
	options = [];
	foreach( key, item : items )
	{
		if( is_array( items ) )
		{
			// array with string / dict keys
			if( typeid( item ) == VT_STRING )
				options.push({ value = item, text = item });
			else if( @item.text )
				options.push({ value = @item.value || item.text, text = item.text });
		}
		else
		{
			options.push({ value = key, text = tostring( item ) });
		}
	}
	data = this.data;
	data.options = options;
	cnt = options.size;
	this.addRemClass( "no-options", cnt == 0 );
	this.addRemClass( "one-option", cnt == 1 );
	this.addRemClass( "two-options", cnt == 2 );
	this.addRemClass( "more-than-two-options", cnt > 2 );
	this.setValue( data.selectedValue );
}

function UI_GenericSelectionControl.setValue( value, event )
{
	foreach( i, opt : this.data.options )
	{
		if( opt.value === value )
			return this.selectIndex( i );
	}
	return this.selectIndex( 0 );
}

function UI_GenericSelectionControl.selectIndex( id, event )
{
	id = parseint( id );
	if( id === null )
		return WARNING( "ID must be an integer" );
	
	data = this.data;
	if( id < 0 || id >= data.options.size )
		id = 0;
	pvalue = data.selectedValue;
	if( data.options.size )
	{
		this._setCaption( data.options[ id ].text );
		data.selectedIndex = id;
		data.selectedValue = data.options[ id ].value;
	}
	else
	{
		this._setCaption( "" );
		data.selectedIndex = -1;
		data.selectedValue = null;
	}
	
	if( pvalue !== data.selectedValue )
	{
		if( event === null )
			event = UI_CreateEvent();
		UIForm_CtrlChanged( this, event );
		this.callEvent( "change", event );
	}
}

function UI_GenericSelectionControl.selectPrev( event )
{
	data = this.data;
	return this.selectIndex( ( data.selectedIndex + data.options.size - 1 ) % data.options.size, event );
}

function UI_GenericSelectionControl.selectNext( event )
{
	data = this.data;
	return this.selectIndex( ( data.selectedIndex + 1 ) % data.options.size, event );
}


global UI_SwitchButton = clone( UI_GenericSelectionControl );

function UI_SwitchButton._setCaption( text )
{
	this.data.btn_main.caption = text;
}

function UI_CreateSwitchButton( parent, name, options, sidebuttons, value )
{
	sidebuttons ||= false;
	SwitchButton = parent.frame.createControl( "switchbutton" );
	SwitchButton.name = name;
	SwitchButton.data =
	{
		btn_main = null,
		btn_prev = null,
		btn_next = null,
		getValue = function SwitchButton_data_getValue(){ return this.selectedValue; },
	};
	SwitchButton._interface = UI_SwitchButton;
	SwitchButton._disableClickBubbling = true;
	SwitchButton._needFocus = true;
	SwitchButton.data.btn_main = UI_CreateButton( SwitchButton, true ).addClass( "main-button" ).bindEvent( "click", function( e )
	{
		if( e.button == Mouse_ButtonL )
			this.parent.selectNext();
		else
			this.parent.selectPrev();
	});
	if( sidebuttons )
	{
		SwitchButton.addClass( "has-side-buttons" );
		SwitchButton.data.btn_prev = UI_CreateButton( SwitchButton )[]{ caption = "<", class = "side-button prev" }.bindEvent( "click", function(){ this.parent.selectPrev(); } );
		SwitchButton.data.btn_next = UI_CreateButton( SwitchButton )[]{ caption = ">", class = "side-button next" }.bindEvent( "click", function(){ this.parent.selectNext(); } );
	}
	
	SwitchButton._initialize( options, value );
	
	ocb = SwitchButton.callback;
	function SwitchButton.callback( event ) use( ocb )
	{
		if( event.type == EV_Attach )
		{
			UIForm_Attach( this, event );
		}
		else if( event.type == EV_Detach )
		{
			UIForm_Detach( this, event );
		}
		else if( event.type == EV_ButtonDown && event.button != Mouse_ButtonL )
		{
			this.frame.setFocus( this );
			return;
		}
		return this!ocb( event );
	}
	
	SwitchButton.updateTheme();
	parent.addChild( SwitchButton );
	return SwitchButton;
}


global UI_SelectBox = clone( UI_GenericSelectionControl );

function UI_SelectBox._setCaption( text )
{
	this.caption = text;
}

function UI_CreateSelectBox( parent, name, options, value )
{
	SelectBox = parent.frame.createControl( "selectbox" );
	SelectBox._interface = UI_SelectBox;
	SelectBox.data =
	{
		lbmenu = null,
	};
	SelectBox.name = name;
	SelectBox._disableClickBubbling = true;
	SelectBox._needFocus = true;
	
	orig_callback = SelectBox.callback;
	SelectBoxData = SelectBox.data;
	
	function SelectBoxData.getValue(){ return this.selectedValue; }
	
	function SelectBox.callback( event ) use( orig_callback )
	{
		data = this.data;
		if( event.type == EV_Attach )
		{
			UIForm_Attach( this, event );
		}
		else if( event.type == EV_Detach )
		{
			UIForm_Detach( this, event );
		}
		else if( event.type == EV_ButtonDown && event.button != Mouse_ButtonL )
		{
			this.frame.setFocus( this );
			return;
		}
		return this!orig_callback( event );
	}
	
	SelectBox.bindEvent( "click", function SelectBox_click_event()
	{
		data = this.data;
		sbox = this;
		
		if( data.lbmenu )
		{
			data.lbmenu.destroy(true);
			data.lbmenu = null;
			this.removeClass( "open" );
			return;
		}
		
		function sb_popup_remove_cb() use( sbox )
		{
			sbox.data.lbmenu = null;
			sbox.removeClass( "open" );
		}
		data.lbmenu = lbmenu = UI_CreateListBoxMenu( this.frame.root, sb_popup_remove_cb )[]
		{
			x = this.rx0,
			y = this.ry1,
			width = this.rx1 - this.rx0,
		}
		.addClass( "select-list" );
		this.addClass( "open" );
		
		function sb_lbfunc( e ) use( sbox )
		{
			sbox.selectIndex( sbox.data.lbmenu.getIDFromControl( this ), e );
			sbox.data.lbmenu.destroy(true);
			sbox.data.lbmenu = null;
			sbox.removeClass( "open" );
		}
		
		foreach( item : data.options )
			lbmenu.addOption( item, sb_lbfunc );
		lbmenu.refit();
	});
	
	SelectBox._initialize( options, value );
	
	SelectBox.updateTheme();
	parent.addChild( SelectBox );
	return SelectBox;
}


global UI_IntegerBox = {};

function UI_IntegerBox.getValue(){ return toint( this.data.Textbox.getText() ); }

function UI_IntegerBox.setValue( i )
{
	this.data.Textbox.setText( toint( i ) );
}

function UI_IntegerBox.increment()
{
	this.setValue( this.getValue() + 1 );
}

function UI_IntegerBox.decrement()
{
	this.setValue( this.getValue() - 1 );
}

function UI_CreateIntegerBox( parent, name, value )
{
	value = toint( value );
	
	IntegerBox = parent.frame.createControl( "integerbox" )[]{ name = name };
	IntegerBox.data = {};
	IntegerBox._interface = UI_IntegerBox;
	
	IntegerBox.data.SliderBtnAdd = SliderBtnAdd = UI_CreateButton( IntegerBox )[]{ class = "slider-btn add" };
	IntegerBox.data.SliderBtnSub = SliderBtnSub = UI_CreateButton( IntegerBox )[]{ class = "slider-btn sub" };
	
	SliderBtnAdd.bindEvent( "click", function(){ this.parent.increment(); } );
	SliderBtnSub.bindEvent( "click", function(){ this.parent.decrement(); } );
	
	IntegerBox.addChild( SliderBtnAdd );
	IntegerBox.addChild( SliderBtnSub );
	
	IntegerBox.data.Textbox = Textbox = UI_CreateTextbox( IntegerBox, name, "", value );
	Textbox_data = Textbox.data;
	Textbox_validator = Textbox_data.validator;
	function Textbox_data.validator( tb ) use( Textbox_validator )
	{
		curstr = tb.getText();
		intstr = tostring( toint( curstr ) );
		if( curstr != intstr )
			tb.setText( intstr );
		return true;
	}
	Textbox.bindEvent( "edit", function(e){ this.parent.callEvent( "edit", e ); } );
	Textbox.bindEvent( "change", function(e){ this.parent.callEvent( "change", e ); } );
	
	IntegerBox.updateTheme();
	parent.addChild( IntegerBox );
	return IntegerBox;
}

