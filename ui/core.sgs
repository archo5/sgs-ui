
global UI_Static = {};

function UI_CreateStatic( parent )
{
	Static = parent.frame.createControl( "static" );
	Static.data = {};
	Static._interface = UI_Static;
	
	Static.updateTheme();
	parent.addChild( Static );
	return Static;
}

UI_Controls.static_params = [];
function UI_Controls.static( parent, params )
{
	ctrl = UI_CreateStatic( parent );
	UI_ConfigControl( ctrl, params );
}


global
	UI_ImageScale_None    = 1,
	UI_ImageScale_Stretch = -1,
	UI_ImageScale_Fit     = -2,
	UI_ImageScale_Crop    = -3;

function UI_CreateImage( parent, src, scale, align_x, align_y )
{
	Image = parent.frame.createControl( "image" );
	Image.image = src;
	Image.data =
	{
		scale = if( scale !== null, scale, UI_ImageScale_None ),
		align_x = if( align_x !== null, align_x, 0.5 ),
		align_y = if( align_y !== null, align_y, 0.5 ),
	};
	
	Image.updateTheme();
	parent.addChild( Image );
	return Image;
}

UI_Controls.image_params = ["src","scale","align_x","align_y"];
function UI_Controls.image( parent, params )
{
	ctrl = UI_CreateImage( parent, @params.src, @params.scale, @params.align_x, @params.align_y );
	UI_ConfigControl( ctrl, params );
}


function UI_CreateButton( parent, rclick )
{
	Button = parent.frame.createControl( "button" );
	Button.data = { rclick = !!rclick };
	
	ocb = Button.callback;
	function Button.callback( event ) use( ocb )
	{
		if( event.type == EV_NeedFocus )
			return 1;
		else if( event.type == EV_ButtonDown && event.button != Mouse_ButtonL && ( !this.data.rclick || event.button != Mouse_ButtonR ) )
		{
			this.frame.setFocus( this );
			return 0;
		}
		else if( event.type == EV_ButtonUp && event.button != Mouse_ButtonL && ( !this.data.rclick || event.button != Mouse_ButtonR ) )
			return 0;
		return this!ocb( event );
	}
	
	Button.updateTheme();
	parent.addChild( Button );
	return Button;
}

UI_Controls.button_params = [];
function UI_Controls.button( parent, params )
{
	ctrl = UI_CreateButton( parent );
	UI_ConfigControl( ctrl, params );
}


function UI_CreateImageButton( parent, image, scale, align_x, align_y )
{
	Button = UI_CreateButton( parent );
	UI_CreateImage( Button, image, scale, align_x, align_y );
	return Button;
}

UI_Controls.imagebutton_params = ["image","scale","align_x","align_y"];
function UI_Controls.imagebutton( parent, params )
{
	ctrl = UI_CreateImageButton( parent, @params.image, @params.scale, @params.align_x, @params.align_y );
	UI_ConfigControl( ctrl, params );
}


function UI_CreateScrollbar( parent, vertical, space, window, position )
{
	space ||= 0;
	auto_window = if( window, false, true );
	window ||= 0;
	position ||= 0;
	
	Scroll = parent.frame.createControl( "scrollbar" );
	Scroll.addClass( if( vertical, "vertical", "horizontal" ) );
	Scroll.data =
	{
		button_size = 0,
		move_step = 32,
		min_scroll_length = 16,
		
		vertical = vertical,
		space = space,
		window = window,
		position = position,
		auto_window = auto_window,
	};
	
	bsize = Scroll.data.button_size;
	
	scroll_length = window - bsize * 2;
	bar_pos = if( space, scroll_length * position / space, 0 );
	bar_length = if( space, scroll_length * window / space, scroll_length );
	
	btnUP = UI_CreateButton( Scroll )[]{ class = "btn-back" };
	btnDN = UI_CreateButton( Scroll )[]{ class = "btn-fwd" };
	btnCS = UI_CreateButton( Scroll )[]{ class = "btn-slider" };
	
	Scrollbar_data = Scroll.data;
	function Scrollbar_data.moveRel( dist, Scroll, btnCS )
	{
		opos = this.position;
		this.position += dist;
		maxpos = this.space - this.window;
		if( maxpos < 0 ) maxpos = 0;
		if( this.position < 0 ) this.position = 0;
		if( this.position > maxpos ) this.position = maxpos;
		
		if( this.vertical )
		{
			scroll_length = Scroll.ry1 - Scroll.ry0 - this.button_size * 2;
			btnCS.y = this.button_size + if( this.space, scroll_length * this.position / this.space, 0 );
		}
		else
		{
			scroll_length = Scroll.rx1 - Scroll.rx0 - this.button_size * 2;
			btnCS.x = this.button_size + if( this.space, scroll_length * this.position / this.space, 0 );
		}
		
		Scroll.frame.handleMouseMove();
		
		if( opos != this.position )
		{
			e = UI_CreateEvent();
			if( this.vertical )
				e.y = this.position;
			else
				e.x = this.position;
			Scroll.callEvent( "change", e );
		}
	}
	function Scrollbar_data.moveToAbs( coord, Scroll, btnCS )
	{
		if( this.vertical )
		{
			rcoord = coord - Scroll.ry0 - this.button_size;
			movelen = Scroll.ry1 - Scroll.ry0 - this.button_size * 2 - btnCS.height;
		}
		else
		{
			rcoord = coord - Scroll.rx0 - this.button_size;
			movelen = Scroll.rx1 - Scroll.rx0 - this.button_size * 2 - btnCS.width;
		}
		np = 0;
		if( movelen )
			np = rcoord / movelen * ( this.space - this.window );
		this.moveRel( np - this.position, Scroll, btnCS );
	}
	
	/* parent = Scroll */
	btnUP.bindEvent( "click", function() use( btnCS ){ parent.data.moveRel( -parent.data.move_step, parent, btnCS ); } );
	btnDN.bindEvent( "click", function() use( btnCS ){ parent.data.moveRel( parent.data.move_step, parent, btnCS ); } );
	
	scroll_orig_callback = Scroll.callback;
	function Scroll.callback( event ) use( scroll_orig_callback, btnCS )
	{
		data = this.data;
		if( event.type == EV_Layout )
		{
			ret = this!scroll_orig_callback( event );
			
			scroll_length = if( data.vertical, this.ry1 - this.ry0, this.rx1 - this.rx0 );
			if( data.auto_window )
				data.window = scroll_length;
			
			scroll_length -= data.button_size * 2;
			scroll_length = max( scroll_length, data.min_scroll_length );
			bar_pos = 0;
			bar_length = scroll_length;
			if( data.space )
			{
				bar_pos = scroll_length * data.position / data.space;
				bar_length = scroll_length * data.window / data.space;
				
				orig_bar_pos = bar_pos;
				if( bar_length > scroll_length )
					bar_length = scroll_length;
				if( bar_pos + bar_length > scroll_length )
					bar_pos = scroll_length - bar_length;
				if( bar_pos < 0 )
					bar_pos = 0;
			//	println(bar_pos,"//",bar_length,"///",scroll_length," - ",data.window,"//",data.space);
				if( bar_pos != orig_bar_pos )
				{
			//		println(bar_pos,",",orig_bar_pos);
					data.moveRel( 0, this, btnCS );
					ret = this!scroll_orig_callback( event );
				}
			}
			
			if( data.vertical )
			{
				btnCS.y = bar_pos + data.button_size;
				btnCS.height = bar_length;
			}
			else
			{
				btnCS.x = bar_pos + data.button_size;
				btnCS.width = bar_length;
			}
			
			return ret;
		}
		else if( event.type == EV_ChgTheme )
		{
			data.button_size = first_non_null( @this.frame.theme.scroll_button_size, 0 );
		}
		else if( event.type == EV_ButtonDown )
		{
			if( event.button == Mouse_ButtonL && !btnCS.mouseOn )
				data.moveToAbs( if( data.vertical, event.y - btnCS.height / 2, event.x - btnCS.width / 2 ), this, btnCS );
		}
		else if( event.type == EV_MouseMove )
		{
			if( btnCS.clicked )
			{
				abspos = if( data.vertical, event.y - this.frame.getClickOffsetY( event.button ), event.x - this.frame.getClickOffsetX( event.button ) );
				data.moveToAbs( abspos, this, btnCS );
			}
		}
		else if( event.type == EV_MouseWheel )
		{
			data.moveRel( event.y * data.min_scroll_length, this, btnCS );
			return 0; // stop bubbling
		}
		return this!scroll_orig_callback( event );
	}
	
	Scroll.updateTheme();
	
	parent.addChild( Scroll );
	
	return Scroll;
}

function UI_CreateHScrollbar( parent, space, window, position ){ return UI_CreateScrollbar( parent, false, space, window, position ); }
function UI_CreateVScrollbar( parent, space, window, position ){ return UI_CreateScrollbar( parent, true, space, window, position ); }


function UI_BuildMenu( parent, x, y, items, default )
{
	Menu = parent.frame.createControl( "menu" );
	Menu.x = x - parent.x;
	Menu.y = y - parent.y;
	Menu.topmost = true;
	
	items = clone( items );
	// each item can have the following used parameters
	// - text (label text)
	// - info (info text, usually shortcut key info)
	// - func (trigger callback, "checked" is updated before this)
	// - menu (a submenu to display on click/after some time)
	// - icon (whatever the renderfunc will understand)
	// - checked (null/true/false)
	// - disabled (whether entry is a text or a line separator)
	
	Menu.data =
	{
		item_width = 200,
	//	item_min_width = 200,
	//	item_height = 24,
	//	sep_height = 8,
	//	item_spacing = 0,
	//	menu_padding = 4,
		items = items,
		selected = false,
		
		parent_menu = null,
		menu_open = null,
		menu_open_for = null,
		
		icon_submenu = SS_CreateTexture( "icons/resultset_next.png" ),
	};
	
	if( default !== null && default >= 0 && default < items.size )
		Menu.data.selected = default;
	
	menudata = Menu.data;
	
	function menudata.removeOpen()
	{
		if( this.menu_open )
		{
			mo = this.menu_open;
			mo.parent.removeChild( mo );
			this.menu_open = null;
		}
		this.menu_open_for = null;
	}
	function menudata.removeRecursive( cc )
	{
		while( cc && cc.type == "menu" )
		{
			pp = cc.data.parent_menu;
			cc.parent.removeChild( cc );
			cc = pp;
		}
		if( cc && cc.type == "menupanel" )
			cc.data.removeOpen();
	}
	
	ocb = Menu.callback;
	function Menu.callback( event ) use( ocb )
	{
		data = this.data;
		
		if( event.type == EV_Detach )
		{
			if( data.parent_menu )
			{
				if( data.parent_menu.data.menu_open == this )
					data.parent_menu.data.menu_open = null;
				data.parent_menu = null;
			}
			data.removeOpen();
		}
		else if( event.type == EV_HitTest )
		{
			// definite hit if hit self..
			if( this!ocb( event ) )
				return 1;
			// possible hit if hit parent..
			if( this.parent && this.parent.callback( event ) )
			{
				// but only if there's no parent menu or we haven't hit that
				pp = data.parent_menu;
				hit = 1;
				while( pp && ( pp.type == "menu" || pp.type == "menupanel" ) )
				{
					if( pp!ocb( event ) )
					{
						hit = 0;
						break;
					}
					pp = pp.data.parent_menu;
				}
				return hit;
			}
			return 0;
		}
		else if( event.type == EV_Layout )
		{
			ht = 0;
			foreach( i, item : data.items )
			{
				if( i )
					ht += data.item_spacing;
				if( @item.disabled && @item.text === null )
					ht += data.sep_height;
				else
					ht += data.item_height;
			}
			mp2 = data.menu_padding * 2;
			this.width = data.item_width + mp2;
			this.height = ht + mp2;
		}
		else if( event.type == EV_ChgTheme )
		{
			theme = this.frame.theme;
			data.item_min_width = first_non_null( @theme.menu_item_min_width, 200 );
			data.item_height = first_non_null( @theme.menu_item_height, 24 );
			data.sep_height = first_non_null( @theme.menu_sep_height, 8 );
			data.item_spacing = first_non_null( @theme.menu_item_spacing, 0 );
			data.menu_padding = first_non_null( @theme.menu_padding, 4 );
			return 1;
		}
		else if( event.type == EV_MouseMove )
		{
			data.selected = false;
			x0 = this.rx0 + data.menu_padding;
			x1 = x0 + data.item_width;
			if( x0 <= event.x && x1 > event.x )
			{
				y0 = this.ry0 + data.menu_padding;
				for( i = 0; i < data.items.size; ++i )
				{
					item = data.items[ i ];
					if( @item.disabled && @item.text === null )
						ht = data.sep_height;
					else
						ht = data.item_height;
					
					y1 = y0 + ht;
					if( !( @item.disabled && @item.text === null ) && event.y >= y0 && event.y < y1 )
					{
						data.selected = i;
						break;
					}
					
					y0 = y1 + data.item_spacing;
				}
			}
			if( data.parent_menu )
			{
				hitevent = UI_CreateEvent();
				hitevent.type = EV_HitTest;
				hitevent.x = event.x;
				hitevent.y = event.y;
				if( this!ocb( hitevent ) )
					data.parent_menu.data.selected = data.parent_menu.data.menu_open_for;
			}
		}
		else if( event.type == EV_MouseLeave )
		{
			data.selected = false;
			return false;
		}
		else if( event.type == EV_ButtonDown )
		{
			hitevent = UI_CreateEvent();
			hitevent.type = EV_HitTest;
			hitevent.x = event.x;
			hitevent.y = event.y;
			if( this.callback( hitevent ) && !this!ocb( hitevent ) )
				data.removeRecursive( this );
			return true;
		}
		else if( event.type == EV_ButtonUp )
		{
			sel = data.selected; // store to avoid modification from the events called
			mof = data.menu_open_for;
			data.removeOpen();
			if( sel !== false )
			{
				item = data.items[ sel ];
				if( !@item.disabled )
				{
					if( isset( item, "menu" ) )
					{
						if( sel !== mof )
						{
							my = this.ry0;
							for( i = 0; i < sel; ++i )
							{
								it2 = data.items[ i ];
								if( @it2.disabled && @it2.text === null )
									ht = data.sep_height;
								else
									ht = data.item_height;
								my += ht + data.item_spacing;
							}
							data.menu_open = UI_BuildMenu( this.frame.root, this.rx1 - 4, my, item.menu );
							data.menu_open.index = this.index + 1;
							data.menu_open.data.parent_menu = this;
							data.menu_open_for = sel;
							this.frame.handleMouseMove();
						}
					}
					else if( isset( item, "func" ) )
						item.func();
					
					if( !isset( item, "menu" ) )
						data.removeRecursive( this );
					else
						data.selected = sel; // restore
				}
			}
			return true;
		}
		
		return this!ocb( event );
	}
	
	Menu.updateTheme();
	
	parent.addChild( Menu );
	parent.frame.handleMouseMove();
	
	return Menu;
}

