
global SS_UI_Theme_Default =
{
	stylesheet = UI_BuildStyleSheet
	({
		"" = { fontSize = 11 },
		// - core
		"static" =
		{
			textColor = UIColor( 0.1, 1 ),
			backgroundColor = UIColor( 0.5, 1 ),
			halign = UI_Align_Center,
			valign = UI_Align_VCenter,
			renderfunc = function SS_UI_Theme_Default_static_renderfunc()
			{
				text = this.caption;
				
				c = this.backgroundColor;
				SS_DrawColorRect( this.cx0, this.cy0, this.cx1, this.cy1, c.r, c.g, c.b, c.a );
				
				if( text )
				{
					SS_DrawTextRect( text, this._cachedFont, SS_UI_ConvertColor( this.textColor ), SS_UI_ConvertAlignment( this.halign, this.valign ), this.px0, this.px1, this.py0, this.py1 );
				}
			}
		},
		"button" =
		{
			textColor = UIColor( 1, 1 ),
			renderfunc = function SS_UI_Theme_Default_button_renderfunc()
			{
				if( this.rx0 == this.rx1 || this.ry0 == this.ry1 )
					return;
				theme = this.frame.theme;
				button_render_bgr = theme.button_render_bgr;
				button_render_contents = theme.button_render_contents;
				this!button_render_bgr();
				this!button_render_contents();
			}
		},
		"image" =
		{
			renderfunc = function Image.renderfunc()
			{
				data = this.data;
				scale = data.scale;
				
				if( !this._cachedImage )
					return;
				
				W = this.rx1 - this.rx0;
				H = this.ry1 - this.ry0;
				IW = this._cachedImage.width;
				IH = this._cachedImage.height;
				IW = if( IW >= 1, IW, 1 );
				IH = if( IH >= 1, IH, 1 );
				
				if( scale === UI_ImageScale_Stretch )
				{
					xscale = W / IW;
					yscale = H / IH;
				}
				else if( scale === UI_ImageScale_Crop )
				{
					xscale = W / IW;
					yscale = H / IH;
					if( xscale > yscale )
						yscale = xscale;
					else
						xscale = yscale;
				}
				else if( scale === UI_ImageScale_Fit )
				{
					xscale = W / IW;
					yscale = H / IH;
					if( xscale > yscale )
						xscale = yscale;
					else
						yscale = xscale;
				}
				else
				{
					xscale = scale;
					yscale = scale;
				}
				
				realsize_x = round( IW * xscale );
				realsize_y = round( IH * yscale );
				
				off_x = round( ( W - realsize_x ) * data.align_x );
				off_y = round( ( H - realsize_y ) * data.align_y );
				
				if( this.frame.pushScissorRect( this.rx0, this.ry0, this.rx1, this.ry1 ) )
				{
					X = this.rx0 + off_x;
					Y = this.ry0 + off_y;
					SS_Draw({ preset = "tile", texture = this._cachedImage, position = vec2(X,Y), scale = vec2(realsize_x,realsize_y) });
					
					this.frame.popScissorRect();
				}
			}
		},
		"scrollbar" =
		{
			padding = 1,
			renderfunc = function SS_UI_Theme_Default_scroll_renderfunc()
			{
				SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.ry1, 0.8, 0.8, 0.8, 1 );
				SS_DrawColorRect( this.px0, this.py0, this.px1, this.py1, 0.7, 0.7, 0.7, 1 );
			}
		},
		/* 0000 -> button size */
		"scrollbar.vertical .btn-back" = { height = 0000, anchorMode = UI_Anchor_Hor | UI_Anchor_Top, icon = "icons/arrow_up.png" },
		"scrollbar.vertical .btn-fwd" = { height = 0000, anchorMode = UI_Anchor_Hor | UI_Anchor_Bottom, icon = "icons/arrow_down.png" },
		"scrollbar.vertical .btn-slider" = { anchorMode = UI_Anchor_Hor },
		"scrollbar.horizontal .btn-back" = { width = 0000, anchorMode = UI_Anchor_Vert | UI_Anchor_Left, icon = "icons/arrow_left.png" },
		"scrollbar.horizontal .btn-fwd" = { width = 0000, anchorMode = UI_Anchor_Vert | UI_Anchor_Right, icon = "icons/arrow_right.png" },
		"scrollbar.horizontal .btn-slider" = { anchorMode = UI_Anchor_Vert },
		"menu" =
		{
			renderfunc = function SS_UI_Theme_Default_menu_renderfunc()
			{
				data = this.data;
				
				pad = data.menu_padding;
				
				SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.ry1, 0.8, 0.8, 0.8, 1 );
				SS_DrawColorRect( this.rx0+pad, this.ry0+pad, this.rx1-pad, this.ry1-pad, 0.9, 0.9, 0.9, 1 );
				
				SS_DrawColorRect( this.rx0+32, this.ry0+2+pad, this.rx0+33, this.ry1-2-pad, 0.8, 0.8, 0.8, 1 );
				
				x = this.rx0 + pad;
				y = this.ry0 + pad;
				foreach( id, item : data.items )
				{
					disabled = @item.disabled;
					checked = @item.checked;
					
					if( id === data.selected )
						SS_Draw({ preset = "tile", position = [x,y], scale = [data.item_width,data.item_height], color = if(disabled,[0.7,0.7,0.7,0.5],[0.4,0.6,0.8,0.8]) });
					
					if( isset( item, "menu" ) )
						SS_DrawFitted( data.icon_submenu, x + data.item_width - data.item_height, y, x + data.item_width, y + data.item_height );
					
					if( @item.text !== null )
						SS_DrawTextLine_VC( item.text, this._cachedFont, x + 32, y + data.item_height / 2, if(disabled,[0.5,0.5,0.5,1],[0.1,0.1,0.1,1]) );
					else if( disabled )
						SS_Draw({ preset = "tile", position = [x+32,y+data.sep_height/2], scale = [data.item_width-36,1], color = [0.8,0.8,0.8,1] });
					
					if( disabled && @item.text === null )
						y += data.sep_height;
					else
					{
						if( checked !== null )
						{
							// checkbox
							cbx0 = x + 4;
							cby0 = y + 4;
							cbsz = min( 24, data.item_height - 8 );
							cbx1 = cbx0 + cbsz;
							cby1 = cby0 + cbsz;
							SS_DrawColorRect( cbx0, cby0, cbx1, cby1, 0.5, 0.6, 0.7, 1 );
							SS_DrawColorRect( cbx0+1, cby0+1, cbx1-1, cby1-1, 0.9, 0.9, 0.9, 1 );
							if( checked )
								SS_DrawColorRect( cbx0+3, cby0+3, cbx1-3, cby1-3, 0.1, 0.2, 0.4, 1 );
						}
						y += data.item_height;
					}
					y += data.item_spacing;
				}
			}
		},
		// - input
		"form" = { anchorMode = UI_Anchor_All },
		"checkbox" =
		{
			minWidth = 16,
			minHeight = 16,
			maxWidth = 16,
			maxHeight = 16,
			renderfunc = function SS_UI_Theme_Default_checkbox_renderfunc()
			{
				data = this.data;
				
				theme = this.frame.theme;
				p1 = theme.checkbox_border;
				p2 = theme.checkbox_padding + p1;
				
				SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.ry1, 0.5, 0.6, 0.8, 1 );
				
				if( this.clicked )
					SS_DrawColorRect( this.rx0 + p1, this.ry0 + p1, this.rx1 - p1, this.ry1 - p1, 0.8, 0.8, 0.8, 1 );
				else
					SS_DrawColorRect( this.rx0 + p1, this.ry0 + p1, this.rx1 - p1, this.ry1 - p1, 0.9, 0.9, 0.9, 1 );
				
				if( data.checked )
					SS_DrawColorRect( this.rx0 + p2, this.ry0 + p2, this.rx1 - p2, this.ry1 - p2, 0.1, 0.2, 0.4, 1 );
			}
		},
		"radiobutton" =
		{
			minWidth = 16,
			minHeight = 16,
			maxWidth = 16,
			maxHeight = 16,
			renderfunc = function SS_UI_Theme_Default_radiobtn_renderfunc()
			{
				data = this.data;
				
				theme = this.frame.theme;
				p1 = theme.radiobutton_border;
				p2 = theme.radiobutton_padding + p1;
				
				cx = ( this.rx0 + this.rx1 ) / 2;
				cy = ( this.ry0 + this.ry1 ) / 2;
				radius = round( min( this.rx1 - this.rx0, this.ry1 - this.ry0 ) / 2 );
				
				SS_DrawColorCircle( cx, cy, radius, null, 0.5, 0.6, 0.8, 1 );
				
				if( this.clicked )
					SS_DrawColorCircle( cx, cy, radius - p1, null, 0.8, 0.8, 0.8, 1 );
				else
					SS_DrawColorCircle( cx, cy, radius - p1, null, 0.9, 0.9, 0.9, 1 );
				
				if( data.checked )
					SS_DrawColorCircle( cx, cy, radius - p2, null, 0.1, 0.2, 0.4, 1 );
			}
		},
		"textbox" =
		{
			cursor = UI_Cursor_Text,
			padding = 3,
			renderfunc = function SS_UI_Theme_Default_textbox_renderfunc()
			{
				data = this.data;
				
				border = data.border;
				W = this.rx1 - this.rx0;
				H = this.ry1 - this.ry0;
				BW = this.rx1 - this.rx0 - border * 2;
				BH = this.ry1 - this.ry0 - border * 2;
				PH = this.py1 - this.py0;
				
				SS_Draw({ preset = "tile", position = vec2(this.rx0,this.ry0), scale = vec2(W,H), color = if(this.keyboardFocus,color(0.9,0.6,0.3,1),color(0.6,0.6,0.6,1)) });
				SS_Draw({ preset = "tile", position = vec2(this.rx0+border,this.ry0+border), scale = vec2(BW,BH), color = color(0.9,0.9,0.9,1) });
				
				x0 = this.px0 - data.offset;
				y0 = this.py0;
				yc = ( this.py0 + this.py1 ) * 0.5;
				xh = ( PH - this._cachedFont.size ) * 0.5;
				
				if( this.frame.pushScissorRect( this.px0, this.py0, this.px1, this.py1 ) )
				{
					if( !data.chars && !this.keyboardFocus )
					{
						SS_DrawTextLine_VC( data.caption, this._cachedFont, x0 + xh, yc, color(0.1,0.1,0.1,0.5) );
					}
					
					SS_DrawTextLine_VC( data.text, this._cachedFont, x0, yc, color(0.1,0.1,0.1,1) );
					
					if( data.sel_to !== null )
					{
						from = min( data.fsel_from, data.fsel_to );
						to = max( data.fsel_from, data.fsel_to );
						if( from != to )
						{
							selcol = if( this.keyboardFocus, [0.3,0.6,0.9,0.5], [0.8,0.8,0.8,0.5] );
							SS_Draw({ preset = "tile", position = [x0+from,y0], scale = [to-from,PH], color = selcol });
						}
						
						if( this.keyboardFocus && data.show_cursor )
							SS_Draw({ preset = "tile", position = [x0+data.fsel_to,y0], scale = [1,PH], color = [0.1,0.1,0.1,1] });
					}
					
					this.frame.popScissorRect();
				}
			},
		},
		"slider.horizontal .sdr-rail" =
		{
			q0x = 0,
			q1x = 1,
			q0y = 0.5,
			q1y = 0.5,
			y = -8,
			height = 16,
			backgroundColor = UIColor(0.85,1),
			nonClient = 5,
			overflow = true,
			padding = 3,
			renderfunc = function SS_UI_Theme_Default_slider_horizontal_rail_renderfunc()
			{
				data = this.parent.data;
				P1X = this.cx0;
				P1Y = this.cy0;
				P2X = this.cx1;
				P2Y = this.cy1;
				
				c = this.backgroundColor;
				SS_DrawColorRect( P1X, P1Y, P2X, P2Y, c.r, c.g, c.b, c.a );
				SS_DrawColorRect( P1X+1, P1Y+1, P2X-1, P2Y-1, c.r - 0.2, c.g - 0.2, c.b - 0.2, c.a );
				
				NS = if( data.stopsize, floor( ( data.vmax - data.vmin ) / data.stopsize ), 0 );
				if( NS )
				{
					vdist = data.vmax - data.vmin;
					if( vdist < 0.001 )
						vdist = 0.001;
					
					SRS = this.px0;
					SRE = this.px1;
					scaled_stopsize = data.stopsize / vdist;
					if( NS * 2 < SRE - SRS )
					{
						for( q = 0; q <= 1.0; q += scaled_stopsize )
						{
							if( q > 1 )
								q = 1;
							spf = SRS * ( 1 - q ) + SRE * q;
							SS_DrawColorRect( spf, P1Y + 1, spf + 1, P2Y - 1, 0.9, 0.9, 0.9, 0.5 );
						}
					}
				}
			}
		},
		"slider.horizontal .sdr-rail .sdr-handle" = { q0x = 0.5, q1x = 0.5, q0y = 0.5, q1y = 0.5, x = -6, y = -8, width = 12, height = 16 },
		"slider.vertical .sdr-rail" =
		{
			q0x = 0.5,
			q1x = 0.5,
			q0y = 0,
			q1y = 1,
			x = -8,
			width = 16,
			backgroundColor = UIColor(0.85,1),
			nonClient = 5,
			overflow = true,
			padding = 3,
			renderfunc = function SS_UI_Theme_Default_slider_vertical_rail_renderfunc()
			{
				data = this.parent.data;
				P1X = this.cx0;
				P1Y = this.cy0;
				P2X = this.cx1;
				P2Y = this.cy1;
				
				c = this.backgroundColor;
				SS_DrawColorRect( P1X, P1Y, P2X, P2Y, c.r, c.g, c.b, c.a );
				SS_DrawColorRect( P1X+1, P1Y+1, P2X-1, P2Y-1, c.r - 0.2, c.g - 0.2, c.b - 0.2, c.a );
				
				NS = if( data.stopsize, floor( ( data.vmax - data.vmin ) / data.stopsize ), 0 );
				if( NS )
				{
					vdist = data.vmax - data.vmin;
					if( vdist < 0.001 )
						vdist = 0.001;
					
					SRS = this.py0;
					SRE = this.py1;
					scaled_stopsize = data.stopsize / vdist;
					if( NS * 2 < SRE - SRS )
					{
						for( q = 0; q <= 1.0; q += scaled_stopsize )
						{
							if( q > 1 )
								q = 1;
							spf = SRS * ( 1 - q ) + SRE * q;
							SS_DrawColorRect( P1X + 1, spf, P2X - 1, spf + 1, 0.9, 0.9, 0.9, 0.5 );
						}
					}
				}
			}
		},
		"slider.vertical .sdr-rail .sdr-handle" = { q0x = 0.5, q1x = 0.5, q0y = 0.5, q1y = 0.5, x = -8, y = -6, width = 16, height = 12 },
		"switchbutton button" = { height = 0 },
		"switchbutton .main-button" = { anchorMode = UI_Anchor_All, width = 0 },
		"switchbutton .side-button.prev" = { anchorMode = UI_Anchor_Vert | UI_Anchor_Left, x = 0, width = 24 },
		"switchbutton .side-button.next" = { anchorMode = UI_Anchor_Vert | UI_Anchor_Right, x = -24, width = 24 },
		"switchbutton.has-side-buttons .main-button" = { x = 24, width = -48 },
		"selectbox" =
		{
			icon = "icons/bullet_arrow_down.png",
			renderfunc = function SS_UI_Theme_Default_selectbox_renderfunc()
			{
				data = this.data;
				icon = this._cachedIcon;
				text = this.caption;
				
				cadd = if( this.clicked, -0.02, if( this.mouseOn, 0.02, 0.0 ) );
				SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.ry1, 0.6+cadd, 0.6+cadd, 0.6+cadd, 1 );
				SS_DrawColorRect( this.rx0+1, this.ry0+1, this.rx1-1, this.ry1-1, 0.8+cadd, 0.8+cadd, 0.8+cadd, 1 );
				
				if( this.frame.pushScissorRect( this.rx0 + 2, this.ry0 + 2, this.rx1 - 2, this.ry1 - 2 ) )
				{
					fullwidth = 0;
					if( text )
					{
						textlen = this._cachedFont.getTextLength( text );
						fullwidth += textlen;
					}
					
					cy = round( ( this.ry1 + this.ry0 ) * 0.5 );
					if( icon )
					{
						cyi = cy + if( data.lbmenu, 1, 0 );
						SS_Draw({ preset = "box", position = vec2( this.rx1 - icon.width, cyi ), scale = vec2( icon.width, icon.height ), texture = icon });
					}
					
					if( text )
					{
						SS_DrawTextLine_VC( text, this._cachedFont, this.rx0 + 4, cy, color(0,1) );
					}
					
					this.frame.popScissorRect();
				}
			}
		},
		// - panels
		"scrollable" =
		{
			nonClient = 1,
			padding = 20,
			backgroundColor = UIColor( 0.8, 1 ),
			renderfunc = function SS_UI_Theme_Default_scrollable_renderfunc()
			{
				c = this.backgroundColor;
				SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.ry1, c.r-0.2, c.g-0.2, c.b-0.2, c.a );
				SS_DrawColorRect( this.cx0, this.cy0, this.cx1, this.cy1, c.r, c.g, c.b, c.a );
			}
		},
		"scrollable > .scroll-vertical" = { x = 1, y = -1, width = 12, visible = false, anchorMode = UI_Anchor_Vert | UI_Anchor_Right },
		"scrollable > .scroll-horizontal" = { x = -1, y = 1, height = 12, visible = false, anchorMode = UI_Anchor_Hor | UI_Anchor_Bottom },
		"splitpane > pane" = { anchorMode = UI_Anchor_All },
		"splitpane > split" = { anchorMode = UI_Anchor_All, nonClientV = 1, backgroundColor = UIColor( 0.8, 1 ) },
		"splitpane.horizontal > .pane-a" = { y = 0, height = -3 },
		"splitpane.horizontal > .pane-b" = { y = 3, height = -3 },
		"splitpane.horizontal > split" =
		{
			y = -3,
			height = 6,
			cursor = UI_Cursor_SizeNS,
			renderfunc = function SS_UI_Theme_Default_hsplitpane_split_renderfunc()
			{
				c = this.backgroundColor;
				SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.cy0, c.r + 0.15, c.g + 0.15, c.b + 0.15, c.a ); // top border
				SS_DrawColorRect( this.rx0, this.cy0, this.rx1, this.cy1, c.r, c.g, c.b, c.a ); // middle
				SS_DrawColorRect( this.rx0, this.cy1, this.rx1, this.ry1, c.r - 0.15, c.g - 0.15, c.b - 0.15, c.a ); // bottom border
			},
		},
		"splitpane.vertical > .pane-a" = { x = 0, width = -3 },
		"splitpane.vertical > .pane-b" = { x = 3, width = -3 },
		"splitpane.vertical > split" =
		{
			x = -3,
			width = 6,
			cursor = UI_Cursor_SizeWE,
			renderfunc = function SS_UI_Theme_Default_vsplitpane_split_renderfunc()
			{
				c = this.backgroundColor;
				SS_DrawColorRect( this.rx0, this.ry0, this.cx0, this.ry1, c.r + 0.15, c.g + 0.15, c.b + 0.15, c.a ); // left border
				SS_DrawColorRect( this.cx0, this.ry0, this.cx1, this.ry1, c.r, c.g, c.b, c.a ); // middle
				SS_DrawColorRect( this.cx1, this.ry0, this.rx1, this.ry1, c.r - 0.15, c.g - 0.15, c.b - 0.15, c.a ); // right border
			},
		},
		"menupanel" =
		{
			anchorMode = UI_Anchor_All,
			renderfunc = function SS_UI_Theme_Default_menupanel_renderfunc()
			{
				data = this.data;
				iht = data.item_height;
				
				SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.cy0, 0.9, 0.9, 0.9, 1 );
				
				foreach( i, item : data.items )
				{
					disabled = @item.disabled;
					
					if( data.selected === i )
					{
						if( disabled )
						{
							SS_DrawColorRect( item.x, item.y, item.x + item.width, item.y + iht, 0.5, 0.5, 0.5, 1 );
							SS_DrawColorRect( item.x+1, item.y+1, item.x + item.width-1, item.y + iht-1, 0.8, 0.8, 0.8, 1 );
						}
						else
						{
							SS_DrawColorRect( item.x, item.y, item.x + item.width, item.y + iht, 0.4, 0.5, 0.6, 1 );
							SS_DrawColorRect( item.x+1, item.y+1, item.x + item.width-1, item.y + iht-1, 0.7, 0.8, 0.9, 1 );
						}
					}
					
					col = if( disabled, [0.5,0.5,0.5,1], [0.1,0.1,0.1,1] );
					SS_DrawTextLine_VC( item.text, this._cachedFont, item.x + data.side_padding, item.y + iht / 2, col );
				}
			}
		},
		// - extended
		"placeholder" =
		{
			backgroundColor = UIColor(0.7,0.35,0.3,1),
			icon = "icons/table_row_insert.png",
			renderfunc = function SS_UI_Theme_Default_placeholder_renderfunc()
			{
				icon = this._cachedIcon;
				c = SS_UI_ConvertColor( this.backgroundColor );
				SS_DrawColorRect( this.cx0, this.cy0, this.cx1, this.cy1, c.r, c.g, c.b, c.a );
				if( icon )
				{
					SS_Draw({ preset = "box", position = vec2( ( this.rx0 + this.rx1 ) / 2, ( this.ry0 + this.ry1 ) / 2 ), scale = vec2( icon.width, icon.height ), texture = icon });
				}
			}
		},
		"scrollingautolayout > scrollable" = { anchorMode = UI_Anchor_All },
		"scrollingautolayout > scrollable > autolayout" = { anchorMode = UI_Anchor_Hor | UI_Anchor_Top },
		"editablelist > scrollable" = { anchorMode = UI_Anchor_All },
		"editablelist > scrollable > autolayout" = { anchorMode = UI_Anchor_Hor | UI_Anchor_Top },
		"editablelist > scrollable > autolayout > item" =
		{
			backgroundColor = UIColor(0.85,1),
			renderfunc = function SS_UI_Theme_Default_editablelistitem_renderfunc()
			{
				c = SS_UI_ConvertColor( this.backgroundColor );
				SS_DrawColorRect( this.cx0, this.cy0, this.cx1, this.cy1, c.r, c.g, c.b, c.a );
			}
		},
		"editablelist > scrollable > autolayout > item:hover" = { backgroundColor = UIColor(0.9,1) },
		"editablelist > scrollable > autolayout > item:active" = { backgroundColor = UIColor(0.75,1) },
		"groupblock" = { anchorMode = UI_Anchor_Hor },
		"groupblock .groupblk-title" =
		{
			anchorMode = UI_Anchor_Hor,
			height = 24,
			backgroundColor = UIColor(0.3,0.5,0.7,1),
			textColor = UIColor(1,1),
			renderfunc = function SS_UI_Theme_Default_groupblock_titlebutton_renderfunc()
			{
				data = this.data;
				icon = this._cachedIcon;
				text = this.caption;
				
				c = SS_UI_ConvertColor( this.backgroundColor );
			//	cadd = if( this.clicked, -0.02, if( this.mouseOn, 0.02, 0.0 ) );
				SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.ry1, c.r, c.g, c.b, c.a ); // 0.6+cadd, 0.6+cadd, 0.6+cadd, 1 );
			//	SS_DrawColorRect( this.rx0+1, this.ry0+1, this.rx1-1, this.ry1-1, 0.8+cadd, 0.8+cadd, 0.8+cadd, 1 );
				
				if( this.frame.pushScissorRect( this.rx0 + 2, this.ry0 + 2, this.rx1 - 2, this.ry1 - 2 ) )
				{
					fullwidth = 0;
					if( text )
					{
						textlen = this._cachedFont.getTextLength( text );
						fullwidth += textlen;
					}
					
					cy = round( ( this.ry1 + this.ry0 ) * 0.5 );
					if( icon )
					{
						SS_Draw({ preset = "box", position = vec2( this.rx1 - icon.width, cy ), scale = vec2( icon.width, icon.height ), texture = icon });
					}
					
					if( text )
					{
						SS_DrawTextLine_VC( text, this._cachedFont, this.rx0 + 4, cy, SS_UI_ConvertColor( this.textColor ) );
					}
					
					this.frame.popScissorRect();
				}
			}
		},
		"groupblock .groupblk-title:hover" = { backgroundColor = UIColor(0.35,0.55,0.75,1) },
		"groupblock .groupblk-title:active" = { backgroundColor = UIColor(0.25,0.45,0.65,1) },
		"groupblock.groupblk-open .groupblk-title" = { icon = "icons/bullet_arrow_down.png" },
		"groupblock.groupblk-closed .groupblk-title" = { icon = "icons/bullet_arrow_up.png" },
		"groupblock .groupblk-cont" = { anchorMode = UI_Anchor_Hor, y = 24 },
		"listboxmenu scrollable" = { anchorMode = UI_Anchor_All },
		"listboxmenu autolayout" = { anchorMode = UI_Anchor_Hor | UI_Anchor_Top },
		"listboxmenu autolayout button" =
		{
			height = 24,
			q1x = 1,
			backgroundColor = UIColor(0.9,1),
			textColor = UIColor(0,1),
			renderfunc = function SS_UI_Theme_Default_listboxmenu_button_renderfunc()
			{
				if( this.rx0 >= this.rx1 || this.ry0 >= this.ry1 )
					return;
				
				data = this.data;
				icon = @data.icon;
				text = this.caption;
				
				c = SS_UI_ConvertColor( this.backgroundColor );
				SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.ry1, c.r, c.g, c.b, c.a );
				
				if( this.frame.pushScissorRect( this.rx0 + 2, this.ry0 + 2, this.rx1 - 2, this.ry1 - 2 ) )
				{
					cy = round( ( this.ry1 + this.ry0 ) * 0.5 );
					if( icon )
					{
						SS_Draw({ preset = "box", position = vec2( this.rx1 - round( 4 + icon.width / 2 ), cy ), scale = vec2( icon.width, icon.height ), texture = icon });
					}
					
					if( text )
					{
						SS_DrawTextLine_VC( text, this._cachedFont, this.rx0 + 4, cy, SS_UI_ConvertColor( this.textColor ) );
					}
					
					this.frame.popScissorRect();
				}
			}
		},
		"listboxmenu autolayout button:hover" = { backgroundColor = UIColor(0.4,0.6,0.8,1), textColor = UIColor(1,1) },
		"listboxmenu autolayout button:active" = { backgroundColor = UIColor(0.3,0.5,0.7,1), textColor = UIColor(1,1) },
		"listboxmenu.select-list" = { maxHeight = 300 },
		"propertygrid scrollable" = { anchorMode = UI_Anchor_All },
		"propertygrid autolayout" = { anchorMode = UI_Anchor_Hor | UI_Anchor_Top },
		"propertygrid .label" = { q1x = 0.5, height = 24, backgroundColor = UIColor(0,0.1), halign = UI_Align_Left, valign = UI_Align_VCenter },
		"propertygrid .value" = { q1x = 0.5, height = 24 },
		"propertygrid .separator" = { anchorMode = UI_Anchor_Hor, height = 24, textColor = UIColor(1), backgroundColor = UIColor(0.6,1) },
		"propertygrid button.value" = { q1x = 1 },
		"window" =
		{
			nonClientTop = 24,
			nonClientBottom = 4,
			nonClientLeft = 4,
			nonClientRight = 4,
			renderfunc = function SS_UI_Theme_Default_window_renderfunc()
			{
				SS_DrawColorRect( this.rx0 + 2, this.ry0 + 2, this.rx1 + 2, this.ry1 + 2, 0.0, 0.0, 0.0, 0.2 );
				SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.ry1, 0.4, 0.6, 0.8, 1 );
				SS_DrawColorRect( this.rx0 + 1, this.ry0 + 1, this.rx1 - 1, this.ry1 - 1, 0.3, 0.5, 0.7, 1 );
				SS_DrawColorRect( this.cx0, this.cy0, this.cx1, this.cy1, 0.4, 0.6, 0.8, 1 );
				
				SS_DrawTextLine_VC( this.caption, this._cachedFont, this.rx0 + 4, this.ry0 + 12, color(1) );
			}
		},
		"window .close-button" = { anchorMode = UI_Anchor_Right, x = -20, y = -22, width = 20, height = 18, icon = "icons/cross.png" },
		"filebrowser .path-block" = { height = 32, anchorMode = UI_Anchor_Hor },
		"filebrowser .path-block .btn-back" = { width = 32, height = 32, icon = "icons/resultset_previous.png", nonClient = 2 },
		"filebrowser .path-block .btn-fwd" = { x = 32, width = 32, height = 32, icon = "icons/resultset_next.png", nonClient = 2 },
		"filebrowser .path-block .btn-up" = { x = 64, width = 32, height = 32, icon = "icons/arrow_up.png", nonClient = 2 },
		"filebrowser .path-block .path-text" = { x = 96, width = -96, anchorMode = UI_Anchor_Hor, height = 32, nonClient = 2 },
		"filebrowser .file-scroll" = { y = 32, height = -32, anchorMode = UI_Anchor_All },
		"filebrowser .file-cont" = { anchorMode = UI_Anchor_All },
		"filebrowser .file-cont .file-icon" = { width = 128, height = 24 },
	}),
	
	// BUTTON
	button_render_bgr = function SS_UI_Theme_Default_button_render_bgr()
	{
		cadd = if( this.clicked, -0.1, if( this.mouseOn, 0.1, 0.0 ) );
		B = 0;
		if( !this.nonclient )
		{
			SS_DrawColorRect( this.cx0, this.cy0, this.cx1, this.cy1, 0.7+cadd, 0.8+cadd, 0.9+cadd, 1 );
			B = 1;
		}
		SS_DrawColorRect( this.cx0+B, this.cy0+B, this.cx1-B, this.cy1-B, 0.3+cadd, 0.5+cadd, 0.7+cadd, 1 );
	},
	button_render_contents = function SS_UI_Theme_Default_button_render_contents()
	{
		data = this.data;
		icon = this._cachedIcon;
		text = this.caption;
		
		if( this.frame.pushScissorRect( this.cx0 + 2, this.cy0 + 2, this.cx1 - 2, this.cy1 - 2 ) )
		{
			fullwidth = 0;
			if( icon ) fullwidth += icon.width;
			if( text )
			{
				textlen = this._cachedFont.getTextLength( text );
				fullwidth += textlen;
			}
			if( icon && text ) fullwidth += 4;
			
			icon_off = ( this.cx1 - this.cx0 - fullwidth ) / 2;
			text_off = icon_off;
			cy = round( ( this.cy1 + this.cy0 ) * 0.5 );
			if( icon )
			{
				text_off += icon.width + 4;
				SS_Draw({ preset = "box", position = vec2( this.cx0 + round( icon_off + icon.width / 2 ), cy ), scale = vec2( icon.width, icon.height ), texture = icon });
			}
			
			if( text )
			{
				SS_DrawTextLine_VC( text, this._cachedFont, this.cx0 + text_off, cy, SS_UI_ConvertColor( this.textColor ) );
			}
			
			this.frame.popScissorRect();
		}
	},
	
	// SCROLLBAR
	scroll_button_size = 0,
	
	// MENU
	menu_item_min_width = 200,
	menu_item_height = 24,
	menu_sep_height = 8,
	menu_item_spacing = 0,
	menu_padding = 4,
	
	// CHECKBOX
	checkbox_border = 1,
	checkbox_padding = 2,
	
	// RADIO BUTTON
	radiobutton_border = 1,
	radiobutton_padding = 2,
	
	// TEXTBOX
	textbox_border = 1,
};
