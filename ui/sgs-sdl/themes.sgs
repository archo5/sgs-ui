
function SS_UI_Theme_Default_static_renderfunc()
{
	text = this.caption;
	
	c = this.backgroundColor;
	SS_DrawColorRect( this.cx0, this.cy0, this.cx1, this.cy1, c.r, c.g, c.b, c.a );
	
	if( text )
	{
		SS_DrawTextRect( text, this._cachedFont, SS_UI_ConvertColor( this.textColor ), SS_UI_ConvertAlignment( this.halign, this.valign ), this.px0, this.px1, this.py0, this.py1 );
	}
}

function SS_UI_Theme_Default_button_render_bgr()
{
	cadd = if( this.clicked, -0.1, if( this.mouseOn, 0.1, 0.0 ) );
	B = 0;
	if( !this.nonclient )
	{
		SS_DrawColorRect( this.cx0, this.cy0, this.cx1, this.cy1, 0.7+cadd, 0.8+cadd, 0.9+cadd, 1 );
		B = 1;
	}
	SS_DrawColorRect( this.cx0+B, this.cy0+B, this.cx1-B, this.cy1-B, 0.3+cadd, 0.5+cadd, 0.7+cadd, 1 );
}

function SS_UI_Theme_Default_button_render_contents()
{
	data = this.data;
	icon = this._cachedIcon;
	text = this.caption;
	
	if( this.frame.pushScissorRect( this.cx0 + 2, this.cy0 + 2, this.cx1 - 2, this.cy1 - 2 ) )
	{
		fullwidth = 0;
		if( icon ) fullwidth += icon.width;
		if( text )
		{
			textlen = this._cachedFont.getTextLength( text );
			fullwidth += textlen;
		}
		if( icon && text ) fullwidth += 4;
		
		icon_off = round( this.cx1 - this.cx0 - fullwidth ) / 2;
		text_off = icon_off;
		cy = round( ( this.cy1 + this.cy0 ) * 0.5 ) - ( @icon.height % 2 ) / 2;
		if( icon )
		{
			cx = this.cx0 + round( icon_off + icon.width / 2 ) - ( @icon.width % 2 ) / 2;
			text_off += icon.width + 4;
			SS_Draw({ preset = "box", position = vec2( cx, cy ), scale = vec2( icon.width, icon.height ), texture = icon });
		}
		
		if( text )
		{
			SS_DrawTextLine_VC( text, this._cachedFont, this.cx0 + text_off, cy, SS_UI_ConvertColor( this.textColor ) );
		}
		
		this.frame.popScissorRect();
	}
}

function SS_UI_Theme_Default_button_renderfunc()
{
	if( this.rx0 == this.rx1 || this.ry0 == this.ry1 )
		return;
	theme = this.frame.theme;
	button_render_bgr = theme.button_render_bgr;
	button_render_contents = theme.button_render_contents;
	this!button_render_bgr();
	this!button_render_contents();
}

function SS_UI_Theme_Default_image_renderfunc()
{
	data = this.data;
	scale = data.scale;
	
	if( !this._cachedImage )
		return;
	
	W = this.rx1 - this.rx0;
	H = this.ry1 - this.ry0;
	IW = this._cachedImage.width;
	IH = this._cachedImage.height;
	IW = if( IW >= 1, IW, 1 );
	IH = if( IH >= 1, IH, 1 );
	
	if( scale === UI_ImageScale_Stretch )
	{
		xscale = W / IW;
		yscale = H / IH;
	}
	else if( scale === UI_ImageScale_Crop )
	{
		xscale = W / IW;
		yscale = H / IH;
		if( xscale > yscale )
			yscale = xscale;
		else
			xscale = yscale;
	}
	else if( scale === UI_ImageScale_Fit )
	{
		xscale = W / IW;
		yscale = H / IH;
		if( xscale > yscale )
			xscale = yscale;
		else
			yscale = xscale;
	}
	else
	{
		xscale = scale;
		yscale = scale;
	}
	
	realsize_x = round( IW * xscale );
	realsize_y = round( IH * yscale );
	
	off_x = round( ( W - realsize_x ) * data.align_x );
	off_y = round( ( H - realsize_y ) * data.align_y );
	
	if( this.frame.pushScissorRect( this.rx0, this.ry0, this.rx1, this.ry1 ) )
	{
		X = this.rx0 + off_x;
		Y = this.ry0 + off_y;
		SS_Draw({ preset = "tile", texture = this._cachedImage, position = vec2(X,Y), scale = vec2(realsize_x,realsize_y) });
		
		this.frame.popScissorRect();
	}
}

function SS_UI_Theme_Default_scroll_renderfunc()
{
	SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.ry1, 0.8, 0.8, 0.8, 1 );
	SS_DrawColorRect( this.px0, this.py0, this.px1, this.py1, 0.7, 0.7, 0.7, 1 );
}

function SS_UI_Theme_Default_menu_renderfunc()
{
	data = this.data;
	
	pad = data.menu_padding;
	
	SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.ry1, 0.8, 0.8, 0.8, 1 );
	SS_DrawColorRect( this.rx0+pad, this.ry0+pad, this.rx1-pad, this.ry1-pad, 0.9, 0.9, 0.9, 1 );
	
	SS_DrawColorRect( this.rx0+32, this.ry0+2+pad, this.rx0+33, this.ry1-2-pad, 0.8, 0.8, 0.8, 1 );
	
	x = this.rx0 + pad;
	y = this.ry0 + pad;
	foreach( id, item : data.items )
	{
		disabled = @item.disabled;
		checked = @item.checked;
		
		if( id === data.selected )
			SS_Draw({ preset = "tile", position = [x,y], scale = [data.item_width,data.item_height], color = if(disabled,[0.7,0.7,0.7,0.5],[0.4,0.6,0.8,0.8]) });
		
		if( isset( item, "menu" ) )
			SS_DrawFitted( data.icon_submenu, x + data.item_width - data.item_height, y, x + data.item_width, y + data.item_height );
		
		if( @item.text !== null )
			SS_DrawTextLine_VC( item.text, this._cachedFont, x + 32, y + data.item_height / 2, if(disabled,[0.5,0.5,0.5,1],[0.1,0.1,0.1,1]) );
		else if( disabled )
			SS_Draw({ preset = "tile", position = [x+32,y+data.sep_height/2], scale = [data.item_width-36,1], color = [0.8,0.8,0.8,1] });
		
		if( disabled && @item.text === null )
			y += data.sep_height;
		else
		{
			if( checked !== null )
			{
				// checkbox
				cbx0 = x + 4;
				cby0 = y + 4;
				cbsz = min( 24, data.item_height - 8 );
				cbx1 = cbx0 + cbsz;
				cby1 = cby0 + cbsz;
				SS_DrawColorRect( cbx0, cby0, cbx1, cby1, 0.5, 0.6, 0.7, 1 );
				SS_DrawColorRect( cbx0+1, cby0+1, cbx1-1, cby1-1, 0.9, 0.9, 0.9, 1 );
				if( checked )
					SS_DrawColorRect( cbx0+3, cby0+3, cbx1-3, cby1-3, 0.1, 0.2, 0.4, 1 );
			}
			y += data.item_height;
		}
		y += data.item_spacing;
	}
}

function SS_UI_Theme_Default_checkbox_renderfunc()
{
	data = this.data;
	
	theme = this.frame.theme;
	p1 = theme.checkbox_border;
	p2 = theme.checkbox_padding + p1;
	
	SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.ry1, 0.5, 0.6, 0.8, 1 );
	
	if( this.clicked )
		SS_DrawColorRect( this.rx0 + p1, this.ry0 + p1, this.rx1 - p1, this.ry1 - p1, 0.8, 0.8, 0.8, 1 );
	else
		SS_DrawColorRect( this.rx0 + p1, this.ry0 + p1, this.rx1 - p1, this.ry1 - p1, 0.9, 0.9, 0.9, 1 );
	
	if( data.checked )
		SS_DrawColorRect( this.rx0 + p2, this.ry0 + p2, this.rx1 - p2, this.ry1 - p2, 0.1, 0.2, 0.4, 1 );
}

function SS_UI_Theme_Default_radiobtn_renderfunc()
{
	data = this.data;
	
	theme = this.frame.theme;
	p1 = theme.radiobutton_border;
	p2 = theme.radiobutton_padding + p1;
	
	cx = ( this.rx0 + this.rx1 ) / 2;
	cy = ( this.ry0 + this.ry1 ) / 2;
	radius = round( min( this.rx1 - this.rx0, this.ry1 - this.ry0 ) / 2 );
	
	SS_DrawColorCircle( cx, cy, radius, null, 0.5, 0.6, 0.8, 1 );
	
	if( this.clicked )
		SS_DrawColorCircle( cx, cy, radius - p1, null, 0.8, 0.8, 0.8, 1 );
	else
		SS_DrawColorCircle( cx, cy, radius - p1, null, 0.9, 0.9, 0.9, 1 );
	
	if( data.checked )
		SS_DrawColorCircle( cx, cy, radius - p2, null, 0.1, 0.2, 0.4, 1 );
}

function SS_UI_Theme_Default_textbox_renderfunc_inner()
{
	data = this.data;
	
	PH = this.py1 - this.py0;
	x0 = this.px0 - data.offset;
	y0 = this.py0;
	yc = ( this.py0 + this.py1 ) * 0.5;
	xh = ( PH - this._cachedFont.size ) * 0.5;
	
	txtcol = SS_UI_ConvertColor( this.textColor );
	
	if( this.frame.pushScissorRect( this.px0, this.py0, this.px1, this.py1 ) )
	{
		if( !data.chars && !this.keyboardFocus )
		{
			SS_DrawTextLine_VC( data.caption, this._cachedFont, x0 + xh, yc, txtcol );
		}
		
		SS_DrawTextLine_VC( data.text, this._cachedFont, x0, yc, txtcol );
		
		if( data.sel_to !== null )
		{
			from = min( data.fsel_from, data.fsel_to );
			to = max( data.fsel_from, data.fsel_to );
			if( from != to )
			{
			//	selcol = if( this.keyboardFocus, [0.3,0.6,0.9,0.5], [0.8,0.8,0.8,0.5] );
				SS_Draw({ preset = "tile", position = vec2(x0+from,y0), scale = vec2(to-from,PH), color = SS_UI_ConvertColor( this.backgroundColor ) });
			}
			
			if( this.keyboardFocus && data.show_cursor )
				SS_Draw({ preset = "tile", position = vec2(x0+data.fsel_to,y0), scale = vec2(1,PH), color = txtcol });
		}
		
		this.frame.popScissorRect();
	}
}

function SS_UI_Theme_Default_textbox_renderfunc()
{
	data = this.data;
	
	border = data.border;
	W = this.cx1 - this.cx0;
	H = this.cy1 - this.cy0;
	BW = this.cx1 - this.cx0 - border * 2;
	BH = this.cy1 - this.cy0 - border * 2;
	
	SS_Draw({ preset = "tile", position = vec2(this.cx0,this.cy0), scale = vec2(W,H), color = if(this.keyboardFocus,color(0.9,0.6,0.3,1),color(0.6,0.6,0.6,1)) });
	SS_Draw({ preset = "tile", position = vec2(this.cx0+border,this.cy0+border), scale = vec2(BW,BH), color = color(0.9,0.9,0.9,1) });
	
	textbox_render_contents = this.frame.theme.textbox_render_contents;
	this!textbox_render_contents();
}

function SS_UI_Theme_Default_slider_horizontal_rail_renderfunc()
{
	data = this.parent.data;
	P1X = this.cx0;
	P1Y = this.cy0;
	P2X = this.cx1;
	P2Y = this.cy1;
	
	c = this.backgroundColor;
	SS_DrawColorRect( P1X, P1Y, P2X, P2Y, c.r, c.g, c.b, c.a );
	SS_DrawColorRect( P1X+1, P1Y+1, P2X-1, P2Y-1, c.r - 0.2, c.g - 0.2, c.b - 0.2, c.a );
	
	NS = if( data.stopsize, floor( ( data.vmax - data.vmin ) / data.stopsize ), 0 );
	if( NS )
	{
		vdist = data.vmax - data.vmin;
		if( vdist < 0.001 )
			vdist = 0.001;
		
		SRS = this.px0;
		SRE = this.px1;
		scaled_stopsize = data.stopsize / vdist;
		if( NS * 2 < SRE - SRS )
		{
			for( q = 0; q <= 1.0; q += scaled_stopsize )
			{
				if( q > 1 )
					q = 1;
				spf = SRS * ( 1 - q ) + SRE * q;
				SS_DrawColorRect( spf, P1Y + 1, spf + 1, P2Y - 1, 0.9, 0.9, 0.9, 0.5 );
			}
		}
	}
}

function SS_UI_Theme_Default_slider_vertical_rail_renderfunc()
{
	data = this.parent.data;
	P1X = this.cx0;
	P1Y = this.cy0;
	P2X = this.cx1;
	P2Y = this.cy1;
	
	c = this.backgroundColor;
	SS_DrawColorRect( P1X, P1Y, P2X, P2Y, c.r, c.g, c.b, c.a );
	SS_DrawColorRect( P1X+1, P1Y+1, P2X-1, P2Y-1, c.r - 0.2, c.g - 0.2, c.b - 0.2, c.a );
	
	NS = if( data.stopsize, floor( ( data.vmax - data.vmin ) / data.stopsize ), 0 );
	if( NS )
	{
		vdist = data.vmax - data.vmin;
		if( vdist < 0.001 )
			vdist = 0.001;
		
		SRS = this.py0;
		SRE = this.py1;
		scaled_stopsize = data.stopsize / vdist;
		if( NS * 2 < SRE - SRS )
		{
			for( q = 0; q <= 1.0; q += scaled_stopsize )
			{
				if( q > 1 )
					q = 1;
				spf = SRS * ( 1 - q ) + SRE * q;
				SS_DrawColorRect( P1X + 1, spf, P2X - 1, spf + 1, 0.9, 0.9, 0.9, 0.5 );
			}
		}
	}
}

function SS_UI_Theme_Default_selectbox_renderfunc()
{
	data = this.data;
	icon = this._cachedIcon;
	text = this.caption;
	
	cadd = if( this.clicked, -0.02, if( this.mouseOn, 0.02, 0.0 ) );
	SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.ry1, 0.6+cadd, 0.6+cadd, 0.6+cadd, 1 );
	SS_DrawColorRect( this.rx0+1, this.ry0+1, this.rx1-1, this.ry1-1, 0.8+cadd, 0.8+cadd, 0.8+cadd, 1 );
	
	if( this.frame.pushScissorRect( this.rx0 + 2, this.ry0 + 2, this.rx1 - 2, this.ry1 - 2 ) )
	{
		fullwidth = 0;
		if( text )
		{
			textlen = this._cachedFont.getTextLength( text );
			fullwidth += textlen;
		}
		
		cy = round( ( this.ry1 + this.ry0 ) * 0.5 );
		if( icon )
		{
			cyi = cy + if( data.lbmenu, 1, 0 );
			SS_Draw({ preset = "box", position = vec2( this.rx1 - icon.width, cyi ), scale = vec2( icon.width, icon.height ), texture = icon });
		}
		
		if( text )
		{
			SS_DrawTextLine_VC( text, this._cachedFont, this.rx0 + 4, cy, color(0,1) );
		}
		
		this.frame.popScissorRect();
	}
}

function SS_UI_Theme_Default_hsplitpane_split_renderfunc()
{
	c = this.backgroundColor;
	SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.cy0, c.r + 0.15, c.g + 0.15, c.b + 0.15, c.a ); // top border
	SS_DrawColorRect( this.rx0, this.cy0, this.rx1, this.cy1, c.r, c.g, c.b, c.a ); // middle
	SS_DrawColorRect( this.rx0, this.cy1, this.rx1, this.ry1, c.r - 0.15, c.g - 0.15, c.b - 0.15, c.a ); // bottom border
}

function SS_UI_Theme_Default_vsplitpane_split_renderfunc()
{
	c = this.backgroundColor;
	SS_DrawColorRect( this.rx0, this.ry0, this.cx0, this.ry1, c.r + 0.15, c.g + 0.15, c.b + 0.15, c.a ); // left border
	SS_DrawColorRect( this.cx0, this.ry0, this.cx1, this.ry1, c.r, c.g, c.b, c.a ); // middle
	SS_DrawColorRect( this.cx1, this.ry0, this.rx1, this.ry1, c.r - 0.15, c.g - 0.15, c.b - 0.15, c.a ); // right border
}

function SS_UI_Theme_Default_menupanel_renderfunc()
{
	data = this.data;
	iht = data.item_height;
	
	SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.cy0, 0.9, 0.9, 0.9, 1 );
	
	foreach( i, item : data.items )
	{
		disabled = @item.disabled;
		
		if( data.selected === i )
		{
			if( disabled )
			{
				SS_DrawColorRect( item.x, item.y, item.x + item.width, item.y + iht, 0.5, 0.5, 0.5, 1 );
				SS_DrawColorRect( item.x+1, item.y+1, item.x + item.width-1, item.y + iht-1, 0.8, 0.8, 0.8, 1 );
			}
			else
			{
				SS_DrawColorRect( item.x, item.y, item.x + item.width, item.y + iht, 0.4, 0.5, 0.6, 1 );
				SS_DrawColorRect( item.x+1, item.y+1, item.x + item.width-1, item.y + iht-1, 0.7, 0.8, 0.9, 1 );
			}
		}
		
		col = if( disabled, [0.5,0.5,0.5,1], [0.1,0.1,0.1,1] );
		SS_DrawTextLine_VC( item.text, this._cachedFont, item.x + data.side_padding, item.y + iht / 2, col );
	}
}

function SS_UI_Theme_Default_placeholder_renderfunc()
{
	icon = this._cachedIcon;
	c = SS_UI_ConvertColor( this.backgroundColor );
	SS_DrawColorRect( this.cx0, this.cy0, this.cx1, this.cy1, c.r, c.g, c.b, c.a );
	if( icon )
	{
		SS_Draw({ preset = "box", position = vec2( ( this.rx0 + this.rx1 ) / 2, ( this.ry0 + this.ry1 ) / 2 ), scale = vec2( icon.width, icon.height ), texture = icon });
	}
}

function SS_UI_Theme_Default_container_renderfunc()
{
	c = SS_UI_ConvertColor( this.backgroundColor );
	SS_DrawColorRect( this.cx0, this.cy0, this.cx1, this.cy1, c.r, c.g, c.b, c.a );
}

function SS_UI_Theme_Default_groupblock_titlebutton_renderfunc()
{
	data = this.data;
	icon = this._cachedIcon;
	text = this.caption;
	
	c = SS_UI_ConvertColor( this.backgroundColor );
//	cadd = if( this.clicked, -0.02, if( this.mouseOn, 0.02, 0.0 ) );
	SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.ry1, c.r, c.g, c.b, c.a ); // 0.6+cadd, 0.6+cadd, 0.6+cadd, 1 );
//	SS_DrawColorRect( this.rx0+1, this.ry0+1, this.rx1-1, this.ry1-1, 0.8+cadd, 0.8+cadd, 0.8+cadd, 1 );
	
	if( this.frame.pushScissorRect( this.rx0 + 2, this.ry0 + 2, this.rx1 - 2, this.ry1 - 2 ) )
	{
		fullwidth = 0;
		if( text )
		{
			textlen = this._cachedFont.getTextLength( text );
			fullwidth += textlen;
		}
		
		cy = round( ( this.ry1 + this.ry0 ) * 0.5 );
		if( icon )
		{
			SS_Draw({ preset = "box", position = vec2( this.rx1 - icon.width, cy ), scale = vec2( icon.width, icon.height ), texture = icon });
		}
		
		if( text )
		{
			SS_DrawTextLine_VC( text, this._cachedFont, this.rx0 + 4, cy, SS_UI_ConvertColor( this.textColor ) );
		}
		
		this.frame.popScissorRect();
	}
}

function SS_UI_Theme_Default_listboxmenu_button_renderfunc()
{
	if( this.rx0 >= this.rx1 || this.ry0 >= this.ry1 )
		return;
	
	data = this.data;
	icon = @data.icon;
	text = this.caption;
	
	c = SS_UI_ConvertColor( this.backgroundColor );
	SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.ry1, c.r, c.g, c.b, c.a );
	
	if( this.frame.pushScissorRect( this.rx0 + 2, this.ry0 + 2, this.rx1 - 2, this.ry1 - 2 ) )
	{
		cy = round( ( this.ry1 + this.ry0 ) * 0.5 );
		if( icon )
		{
			SS_Draw({ preset = "box", position = vec2( this.rx1 - round( 4 + icon.width / 2 ), cy ), scale = vec2( icon.width, icon.height ), texture = icon });
		}
		
		if( text )
		{
			SS_DrawTextLine_VC( text, this._cachedFont, this.rx0 + 4, cy, SS_UI_ConvertColor( this.textColor ) );
		}
		
		this.frame.popScissorRect();
	}
}

function SS_UI_Theme_Default_window_renderfunc()
{
	SS_DrawColorRect( this.rx0 + 2, this.ry0 + 2, this.rx1 + 2, this.ry1 + 2, 0.0, 0.0, 0.0, 0.2 );
	SS_DrawColorRect( this.rx0, this.ry0, this.rx1, this.ry1, 0.4, 0.6, 0.8, 1 );
	SS_DrawColorRect( this.rx0 + 1, this.ry0 + 1, this.rx1 - 1, this.ry1 - 1, 0.3, 0.5, 0.7, 1 );
	SS_DrawColorRect( this.cx0, this.cy0, this.cx1, this.cy1, 0.4, 0.6, 0.8, 1 );
	
	SS_DrawTextLine_VC( this.caption, this._cachedFont, this.rx0 + 4, this.ry0 + 12, color(1) );
}

function SS_UI_Theme_Default_fbentry_renderfunc()
{
	icon = this._cachedIcon;
	c = this.backgroundColor;
	if( this.frame.pushScissorRect( this.rx0, this.ry0, this.rx1, this.ry1 ) )
	{
		SS_DrawColorRect( this.cx0, this.cy0, this.cx1, this.cy1, c.r, c.g, c.b, c.a );
		if( icon )
			SS_DrawFitted( icon, this.cx0, this.cy0, this.cx0 + this.clientHeight, this.cy1 );
		SS_DrawTextLine_VC( this.caption, this._cachedFont, this.cx0 + this.clientHeight, this.cy0 + this.clientHeight * 0.5, SS_UI_ConvertColor( this.textColor ) );
		
		this.frame.popScissorRect();
	}
}

global SS_UI_Theme_Default =
{
	stylesheet = UI_BuildStyleSheet
	({
		"" = { fontSize = 11 },
		// - core
		"root, static" =
		{
			textColor = UIColor( 0.1, 1 ),
			backgroundColor = UIColor( 0.5, 1 ),
			halign = UI_Align_Center,
			valign = UI_Align_VCenter,
			renderfunc = SS_UI_Theme_Default_static_renderfunc,
		},
		"root" = { backgroundColor = UIColor( 0.7, 1 ) },
		".textcont" = { backgroundColor = UIColor( 0.9, 1 ), textColor = UIColor( 0.1, 1 ) },
		".topbar" = { backgroundColor = UIColor( 0.8, 1 ), textColor = UIColor( 0.1, 1 ) },
		"button" = { textColor = UIColor( 1, 1 ), renderfunc = SS_UI_Theme_Default_button_renderfunc },
		"image" = { renderfunc = SS_UI_Theme_Default_image_renderfunc },
		"scrollbar" = { padding = 1, renderfunc = SS_UI_Theme_Default_scroll_renderfunc },
		/* 0000 -> button size */
		"scrollbar.vertical .btn-back" = { height = 0000, anchorMode = UI_Anchor_Hor | UI_Anchor_Top, icon = "icons/arrow_up.png" },
		"scrollbar.vertical .btn-fwd" = { height = 0000, anchorMode = UI_Anchor_Hor | UI_Anchor_Bottom, icon = "icons/arrow_down.png" },
		"scrollbar.vertical .btn-slider" = { anchorMode = UI_Anchor_Hor },
		"scrollbar.horizontal .btn-back" = { width = 0000, anchorMode = UI_Anchor_Vert | UI_Anchor_Left, icon = "icons/arrow_left.png" },
		"scrollbar.horizontal .btn-fwd" = { width = 0000, anchorMode = UI_Anchor_Vert | UI_Anchor_Right, icon = "icons/arrow_right.png" },
		"scrollbar.horizontal .btn-slider" = { anchorMode = UI_Anchor_Vert },
		"menu" = { renderfunc = SS_UI_Theme_Default_menu_renderfunc },
		// - components
		".is-scrollable > .scroll-v" = { width = 12, visible = false, anchorMode = UI_Anchor_Vert | UI_Anchor_Right },
		".is-scrollable > .scroll-h" = { height = 12, visible = false, anchorMode = UI_Anchor_Hor | UI_Anchor_Bottom },
		// - input
		"form" = { anchorMode = UI_Anchor_All },
		"checkbox" = { minWidth = 16, minHeight = 16, maxWidth = 16, maxHeight = 16, renderfunc = SS_UI_Theme_Default_checkbox_renderfunc },
		"radiobutton" = { minWidth = 16, minHeight = 16, maxWidth = 16, maxHeight = 16, renderfunc = SS_UI_Theme_Default_radiobtn_renderfunc },
		"textbox" = { cursor = UI_Cursor_Text, padding = 3, renderfunc = SS_UI_Theme_Default_textbox_renderfunc, textColor = UIColor(0.1,0.5), backgroundColor = UIColor(0.8,0.5) },
		"textbox:focus" = { backgroundColor = UIColor(0.3,0.6,0.9,0.5) },
		"textbox:focus, textbox.has-text" = { textColor = UIColor(0.1,1) },
		"integerbox textbox" = { anchorMode = UI_Anchor_All, width = -24 },
		"integerbox .slider-btn" = { anchorMode = UI_Anchor_Right | UI_Anchor_Vert, x = -24, width = 24 },
		"integerbox .slider-btn.add" = { q1y = 0.5 },
		"integerbox .slider-btn.sub" = { q0y = 0.5 },
		"slider.horizontal .sdr-rail" =
		{
			q0x = 0, q1x = 1, q0y = 0.5, q1y = 0.5,
			y = -8, height = 16,
			backgroundColor = UIColor(0.85,1),
			nonClient = 5,
			overflow = true,
			padding = 3,
			renderfunc = SS_UI_Theme_Default_slider_horizontal_rail_renderfunc,
		},
		"slider.horizontal .sdr-rail .sdr-handle" = { q0x = 0.5, q1x = 0.5, q0y = 0.5, q1y = 0.5, x = -6, y = -8, width = 12, height = 16 },
		"slider.vertical .sdr-rail" =
		{
			q0x = 0.5, q1x = 0.5, q0y = 0, q1y = 1,
			x = -8, width = 16,
			backgroundColor = UIColor(0.85,1),
			nonClient = 5,
			overflow = true,
			padding = 3,
			renderfunc = SS_UI_Theme_Default_slider_vertical_rail_renderfunc,
		},
		"slider.vertical .sdr-rail .sdr-handle" = { q0x = 0.5, q1x = 0.5, q0y = 0.5, q1y = 0.5, x = -8, y = -6, width = 16, height = 12 },
		"switchbutton button" = { height = 0 },
		"switchbutton .main-button" = { anchorMode = UI_Anchor_All, width = 0 },
		"switchbutton .side-button.prev" = { anchorMode = UI_Anchor_Vert | UI_Anchor_Left, x = 0, width = 24 },
		"switchbutton .side-button.next" = { anchorMode = UI_Anchor_Vert | UI_Anchor_Right, x = -24, width = 24 },
		"switchbutton.has-side-buttons .main-button" = { x = 24, width = -48 },
		"selectbox" = { icon = "icons/bullet_arrow_down.png", renderfunc = SS_UI_Theme_Default_selectbox_renderfunc },
		// - panels
		"splitpane > pane" = { anchorMode = UI_Anchor_All },
		"splitpane > split" = { anchorMode = UI_Anchor_All, backgroundColor = UIColor( 0.8, 1 ) },
		"splitpane.horizontal > .pane-a" = { y = 0, height = -3 },
		"splitpane.horizontal > .pane-b" = { y = 3, height = -3 },
		"splitpane.horizontal > split" = { y = -3, height = 6, nonClientV = 1, cursor = UI_Cursor_SizeNS, renderfunc = SS_UI_Theme_Default_hsplitpane_split_renderfunc },
		"splitpane.vertical > .pane-a" = { x = 0, width = -3 },
		"splitpane.vertical > .pane-b" = { x = 3, width = -3 },
		"splitpane.vertical > split" = { x = -3, width = 6, nonClientH = 1, cursor = UI_Cursor_SizeWE, renderfunc = SS_UI_Theme_Default_vsplitpane_split_renderfunc },
		"menupanel" = { anchorMode = UI_Anchor_All, renderfunc = SS_UI_Theme_Default_menupanel_renderfunc },
		// - extended
		"placeholder" = { backgroundColor = UIColor(0.7,0.35,0.3,1), icon = "icons/table_row_insert.png", renderfunc = SS_UI_Theme_Default_placeholder_renderfunc },
		"editablelist" = { padding = 32 },
		"editablelist > item" = { posMode = UI_Pos_SideA, backgroundColor = UIColor(0.85,1), renderfunc = SS_UI_Theme_Default_container_renderfunc },
		"editablelist > item:hover" = { backgroundColor = UIColor(0.9,1) },
		"editablelist > item:active" = { backgroundColor = UIColor(0.75,1) },
		"groupblock" = { stackMode = UI_Stack_Top },
		"groupblock > .groupblk-title" =
		{
			anchorMode = UI_Anchor_Hor,
			height = 24,
			backgroundColor = UIColor(0.3,0.5,0.7,1),
			textColor = UIColor(1,1),
			posMode = UI_Pos_SideA,
			renderfunc = SS_UI_Theme_Default_groupblock_titlebutton_renderfunc,
		},
		"groupblock > .groupblk-title:hover" = { backgroundColor = UIColor(0.35,0.55,0.75,1) },
		"groupblock > .groupblk-title:active" = { backgroundColor = UIColor(0.25,0.45,0.65,1) },
		"groupblock.open .groupblk-title" = { icon = "icons/bullet_arrow_down.png" },
		"groupblock.closed .groupblk-title" = { icon = "icons/bullet_arrow_up.png" },
		"groupblock .groupblk-cont" = { anchorMode = UI_Anchor_Hor, y = 24, stackMode = UI_Stack_AutoSizeTop, posMode = UI_Pos_SideA },
		"listboxmenu > button" =
		{
			posMode = UI_Pos_SideA,
			height = 24,
			q1x = 1,
			backgroundColor = UIColor(0.9,1),
			textColor = UIColor(0,1),
			renderfunc = SS_UI_Theme_Default_listboxmenu_button_renderfunc,
		},
		"listboxmenu > button:hover" = { backgroundColor = UIColor(0.4,0.6,0.8,1), textColor = UIColor(1,1) },
		"listboxmenu > button:active" = { backgroundColor = UIColor(0.3,0.5,0.7,1), textColor = UIColor(1,1) },
		"listboxmenu.select-list" = { maxHeight = 300 },
		"propertygrid datacontainer" = { anchorMode = UI_Anchor_All, backgroundColor = UIColor(0.8,1), renderfunc = SS_UI_Theme_Default_container_renderfunc },
		"propertygrid groupblock" = { anchorMode = UI_Anchor_Hor, posMode = UI_Pos_SideA },
		"propertygrid groupblock > container" = { nonClient = 4, nonClientRight = 0 },
		"propertygrid .label" = { q1x = 0.5, height = 24, marginV = 4, posMode = UI_Pos_SideA, nonClientRight = 4, backgroundColor = UIColor(0,0.1), halign = UI_Align_Left, valign = UI_Align_VCenter },
		"propertygrid .value" = { q1x = 0.5, height = 24, marginV = 4, posMode = UI_Pos_SideA },
		"propertygrid .separator" = { anchorMode = UI_Anchor_Hor, height = 24, textColor = UIColor(1), backgroundColor = UIColor(0.6,1) },
		"propertygrid button.value" = { q1x = 1 },
		"window" = { nonClientTop = 24, nonClientBottom = 4, nonClientLeft = 4, nonClientRight = 4, renderfunc = SS_UI_Theme_Default_window_renderfunc },
		"window .close-button" = { anchorMode = UI_Anchor_Right, x = -20, y = -22, width = 20, height = 18, icon = "icons/cross.png" },
		"filebrowser .path-block" = { height = 32, anchorMode = UI_Anchor_Hor | UI_Anchor_Top },
		"filebrowser .path-block .btn-back" = { width = 32, height = 32, icon = "icons/resultset_previous.png", nonClient = 2 },
		"filebrowser .path-block .btn-fwd" = { x = 32, width = 32, height = 32, icon = "icons/resultset_next.png", nonClient = 2 },
		"filebrowser .path-block .btn-up" = { x = 64, width = 32, height = 32, icon = "icons/arrow_up.png", nonClient = 2 },
		"filebrowser .path-block .path-text" = { x = 96, width = -96, anchorMode = UI_Anchor_Hor, height = 32, nonClient = 2 },
		"filebrowser .sub-block" = { y = -32, height = 32, anchorMode = UI_Anchor_Hor | UI_Anchor_Bottom },
		"filebrowser .sub-block .sub-text" = { width = -160, nonClient = 2, anchorMode = UI_Anchor_All },
		"filebrowser .sub-block .btn-submit" = { x = - 160, width = 160, nonClient = 2, anchorMode = UI_Anchor_Vert | UI_Anchor_Right, icon = "icons/page_white_go.png" },
		"filebrowser .file-scroll" = { y = 32, height = -64, anchorMode = UI_Anchor_All, backgroundColor = UIColor(0.95,1), padding = 4 },
		"filebrowser fbentry" = { margin = 4, posMode = UI_Pos_SideA, width = 128, height = 24, backgroundColor = UIColor(0), icon = "icons/page_white.png", renderfunc = SS_UI_Theme_Default_fbentry_renderfunc },
		"filebrowser fbentry:hover" = { backgroundColor = UIColor(0.4,0.6,0.8,0.3) },
		"filebrowser fbentry.selected" = { backgroundColor = UIColor(0.4,0.6,0.8,0.7), textColor = UIColor(1) },
		// type icons -- begin --
		"filebrowser fbentry.dir" = { icon = "icons/folder.png" },
		"filebrowser fbentry.type-image" = { icon = "icons/page_white_picture.png" },
		"filebrowser fbentry.type-audio" = { icon = "icons/page_white_cd.png" },
		"filebrowser fbentry.type-video" = { icon = "icons/page_white_camera.png" },
		"filebrowser fbentry.type-document" = { icon = "icons/page_white_text.png" },
		"filebrowser fbentry.type-data" = { icon = "icons/page_white_database.png" },
		"filebrowser fbentry.type-code" = { icon = "icons/page_white_text.png" },
		"filebrowser fbentry.type-archive" = { icon = "icons/page_white_zip.png" },
		// type icons -- end --
		"dataedit datacontainer" = { anchorMode = UI_Anchor_All, backgroundColor = UIColor(0.8,1), renderfunc = SS_UI_Theme_Default_container_renderfunc },
		"dataedit groupblock" = { anchorMode = UI_Anchor_Hor, posMode = UI_Pos_SideA },
		"dataedit groupblock > container" = { nonClient = 4, nonClientRight = 0 },
		"dataedit wrapper" = { anchorMode = UI_Anchor_Hor, stackMode = UI_Stack_AutoSizeTop, posMode = UI_Pos_SideA, margin = 4 },
		"dataedit .label" = { q1x = 0.5, height = 24, marginV = 4, posMode = UI_Pos_SideA, nonClientRight = 4, backgroundColor = UIColor(0,0.1), halign = UI_Align_Left, valign = UI_Align_VCenter },
		"dataedit .value" = { q1x = 0.5, height = 24, marginV = 4, posMode = UI_Pos_SideA },
		"dataedit .array_size" = { width = 80, height = 24, posMode = UI_Pos_SideA },
	}),
	
	// BUTTON
	button_render_bgr = SS_UI_Theme_Default_button_render_bgr,
	button_render_contents = SS_UI_Theme_Default_button_render_contents,
	
	// SCROLLBAR
	scroll_button_size = 0,
	
	// MENU
	menu_item_min_width = 200,
	menu_item_height = 24,
	menu_sep_height = 8,
	menu_item_spacing = 0,
	menu_padding = 4,
	
	// CHECKBOX
	checkbox_border = 1,
	checkbox_padding = 2,
	
	// RADIO BUTTON
	radiobutton_border = 1,
	radiobutton_padding = 2,
	
	// TEXTBOX
	textbox_border = 1,
	textbox_render_contents = SS_UI_Theme_Default_textbox_renderfunc_inner,
};

// inherit from main theme
function SS_UI_Theme_DarkPixel_button_renderfunc()
{
	if( this.rx0 == this.rx1 || this.ry0 == this.ry1 )
		return;
	
	theme = this.frame.theme;
	button_render_contents = theme.button_render_contents;
	
	if( this._cachedImage )
		SS_DrawButton( this._cachedImage, color(1), this.rx0, this.ry0, this.rx1, this.ry1, 4 );
	
	this!button_render_contents();
}

function SS_UI_Theme_DarkPixel_scrollbar_renderfunc()
{
	if( this._cachedImage )
		SS_DrawButton( this._cachedImage, color(1), this.rx0, this.ry0, this.rx1, this.ry1, 4 );
}

function SS_UI_Theme_DarkPixel_menu_renderfunc()
{
	data = this.data;
	
	pad = data.menu_padding;
	
	if( this._cachedImage )
		SS_DrawButton( this._cachedImage, color(1), this.rx0, this.ry0, this.rx1, this.ry1, 4 );
	
	c = this.backgroundColor;
	SS_DrawColorRect( this.rx0+32, this.ry0+2+pad, this.rx0+33, this.ry1-2-pad, c.r, c.g, c.b, c.a );
	
	x = this.rx0 + pad;
	y = this.ry0 + pad;
	foreach( id, item : data.items )
	{
		disabled = @item.disabled;
		checked = @item.checked;
		
		if( id === data.selected )
		{
			hlc = if( disabled, color(0.5,0.5,0.5,0.5), color(0.48,0.11,0.11,0.5) );
			SS_DrawColorRect_WH( x, y, data.item_width, data.item_height, hlc.r, hlc.g, hlc.b, hlc.a );
		}
		
		if( isset( item, "menu" ) )
			SS_DrawFitted( data.icon_submenu, x + data.item_width - data.item_height, y, x + data.item_width, y + data.item_height );
		
		if( @item.text !== null )
			SS_DrawTextLine_VC( item.text, this._cachedFont, x + 32, y + data.item_height / 2, if(disabled,[0.5,0.5,0.5,1],[0.9,0.9,0.9,1]) );
		else if( disabled )
			SS_DrawColorRect_WH( x + 32, y + data.sep_height / 2, data.item_width - 36, 1, c.r, c.g, c.b, c.a );
		
		if( disabled && @item.text === null )
			y += data.sep_height;
		else
		{
			if( checked !== null )
			{
				// checkbox
				cbx0 = x + 4;
				cby0 = y + 4;
				cbsz = min( 24, data.item_height - 8 );
				cbx1 = cbx0 + cbsz;
				cby1 = cby0 + cbsz;
				SS_DrawColorRect( cbx0, cby0, cbx1, cby1, 0.5, 0.6, 0.7, 1 );
				SS_DrawColorRect( cbx0+1, cby0+1, cbx1-1, cby1-1, 0.9, 0.9, 0.9, 1 );
				if( checked )
					SS_DrawColorRect( cbx0+3, cby0+3, cbx1-3, cby1-3, 0.1, 0.2, 0.4, 1 );
			}
			y += data.item_height;
		}
		y += data.item_spacing;
	}
}

function SS_UI_Theme_DarkPixel_checkbox_renderfunc()
{
	tex = this._cachedImage;
	if( tex )
	{
		cx = round( ( this.cx1 + this.cx0 ) * 0.5 ) - ( @tex.width % 2 ) / 2;
		cy = round( ( this.cy1 + this.cy0 ) * 0.5 ) - ( @tex.height % 2 ) / 2;
		SS_Draw({ preset = "box", position = vec2( cx, cy ), scale = vec2( tex.width, tex.height ), texture = tex });
	}
	tex = this._cachedIcon;
	if( tex )
	{
		cx = round( ( this.cx1 + this.cx0 ) * 0.5 ) - ( @tex.width % 2 ) / 2;
		cy = round( ( this.cy1 + this.cy0 ) * 0.5 ) - ( @tex.height % 2 ) / 2;
		SS_Draw({ preset = "box", position = vec2( cx, cy ), scale = vec2( tex.width, tex.height ), texture = tex });
	}
}

function SS_UI_Theme_DarkPixel_textbox_renderfunc()
{
	data = this.data;
	
	if( this._cachedImage )
		SS_DrawButton( this._cachedImage, color(1), this.rx0, this.ry0, this.rx1, this.ry1, 4 );
	
	textbox_render_contents = this.frame.theme.textbox_render_contents;
	this!textbox_render_contents();
}

function SS_UI_Theme_DarkPixel_slider_horizontal_rail_renderfunc()
{
	data = this.parent.data;
	P1X = this.cx0;
	P1Y = this.cy0;
	P2X = this.cx1;
	P2Y = this.cy1;
	
	c = this.backgroundColor;
	if( this._cachedImage )
		SS_DrawButton( this._cachedImage, color(1), P1X, P1Y, P2X, P2Y, 4 );
	
	NS = if( data.stopsize, floor( ( data.vmax - data.vmin ) / data.stopsize ), 0 );
	if( NS )
	{
		vdist = data.vmax - data.vmin;
		if( vdist < 0.001 )
			vdist = 0.001;
		
		SRS = this.px0;
		SRE = this.px1;
		scaled_stopsize = data.stopsize / vdist;
		if( NS * 2 < SRE - SRS )
		{
			for( q = 0; q <= 1.0; q += scaled_stopsize )
			{
				if( q > 1 )
					q = 1;
				spf = SRS * ( 1 - q ) + SRE * q;
				SS_DrawColorRect( spf, P1Y + 1, spf + 1, P2Y - 1, c.r, c.g, c.b, c.a );
			}
		}
	}
}

function SS_UI_Theme_DarkPixel_slider_vertical_rail_renderfunc()
{
	data = this.parent.data;
	P1X = this.cx0;
	P1Y = this.cy0;
	P2X = this.cx1;
	P2Y = this.cy1;
	
	c = this.backgroundColor;
	if( this._cachedImage )
		SS_DrawButton( this._cachedImage, color(1), P1X, P1Y, P2X, P2Y, 4 );
	
	NS = if( data.stopsize, floor( ( data.vmax - data.vmin ) / data.stopsize ), 0 );
	if( NS )
	{
		vdist = data.vmax - data.vmin;
		if( vdist < 0.001 )
			vdist = 0.001;
		
		SRS = this.py0;
		SRE = this.py1;
		scaled_stopsize = data.stopsize / vdist;
		if( NS * 2 < SRE - SRS )
		{
			for( q = 0; q <= 1.0; q += scaled_stopsize )
			{
				if( q > 1 )
					q = 1;
				spf = SRS * ( 1 - q ) + SRE * q;
				SS_DrawColorRect( P1X + 1, spf, P2X - 1, spf + 1, c.r, c.g, c.b, c.a );
			}
		}
	}
}

function SS_UI_Theme_DarkPixel_selectbox_renderfunc()
{
	data = this.data;
	icon = this._cachedIcon;
	text = this.caption;
	
	if( this._cachedImage )
		SS_DrawButton( this._cachedImage, color(1), this.rx0, this.ry0, this.rx1, this.ry1, 4 );
	
	if( this.frame.pushScissorRect( this.rx0 + 2, this.ry0 + 2, this.rx1 - 2, this.ry1 - 2 ) )
	{
		fullwidth = 0;
		if( text )
		{
			textlen = this._cachedFont.getTextLength( text );
			fullwidth += textlen;
		}
		
		cy = round( ( this.ry1 + this.ry0 ) * 0.5 );
		if( icon )
		{
			cyi = cy/* + if( this.hasClass("open"), 1, 0 )*/ - ( icon.height % 2 ) / 2;
			SS_Draw({ preset = "box", position = vec2( this.px1 + icon.width/2, cyi ), scale = vec2( icon.width, icon.height ), texture = icon });
		}
		
		if( text )
		{
			SS_DrawTextLine_VC( text, this._cachedFont, this.rx0 + 4, cy, SS_UI_ConvertColor( this.textColor ) );
		}
		
		this.frame.popScissorRect();
	}
}

function SS_UI_Theme_DarkPixel_window_renderfunc()
{
	if( this._cachedImage )
	{
		SS_DrawButtonExt( this._cachedImage, color(1), this.rx0, this.ry0, this.rx1, this.ry1, 4, 24, 4, 4 );
		SS_DrawTextLine_VC( this.caption, this._cachedFont, this.rx0 + 4, this.ry0 + 12, color(1) );
	}
}

function SS_UI_Theme_DarkPixel_menupanel_renderfunc()
{
	data = this.data;
	iht = data.item_height;
	
	if( this._cachedImage )
		SS_DrawButton( this._cachedImage, color(1), this.rx0, this.ry0, this.rx1, this.cy0, 4 );
	
	foreach( i, item : data.items )
	{
		disabled = @item.disabled;
		
		if( data.selected === i )
		{
			if( disabled )
			{
				SS_DrawColorRect( item.x, item.y, item.x + item.width, item.y + iht, 0.4, 0.4, 0.4, 0.5 );
			//	SS_DrawColorRect( item.x+1, item.y+1, item.x + item.width-1, item.y + iht-1, 0.8, 0.8, 0.8, 1 );
			}
			else
			{
				SS_DrawColorRect( item.x, item.y, item.x + item.width, item.y + iht, 0.48, 0.11, 0.11, 0.5 );
			//	SS_DrawColorRect( item.x+1, item.y+1, item.x + item.width-1, item.y + iht-1, 0.7, 0.8, 0.9, 1 );
			}
		}
		
		c = SS_UI_ConvertColor( this.textColor );
		if( disabled )
			c[3] *= 0.5;
		SS_DrawTextLine_VC( item.text, this._cachedFont, item.x + data.side_padding, item.y + iht / 2, c );
	}
}

global SS_UI_Theme_DarkPixel =
{
	stylesheet = SS_UI_Theme_Default.stylesheet.buildCopy
	({
		"root, static" = { backgroundColor = UIColor(64/255,1), textColor = UIColor( 0.9, 1 ) },
		"root" = { backgroundColor = UIColor(40/255,1) },
		".textcont" = { backgroundColor = UIColor( 0.1, 1 ), textColor = UIColor( 0.9, 1 ) },
		".topbar" = { backgroundColor = UIColor( 0.2, 1 ), textColor = UIColor( 0.9, 1 ) },
		"button" = { renderfunc = SS_UI_Theme_DarkPixel_button_renderfunc, image = "images/dp_btnN.png" },
		"button:hover" = { image = "images/dp_btnH.png" },
		"button:active" = { image = "images/dp_btnC.png" },
		"scrollbar" = { renderfunc = SS_UI_Theme_DarkPixel_scrollbar_renderfunc, image = "images/dp_insbg.png" },
		"scrollbar.vertical .btn-slider" = { icon = "images/dp_rgV.png" },
		"scrollbar.horizontal .btn-slider" = { icon = "images/dp_rgH.png" },
		"menu" = { renderfunc = SS_UI_Theme_DarkPixel_menu_renderfunc, image = "images/dp_listbg.png", backgroundColor = UIColor(105/255,1) },
		"checkbox" = { renderfunc = SS_UI_Theme_DarkPixel_checkbox_renderfunc, image = "images/dp_cbN.png" },
		"checkbox:hover" = { image = "images/dp_cbH.png" },
		"checkbox:active" = { image = "images/dp_cbC.png" },
		"checkbox.checked" = { icon = "images/dp_cbtick.png" },
		"radiobutton" = { renderfunc = SS_UI_Theme_DarkPixel_checkbox_renderfunc, image = "images/dp_rbN.png" },
		"radiobutton:hover" = { image = "images/dp_rbH.png" },
		"radiobutton:active" = { image = "images/dp_rbC.png" },
		"radiobutton.checked" = { icon = "images/dp_rbtick.png" },
		"textbox" = { renderfunc = SS_UI_Theme_DarkPixel_textbox_renderfunc, image = "images/dp_tb.png", textColor = UIColor(0.9,0.5), backgroundColor = UIColor(0.3,0.5) },
		"textbox:focus" = { renderfunc = SS_UI_Theme_DarkPixel_textbox_renderfunc, image = "images/dp_tbsel.png", backgroundColor = UIColor(0.48,0.11,0.11,0.5) },
		"textbox:focus, textbox.has-text" = { textColor = UIColor(0.9,1) },
		"integerbox .slider-btn.add" = { icon = "images/dp_tri_up.png" },
		"integerbox .slider-btn.sub" = { icon = "images/dp_tri_dn.png" },
		"slider.horizontal .sdr-rail" = { renderfunc = SS_UI_Theme_DarkPixel_slider_horizontal_rail_renderfunc, image = "images/dp_insbg.png", backgroundColor = UIColor(80/255,1) },
		"slider.vertical .sdr-rail" = { renderfunc = SS_UI_Theme_DarkPixel_slider_vertical_rail_renderfunc, image = "images/dp_insbg.png", backgroundColor = UIColor(80/255,1) },
		"selectbox" = { renderfunc = SS_UI_Theme_DarkPixel_selectbox_renderfunc, image = "images/dp_btnN.png", icon = "images/dp_tri_dn.png", textColor = UIColor(0.9,1), paddingRight = 15 },
		"selectbox:hover" = { image = "images/dp_btnH.png" },
		"selectbox:active, selectbox.open" = { image = "images/dp_btnC.png" },
		"window" = { renderfunc = SS_UI_Theme_DarkPixel_window_renderfunc, image = "images/dp_win.png" },
		"window .close-button" = { x = -20, y = -22, width = 20, height = 18, icon = "icons/cross.png" },
		"splitpane > split" = { anchorMode = UI_Anchor_All, backgroundColor = UIColor( 64/255, 1 ) },
		
		"menupanel" = { renderfunc = SS_UI_Theme_DarkPixel_menupanel_renderfunc, image = "images/dp_menu.png", textColor = UIColor(0.9,1) },
		"placeholder" = { backgroundColor = UIColor(0.48,0.11,0.11,0.5) },
		"editablelist > item" = { backgroundColor = UIColor(80/255,1) },
		"editablelist > item:hover" = { backgroundColor = UIColor(105/255,1) },
		"editablelist > item:active" = { backgroundColor = UIColor(64/255,1) },
		"groupblock > .groupblk-title" = { renderfunc = SS_UI_Theme_DarkPixel_selectbox_renderfunc, image = "images/dp_btnN.png", paddingRight = 15 },
		"groupblock > .groupblk-title:hover" = { image = "images/dp_btnH.png" },
		"groupblock > .groupblk-title:active" = { image = "images/dp_btnC.png" },
		"groupblock.open > .groupblk-title" = { icon = "images/dp_tri_dn.png" },
		"groupblock.closed > .groupblk-title" = { icon = "images/dp_tri_up.png" },
		"listboxmenu" = { renderfunc = SS_UI_Theme_DarkPixel_scrollbar_renderfunc, image = "images/dp_listbg.png", nonClient = 3 },
		"listboxmenu > button" = { backgroundColor = UIColor(0.3,1), textColor = UIColor(0.9,1) },
		"listboxmenu > button:hover" = { backgroundColor = UIColor(0.48,0.11,0.11,0.5), textColor = UIColor(1,1) },
		"listboxmenu > button:active" = { backgroundColor = UIColor(0.48,0.11,0.11,0.8), textColor = UIColor(1,1) },
		"propertygrid datacontainer" = { backgroundColor = UIColor(0.2,1) },
		"propertygrid .label" = { padding = 4, backgroundColor = UIColor(0), textColor = UIColor(0.9,1) },
		"propertygrid .separator" = { backgroundColor = UIColor(0.3,1), textColor = UIColor(0.8,1) },
		"dataedit datacontainer" = { backgroundColor = UIColor(0.2,1) },
		"dataedit .label" = { padding = 4, backgroundColor = UIColor(0), textColor = UIColor(0.9,1) },
		
		"filebrowser .file-scroll" = { backgroundColor = UIColor(64/255,1) },
		"filebrowser fbentry" = { backgroundColor = null, textColor = UIColor(0.9,1) },
		"filebrowser fbentry:hover" = { backgroundColor = UIColor(0.48,0.11,0.11,0.5) },
		"filebrowser fbentry.selected" = { backgroundColor = UIColor(0.48,0.11,0.11,0.8), textColor = UIColor(1) },
	}),
};
class( SS_UI_Theme_DarkPixel, SS_UI_Theme_Default );

