

function SS_DrawButton( tex, color, x0, y0, x1, y1, off, texoff )
{
	off ??= 8;
	texoff ??= off;
	
	xA = x0 + off;
	xB = x1 - off;
	yA = y0 + off;
	yB = y1 - off;
	
	tox = texoff / tex.width;
	toy = texoff / tex.height;
	itx = 1 - tox;
	ity = 1 - toy;
	hpw = 0.5 / tex.width;
	hph = 0.5 / tex.height;
	
	g_RB.begin();
	
	g_RB.f( x0, y0, 0, 0,  xA, y0, tox, 0,  xA, yA, tox, toy,  x0, yA, 0, toy )
		.f( xA, y0, tox+hpw, 0,  xB, y0, itx-hpw, 0,  xB, yA, itx-hpw, toy,  xA, yA, tox+hpw, toy )
		.f( xB, y0, itx, 0,  x1, y0, 1, 0,  x1, yA, 1, toy,  xB, yA, itx, toy );
	g_RB.f( x0, yA, 0, toy+hph,  xA, yA, tox, toy+hph,  xA, yB, tox, ity-hph,  x0, yB, 0, ity-hph )
		.f( xA, yA, tox+hpw, toy+hph,  xB, yA, itx-hpw, toy+hph,  xB, yB, itx-hpw, ity-hph,  xA, yB, tox+hpw, ity-hph )
		.f( xB, yA, itx, toy+hph,  x1, yA, 1, toy+hph,  x1, yB, 1, ity-hph,  xB, yB, itx, ity-hph );
	g_RB.f( x0, yB, 0, ity,  xA, yB, tox, ity,  xA, y1, tox, 1,  x0, y1, 0, 1 )
		.f( xA, yB, tox+hpw, ity,  xB, yB, itx-hpw, ity,  xB, y1, itx-hpw, 1,  xA, y1, tox+hpw, 1 )
		.f( xB, yB, itx, ity,  x1, yB, 1, ity,  x1, y1, 1, 1,  xB, y1, itx, 1 );
	
	g_RB.c4b( color.r, color.g, color.b, color.a ).interlace( 4, 16, 16 );
	g_RB.quadsToTris( 20 );
	g_RB.draw( tex, g_VD_P2T2CC4, 0, 54, SS_PT_TRIANGLES );
}

function SS_DrawButtonExt( tex, color, x0, y0, x1, y1, offL, offT, offR, offB )
{
	xA = x0 + offL;
	xB = x1 - offR;
	yA = y0 + offT;
	yB = y1 - offB;
	
	tox = offL / tex.width;
	toy = offT / tex.height;
	itx = 1 - ( offR / tex.width );
	ity = 1 - ( offB / tex.width );
	hpw = 0.5 / tex.width;
	hph = 0.5 / tex.height;
	
	g_RB.begin();
	
	g_RB.f( x0, y0, 0, 0,  xA, y0, tox, 0,  xA, yA, tox, toy,  x0, yA, 0, toy )
		.f( xA, y0, tox+hpw, 0,  xB, y0, itx-hpw, 0,  xB, yA, itx-hpw, toy,  xA, yA, tox+hpw, toy )
		.f( xB, y0, itx, 0,  x1, y0, 1, 0,  x1, yA, 1, toy,  xB, yA, itx, toy );
	g_RB.f( x0, yA, 0, toy+hph,  xA, yA, tox, toy+hph,  xA, yB, tox, ity-hph,  x0, yB, 0, ity-hph )
		.f( xA, yA, tox+hpw, toy+hph,  xB, yA, itx-hpw, toy+hph,  xB, yB, itx-hpw, ity-hph,  xA, yB, tox+hpw, ity-hph )
		.f( xB, yA, itx, toy+hph,  x1, yA, 1, toy+hph,  x1, yB, 1, ity-hph,  xB, yB, itx, ity-hph );
	g_RB.f( x0, yB, 0, ity,  xA, yB, tox, ity,  xA, y1, tox, 1,  x0, y1, 0, 1 )
		.f( xA, yB, tox+hpw, ity,  xB, yB, itx-hpw, ity,  xB, y1, itx-hpw, 1,  xA, y1, tox+hpw, 1 )
		.f( xB, yB, itx, ity,  x1, yB, 1, ity,  x1, y1, 1, 1,  xB, y1, itx, 1 );
	
	g_RB.c4b( color.r, color.g, color.b, color.a ).interlace( 4, 16, 16 );
	g_RB.quadsToTris( 20 );
	g_RB.draw( tex, g_VD_P2T2CC4, 0, 54, SS_PT_TRIANGLES );
}

function SS_UI_ConvertColor( cc ){ return color( cc.r, cc.g, cc.b, cc.a ); }

function SS_UI_ConvertAlignment( halign, valign )
{
	out = 0;
	if( halign & UI_Align_Left ) out |= DT_LEFT;
	if( halign & UI_Align_Center ) out |= DT_CENTER;
	if( halign & UI_Align_Right ) out |= DT_RIGHT;
	if( halign & UI_Align_Justify ) out |= DT_JUSTIFY;
	if( valign & UI_Align_Top ) out |= DT_TOP;
	if( valign & UI_Align_VCenter ) out |= DT_VCENTER;
	if( valign & UI_Align_Bottom ) out |= DT_BOTTOM;
	return out;
}

function SS_UI_CreateFrame()
{
	SS_Frame = UI_CreateFrame();
	SS_Frame.setTheme( SS_UI_Theme_DarkPixel );
	function SS_Frame.scissor_func( x0, y0, x1, y1 )
	{
		if( x0 === null )
			SS_SetClipRect( null );
		else
			SS_SetClipRect( x0, y0, x1, y1 );
	}
	function SS_Frame.clipboard_func( text )
	{
		if( text === null )
			return SS_GetClipboardText();
		return SS_SetClipboardText( text ) || "";
	}
	function SS_Frame.cursor_func( cursor )
	{
		if( cursor === null )
			return;
		SS_ShowCursor( cursor !== false );
		if( cursor === true )
			SS_SetSystemCursor( UI_Cursor_Arrow );
		else if( typeid( cursor ) == VT_INT )
			SS_SetSystemCursor( cursor );
	}
	function SS_Frame.font_func( font, size )
	{
		if( font === null ) font = "fonts/lato-regular.ttf";
		if( size <= 0 ) size = 12;
		
		return SS_CreateFont( font, size );
	}
	function SS_Frame.image_func( image )
	{
		if( typeid( image ) == VT_STRING )
			image = SS_CreateTexture( image );
		return image;
	}
	function SS_Frame.icon_func( icon )
	{
		if( typeid( icon ) == VT_STRING )
			icon = SS_CreateTexture( icon );
		return icon;
	}
	return SS_Frame;
}

function SS_UI_HandleEvent( frame, e )
{
	if( e.type == SDL_MOUSEMOTION )
	{
		FRAME.doMouseMove( e.x, e.y );
	}
	else if( e.type == SDL_MOUSEBUTTONDOWN || e.type == SDL_MOUSEBUTTONUP )
	{
		btn = -1;
		if( e.button == 1 ) btn = 0;
		else if( e.button == 3 ) btn = 1;
		else if( e.button == 2 ) btn = 2;
		FRAME.doMouseButton( btn, e.type == SDL_MOUSEBUTTONDOWN );
	}
	else if( e.type == SDL_MOUSEWHEEL )
	{
		FRAME.doMouseWheel( e.x, -e.y );
	}
	else if( e.type == SDL_KEYUP || e.type == SDL_KEYDOWN )
	{
		key = 0;
		if( e.keycode == SDLK_LEFT ) key = Key_Left;
		else if( e.keycode == SDLK_RIGHT ) key = Key_Right;
		else if( e.keycode == SDLK_UP ) key = Key_Up;
		else if( e.keycode == SDLK_DOWN ) key = Key_Down;
		else if( e.keycode == SDLK_BACKSPACE ) key = Key_DelLeft;
		else if( e.keycode == SDLK_DELETE ) key = Key_DelRight;
		else if( e.keycode == SDLK_TAB ) key = Key_Tab;
		else if( e.keycode == SDLK_X && e.mod & SDL_KMOD_CTRL ) key = Key_Cut;
		else if( e.keycode == SDLK_C && e.mod & SDL_KMOD_CTRL ) key = Key_Copy;
		else if( e.keycode == SDLK_V && e.mod & SDL_KMOD_CTRL ) key = Key_Paste;
		else if( e.keycode == SDLK_Z && e.mod & SDL_KMOD_CTRL ) key = Key_Undo;
		else if( e.keycode == SDLK_Y && e.mod & SDL_KMOD_CTRL ) key = Key_Redo;
		else if( e.keycode == SDLK_A && e.mod & SDL_KMOD_CTRL ) key = Key_SelectAll;
		else if( e.keycode == SDLK_PAGEUP ) key = Key_PageUp;
		else if( e.keycode == SDLK_PAGEDOWN ) key = Key_PageDown;
		else if( e.keycode == SDLK_RETURN || e.keycode == SDLK_KP_ENTER ) key = Key_Enter;
		else if( e.keycode == SDLK_SPACE ) key = Key_Activate;
		if( key )
		{
			if( e.mod & SDL_KMOD_SHIFT ) key |= KeyMod_Shift;
			// submit event
			FRAME.doKeyPress( key, e.type == SDL_KEYDOWN, e.repeat );
		}
	}
	else if( e.type == SDL_TEXTINPUT )
	{
		chrs = string_utf8_decode( e.text );
		FRAME.doPutChar( chrs[0] );
	}
	else if( e.type == SDL_WINDOWEVENT && e.event == SDL_WINDOWEVENT_RESIZED )
	{
		FRAME.resize( e.data1, e.data2 );
		return true;
	}
}

